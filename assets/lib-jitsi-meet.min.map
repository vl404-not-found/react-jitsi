{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/(webpack)/buildin/global.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/./node_modules/process/browser.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./node_modules/lodash.debounce/index.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/(webpack)/buildin/module.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./node_modules/async/lib/async.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/QualityController.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/rng.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/v4.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/(webpack)/buildin/amd-options.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/timers-browserify/main.js","webpack://JitsiMeetJS/./node_modules/setimmediate/setImmediate.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","INVITE_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","BrowserCapabilities","Logger","require","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","__filename","_instances","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","siteID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","CALLSTATS_SCRIPT_URL","loadCallStatsAPI","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","longTasksStatsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","supportsPerformanceObserver","performanceObserverStats","PerformanceObserverStats","JitsiConferenceEvents","startObserver","stopObserver","getLongTasksStats","removeLongTasksStatsListener","dispose","size","emit","callStats","values","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","cs","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","properties","eventToLog","sendAnalytics","eventName","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","GRANTED_PERMISSIONS","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","AUDIO","PRESENTER","VIDEO","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferCodec","codecName","matchingPayloadTypes","rtp","codec","payload","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","H264","fmtp","item","config","includes","rtxApts","rtxPts","keepPts","rtcpFb","usesAdapter","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","height","ideal","max","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevices","availableDevicesPollTimer","emptyFuncton","getConstraints","um","audio","isNewStyleConstraintsSupported","isSafari","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","USER","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","width","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","GlobalOnErrorHandler","callErrorHandler","isElectron","screenShareAudio","desktopStream","chromeMediaSource","bandwidth","firefox_fake_device","fake","screen","chromeMediaSourceId","getTrackSSConstraints","desktopSharingFrameRate","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","label","updateKnownDevices","pds","devicesReceived","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","slice","RTCUtils","Listenable","super","clearInterval","enumerateDevices","navigator","mediaDevices","then","devices","initEnumerateDevicesWithCallback","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","srcObject","getStreamID","getTrackID","isChromiumBased","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","defaultSetVideoSrc","MediaStream","videoTracks","audioTracks","_initPCConstraints","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","ds","supportsDeviceChangeEvent","addEventListener","setInterval","pcConstraints","googHighStartBitrate","googPayloadPadding","googScreencastMinBitrate","googCpuOveruseDetection","googCpuOveruseEncodeUsage","googCpuUnderuseThreshold","googCpuOveruseThreshold","p2pPcConstraints","Promise","resolve","reject","getUserMedia","catch","_newGetUserMediaWithConstraints","umDevices","_newGetDesktopMedia","isSupported","supportsVideo","obtainStream","_parseDesktopSharingOptions","obtainAudioAndVideoPermissions","_getAudioAndVideoStreams","streams","audioStream","videoStream","res","audioVideo","addTrack","release","desktop","sourceType","track","MediaType","videoType","VideoType","DESKTOP","CAMERA","handleLocalStream","requestingDesktop","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","desktopSharingSources","gumOptions","trackOptions","newObtainAudioAndVideoPermissions","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","getTracks","applyConstraints","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","autoGainControl","noiseSuppression","newGetConstraints","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","effects","isDeviceChangeAvailable","deviceType","mediaStream","url","revokeObjectURL","isDesktopSharingEnabled","setAudioOutputDevice","getAudioOutputDevice","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","enable","googSuspendBelowMinBitrate","rtcUtils","origAttachMediaStream","apply","ex","callUnhandledRejectionHandler","promise","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","createLocalTracks","tracksInfo","newTracks","trackInfo","safeCounterIncrement","localTrack","JitsiLocalTrack","rtcId","_newCreateLocalTracks","mediaStreamMetaData","metaData","getSettings","RTC","peerConnections","localTracks","_channel","_lastN","_lastNEndpoints","_senderVideoConstraints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","addListener","destroy","_channelOpenListener","initializeBridgeChannel","wsUrl","BridgeChannel","_senderVideoConstraintsChanged","sendPinnedEndpointMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","_selectedEndpoint","sendSetLastNMessage","senderVideoConstraints","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","onCallEnded","setReceiverVideoConstraint","maxFrameHeight","isOpen","selectEndpoints","ids","pinEndpoint","eventType","createPeerConnection","signaling","iceConfig","isP2P","getPCConstraints","abtestSuspendVideo","addPermanentProperties","enableInsertableStreams","encodedInsertableStreams","forceEncodedAudioInsertableStreams","forceEncodedVideoInsertableStreams","supportsSdpSemantics","sdpSemantics","bundlePolicy","newConnection","TraceablePeerConnection","_removePeerConnection","traceablePeerConnection","addLocalTrack","getLastN","getSenderVideoConstraints","getLocalVideoTrack","localVideo","getLocalTracks","getLocalAudioTrack","localAudio","tracks","getType","getRemoteTracks","remoteTracks","pcRemoteTracks","setAudioMute","mutePromises","audioTrack","mute","unmute","all","removeLocalTrack","pos","removeRemoteTracks","owner","removedTracks","pcRemovedTracks","elSelector","isUserStreamById","streamId","closeBridgeChannel","setAudioLevel","audioLevel","getTrackBySSRC","isAudioTrack","sendChannelMessage","to","sendMessage","setLastN","remoteAudioTracks","setAudioOutput","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","emitter","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","listeners","prependListener","once","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackErrors","constraint","failedConstraintName","getResolutionFromFailedConstraint","removeEventListener","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","mid","linessrc","idx","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","ssrcMap","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpmap","sctpAttrs","number","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","each","_","fb","hasAttribute","fromJingle","jingle","sessionId","groups","$","contents","content","jingle2media","sctp","streamCount","payloadType","__","parameter","hdrExt","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","version","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","getName","isOpera","isIExplorer","isNWJS","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","DummyLocalStorage","clear","_storage","keyName","keyValue","JitsiLocalStorage","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","jitsiLocalStorage","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","WRONG_STATE","DISPLAY_NAME_REQUIRED","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","enableWebsocketResume","serviceUrl","websocketKeepAlive","xmppPing","XmppConnection","createConnection","bosh","_initStrophePlugins","caps","Caps","clientNode","initFeaturesList","ev","addFeature","disableRtx","enableOpusRed","supportsAudioRed","enableLipSync","rayo","E2EEncryption","getConnection","connectionHandler","credentials","performance","statusStr","getStatusString","XMPPEvents","getStunAndTurnCredentials","_resetState","pingJid","getFeaturesAndIdentities","identities","PING","identity","speakerStatsComponentAddress","conferenceDurationComponentAddress","lobbySupported","f","fr","endsWith","JitsiConnectionEvents","_onPrivateMessage","password","anonymousConnectionFailed","connectionFailed","lastErrorMsg","JitsiConnectionErrors","ping","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","attaching","anonymousdomain","hosts","configDomain","hostname","createRoom","roomName","onCreateResource","roomjid","customDomain","muc","mucNickname","randomHexString","emuc","getJid","getJingleLog","getLog","getXmppLog","dial","getSessions","sessions","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","jvb","iceServers","p2p","p2pStunServers","stunServers","iceTransportPolicy","MucConnectionPlugin","JingleConnectionPlugin","RayoConnectionPlugin","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","room","tryParseJSONAndVerify","jsonString","json","jsonMessage","parsedJson","users","created_timestamp","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","RunningAverage","average","addNext","getAverage","_callStatsUserName","_machineId","_p8","externalStorage","username","UsernameGenerator","generateUsername","generateCallStatsUserName","jitsiMeetId","generateJitsiMeetId","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","ssrcNum","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","msid","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","groupInfo","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","transform","selectMedia","selectedMLine","toRawSDP","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","PENDING","ACTIVE","ENDED","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","order","wrtcFuncNames","fabricEvent","reportType","_fabrics","backend","backendInitialized","atLeastOneFabric","defaultInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","defaultPC","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","configParams","_traceAndCatchBackendCalls","applicationVersion","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","VP8","VP9","randomElement","randomHexDigit","randomAlphanumStr","getConnectionPluginDefinition","base","ConnectionPluginListenable","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","argsTag","funcTag","genTag","mapTag","setTag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","Buffer","Uint8Array","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","entry","ListCache","MapCache","Stack","__data__","arrayLikeKeys","inherited","isObjectLike","isArrayLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","isIndex","assignValue","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","copyArray","getTag","isFunc","buffer","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","Ctor","cloneArrayBuffer","dataView","byteOffset","byteLength","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","symbol","initCloneByTag","stacked","props","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","baseIsNative","isFunction","arrayBuffer","newValue","getMapData","getValue","cache","pairs","LARGE_ARRAY_SIZE","other","ArrayBuffer","ctorString","isLength","baseKeys","CONN_STATUS_CHANGED","_options","_stropheConn","_usesWebsocket","_lastSuccessTracker","LastSuccessTracker","startTracking","_resumeTask","ResumeTask","_deferredIQs","PingConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","_onPingErrorThresholdExceeded","pingOptions","websocket","_status","OPEN","disco","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_maybeStartWSKeepAlive","_processDeferredIQs","cancel","startInterval","_tryResumingConnection","_wsKeepAlive","Events","_clearDeferredIQs","deferred","closeWebsocket","streamManagement","getResumeToken","intervalWithJitter","fetch","timeLeft","sendIQ2","sendBeacon","schedule","ENVIRONMENT","g","objectTag","typedArrayTags","freeProcess","process","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","isArg","isBuff","isType","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","othLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","isMasked","arrLength","seen","arrValue","othIndex","resIndex","arrayFilter","baseUnary","gumFunction","ScreenObtainer","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","supportsGetDisplayMedia","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","JitsiMeetScreenObtainer","openDesktopPicker","streamType","onGetStreamResponse","errorCallback","getDisplayMedia","cursor","applyConstraintsPromise","videoTrack","errorDetails","errorName","errorMsg","errorStack","currentExecutingScript","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","_changeConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","NETWORK_INFO_EVENT","NetworkInfo","_current","isOnline","updateNetworkInfo","networkInfo","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","msidParts","parseSctpDescription","maxMessageSize","maxSizeLine","sctpPort","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","Deferred","_key","_keyIndex","_reqs","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceJoined","_onConferenceLeft","_onParticipantLeft","Olm","promises","pId","olmData","_getParticipantOlmData","uuidv4","olm","ciphertext","_encryptKeyInfo","setRejectTimeout","_sendMessage","allSettled","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","get_library_version","keyInfo","base64js","fromByteArray","keyIndex","encrypt","_sendSessionInit","free","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","safeJsonParse","toByteArray","lastKey","isEqual","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","SIGNATURE_OPTIONS","namedCurve","_conferenceJoined","_enabled","_initialized","_signatureKeyPair","_e2eeCtx","E2EEContext","_olmAdapter","_ratchetKey","debounce","_ratchetKeyImpl","_rotateKey","_rotateKeyImpl","_onParticipantPropertyChanged","_onParticipantJoined","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","_onOlmIdKeyReady","_onParticipantE2EEChannelReady","_onParticipantKeyUpdated","supportsInsertableStreams","testing","disableE2EE","isEnabled","enabled","crypto","subtle","generateKey","setSignatureKey","privateKey","serializedSigningKey","exportKey","publicKey","setLocalParticipantProperty","_restartMediaSessions","_generateKey","updateKey","setKey","getRandomValues","_getMediaSessions","_setupSenderE2EEForTrack","cleanup","oldValue","importedKey","importKey","crv","key_ops","material","newKey","ratchet","updateCurrentKey","findReceiverForTrack","handleReceiver","sender","findSenderForTrack","handleSender","doesVideoMuteByStreamRemove","isVideoTrack","JingleSessionPC","JingleSession","jingleContents","videoContents","maxFrameHeightSel","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","signalingLayer","SignalingLayerImpl","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","JingleSessionState","doInitialize","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","videoQuality","disabledCodec","preferredCodec","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","startSilent","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","iceConnectionState","reconnect","iceStarted","onnegotiationneeded","remoteDescription","usesUnifiedPlan","workFunction","finishedCallback","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","setChatRoom","enableLayerSuspension","MediaSessionEvents","REMOTE_VIDEO_CONSTRAINTS_CHANGED","getRemoteRecvMaxFrameHeight","idealHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","tmp","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","addIceCandidates","iceCandidates","rtcCandidate","RTCIceCandidate","outerHTML","iceCandidate","addIceCandidate","readSsrcInfo","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","generateRecvonlySsrc","acceptOffer","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","invite","addTracks","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","replaceTransport","jingleOfferElem","originalOffer","clone","remove","newFingerprint","sendTransportAccept","accept","responder","responderJid","sessionModify","transportAccept","medialines","sendTransportReject","transportReject","setSenderMaxBitrates","setMaxBitRate","setSenderVideoConstraint","setSenderVideoDegradationPreference","terminate","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","isAdd","logPrefix","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","_processRemoteRemoveSource","offerIq","remoteSdp","removeSsrcInfo","usesPlanB","findIndex","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","newLocalSDP","sourceRemoveElem","ssrcLines","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","finishCallback","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","PERMISSION_PROMPT_IS_SHOWN","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","len2","encodeChunk","lookup","end","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","versions","cwd","chdir","dir","umask","AudioContext","webkitAudioContext","LocalStatsCollector","interval","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","ERROR_FEATURE_VERSION_MISMATCH","compareIdentities","some","generateSha","sortedIdentities","accumulatedValue","sortedFeatures","feature","versionToCapabilities","jidToVersion","rooms","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","submit","_generateVersion","removeFeature","getFeatures","_getDiscoInfo","sha","receivedNode","category","_fixChatRoomPresenceMap","addToPresence","_notifyVersionChanged","_identities","_features","oldVersion","ON","OFF","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","isWebRTCTrackMuted","isLocalAudioTrack","getOriginalStream","getStreamId","getTrack","getTrackLabel","getTrackId","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","active","newAudioLevel","supportsReceiverStats","getMSID","trackId","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","createAudioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","timestamp","score","pcmData","getDeviceId","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","stopStream","getDeviceLabel","_destroyed","AudioContextImpl","E2E_RTT_CHANGED","clearRejectTimeout","_timeout","ms","SIM_LAYER_RIDS","TPCUtils","videoBitrates","localStreamEncodingsConfig","high","low","scaleResolutionDownBy","standard","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","sources","_getStreamEncodings","isSimulcastOn","insertUnifiedPlanSimulcastReceive","usesSdpMungingForSimulcast","simulcast_03","simulcast","simulcastLine","transceiverInit","sendEncodings","addTransceiver","getTransceivers","addStream","setEncodings","getLocalStreamHeightConstraints","localVideoHeightConstraints","encoding","stopped","localSSRCs","_addedStreams","_extractPrimarySSRC","getParameters","encodings","setParameters","transceivers","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","IDENTITY_UPDATED","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","textEncoder","TextEncoder","deriveBits","encode","keyBytes","_setEffectInProgress","effect","_startStreamEffect","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","storedMSID","_streamEffect","_originalStream","startEffect","_stopStreamEffect","stopEffect","_switchStreamEffect","setEffect","cont","removeTrack","_queueSetMuted","setMuted","_setMuted","logMuteInfo","_removeStreamFromConferenceAsMute","streamOptions","getCameraFacingMode","assign","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","successCallback","_removeLocalTrackAsMute","_setConference","_onByteSentStatsReceived","bytesSent","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","JibriSession","_mode","_setSessionID","setStatus","getError","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getStatus","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setInitiator","setTerminator","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","errorIq","children","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","isDevicePermissionGranted","supported","results","every","permissionStatus","isMultipleAudioInputSupported","emitEvent","consoleTransport","globalTransports","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","webpackPolyfill","deprecate","paths","grammar","reg","format","u","z","rate","subtype","sessionConfig","raddr","dir2","RecordingResult","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","mimeType","ondataavailable","dataEvent","recorderToRemove","download","Blob","href","click","getRecordingResults","getFileType","JitsiConnection","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","setToken","initJitsiConference","JitsiConference","getConnectionTimes","getLogs","metadata","ua","eventManager","JitsiConferenceEventManager","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","resourceCreator","isAuthenticatedUser","setupXMPPListeners","_statsCurrentId","statisticsId","Settings","callStatsUserName","statsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","e2eping","E2ePing","setupRTCListeners","qualityController","QualityController","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","DetectionEvents","enableNoisyMicDetection","vadNoiseDetection","VADNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","removeXMPPListeners","onMemberLeft","_getActiveMediaSession","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getPerformanceStats","longTasksStats","eventId","addCommandListener","command","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","getFromPresence","sendPrivateTextMessage","sendPrivateMessage","sendCommand","sendCommandOnce","removeCommand","removeFromPresence","setSubject","subject","isModerator","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","transcriptionStatus","localVideoTrack","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","actorParticipant","muteParticipant","myroomjid","actorId","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","setVideoMute","addAsUnmutePromises","removeAsMutePromises","getRole","isHidden","hiddenDomain","lock","lockRoom","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","pinParticipant","lastN","isInteger","isVideoActive","getParticipantCount","countHidden","grantOwner","setAffiliation","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","nick","statsID","botType","JitsiParticipant","_role","_botType","_updateFeatures","_maybeStartOrStopP2P","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","onMemberKicked","isSelfPresence","kickedParticipantId","kickedParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","onTransportInfo","transportInfo","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","supportsP2P","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_isE2EEEnabled","_setBridgeChannel","_suspendMediaTransferForJvbConnection","webSocket","bridgeChannelType","openBridgeChannel","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","duration","peerConnection","startRecording","stopRecording","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","getMeetingUniqueId","getMeetingId","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","nodes","prop","overallFeedback","detailedFeedback","getSsrcByTrack","getLocalSSRC","getSSRC","remoteUserId","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","IceFailedHandling","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","done","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","getStats","setPreferredReceiveMaxFrameHeight","setPreferredSendMaxFrameHeight","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","meetingId","perf","toggleE2EE","setEnabled","isLobbySupported","getLobby","isMembersOnly","membersOnlyEnabled","enableLobby","disableLobby","disable","joinLobby","email","lobbyDenyAccess","denyAccess","lobbyApproveAccess","approveAccess","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","actor","forward","setParticipantPropertyListener","recorderSession","logObject","AuthenticationEvents","txt","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","isTwa","matchMedia","isUserInteractionRequiredForUnmute","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpTransceiver","RTCRtpSender","ondevicechange","supportsLocalCandidateRttStatistics","PerformanceObserver","supportedEntryTypes","RTCRtpReceiver","supportsRTTStatistics","_getChromiumBasedVersion","createEncodedStreams","createEncodedVideoStreams","ReadableStream","postMessage","getCapabilities","chromium","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","configurable","writable","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","isEngine","is","92","93","versionName","94","vendor","model","95","analyticsHandlers","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","setConferenceName","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","statsInterval","longTasks","maxDuration","performanceStatsInterval","avgRatePerMinute","maxDurationMs","longTaskEventHandler","getEntries","task","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","startAudioLevelStats","audioLevels","getAudioLevels","processNewAudioLevelReport","processAudioLevelReport","processNewStatsReport","processStatsReport","itemStatByKey","stat","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","receiveBandwidth","sendBandwidth","localCandidateType","localip","remoteCandidateType","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","packetsLost","bytesReceivedNow","bytesReceivedBefore","bytesReceived","nowBytesTransmitted","timeMs","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","audioCodec","videoBitrateDownload","videoBitrateUpload","videoCodec","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","localIp","networkType","currentRoundTripTime","framerateMean","frameHeight","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","dest","srcEvent","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","_identity","getConference","jitsiTrack","isAudioMuted","_isMediaTypeMuted","_getFeaturesPromise","getBotType","getIdentity","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","kJitsiE2EE","E2EEcontext","baseUrl","ljm","workerBlob","blobUrl","_worker","Worker","operation","receiverStreams","createEncodedAudioStreams","readableStream","readable","writableStream","senderStreams","stropheConnection","_resumeRetryN","_retryDelay","_cancelResume","_networkOnlineListener","_scheduleResume","_resumeTimeout","getJitterDelay","retryDelay","_resumeConnection","resumeToken","pattern","oldToken","retry","minDelay","LastRequestTracker","_lastSuccess","xmppConnection","originalRawInput","ConnectionPlugin","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingInterval","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","_addPingExecutionTimestamp","_lastServerCheck","pingIntervals","maxInterval","previousTS","currentInterval","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","ChatRoom","doLeave","createNonAnonymousRoom","packet2JSON","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","members","presHandlers","_removeConnListeners","noBridgeAvailable","Moderator","lobby","Lobby","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","JitsiTranscriptionStatus","xns","addVideoInfoToPresence","presenceUpdateTime","customJoinPresenceExtensions","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","presenceSyncTime","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","setLobbyRoomJid","disableDiscoInfo","getForm","form","formSubmit","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","newRole","_initFocus","memberOfThis","displayJids","att","phone","pin","processNode","focusFeatures","supportsRestartByTerminate","tagHandlers","nickname","onParticipantLeft","skipEvents","onMucMemberLeft","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","subjectText","stamp","dateParts","passwordSelect","lobbyRoomNode","lobbyRoomJid","grantIQ","kickIQ","onError","onNotSupported","formsubmit","setMembersOnly","formToSubmit","handlerIdx","getMemberRole","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","getMediaPresenceInfo","mutedNode","videoTypeNode","isSipGatewayEnabled","iqToFocus","clean","onMucLeft","doReject","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoom","_leaveLobbyRoom","avatar","invitePassword","memberRoomJid","msgToSend","createExpBackoffTimer","step","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","machineUID","machineId","openSctp","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","opusMaxAverageBitrate","stereo","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","startMuted","successTime","me","iceservers","dict","credential","temp","useTurnUdp","updateLog","_queue","_processQueueTasks","_stopped","kill","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","char","getState","addSources","removeSources","SignalingLayer","ssrcOwners","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","getPeerMediaInfo","getSSRCOwner","StropheLogger","logIncoming","logOutgoing","onRayo","roomPass","callResource","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","trace","errStatusCapture","senderVideoConstraintsChanged","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","colibriClass","msgPayload","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","videoConstraints","jsonObject","dtlsRole","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","NotSupportedError","InvalidStateError","InvalidAccessError","OperationError","edgeVersion","addTrackToStreamAndFireEvent","dispatchEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","Event","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceGatheringState","usingBundle","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","RTCIceGatherer","gatherPolicy","_config","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","onaddstream","ontrack","onremovestream","onconnectionstatechange","onicegatheringstatechange","ondatachannel","_emitGatheringStateChange","getConfiguration","getLocalStreams","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","removeStream","getSenders","getReceivers","_createIceGatherer","bufferedCandidateEvents","bufferCandidates","_gather","onlocalcandidate","evt","serializedCandidate","toJSON","complete","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","remoteMsid","isComplete","setTransport","setRemoteCandidates","isNewTrack","nativeTrack","removeTrackFromStreamAndFireEvent","states","checking","disconnected","failed","new","connecting","numAudioTracks","numVideoTracks","offerOptions","remoteCodec","rHdrExt","getLocalCandidates","mediaSectionsInOffer","candidateString","selector","MediaStreamTrack","senderOrReceiver","allStats","ortcObjectName","nativeGetstats","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","nativeMethod","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","standardVideoBitrates","maxBitratesVideo","tpcUtils","statsinterval","interop","Interop","Simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","senderVideoMaxHeight","getCodecMimeType","codecPreference","what","_remoteStreamAdded","_remoteStreamRemoved","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","_processStat","statValue","endTime","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","_setVideoType","setMute","getSynchronizationSources","endpoints","endpointTrackMap","mediaTrack","findTrackById","onaddtrack","streamAudioTracks","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","ownerEndpointId","peerMediaInfo","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","fidGroups","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","videoMedia","enforceSendRecv","transformStreamIdentifiers","hasCameraTrack","_mungeCodecOrder","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","rtxSsrcMapping","rtxSsrc","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","isMediaStreamInPc","findSenderByKind","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","toUnifiedPlan","videoSender","preference","degradationPreference","planBScreenSharing","presenterEnabled","scaleFactor","layer","mungeRemoteDescription","currentDescription","newHeight","encodingsEnabledState","ldStreamIndex","interToneGap","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","peerTracks","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","groupSSRCs","extractSSRCMap","_processLocalSSRCsMap","handleFailure","oaPromise","trackMSID","newSSRCNum","oldSSRCNum","currNumSsrcs","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","correspondingRtxSsrcs","clearSsrcCache","ssrcMapping","sdpTransformer","modifyRtxSsrcs2","primaryVideoSsrcs","correspondingRtxSsrc","previousAssociatedRtxStream","stripRtx","cachedPrimarySsrc","injectRecvOnly","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_playCallback","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_addMutedLocalVideoTracksToSDP","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","primaryCname","_transformMediaIdentifiers","pcId","streamAndTrackIDs","sessionDesc","audioMLine","kSimulcastFormats","layers","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_actOnIceFailed","enableIceRestart","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","_timeoutTrigger","_hasAudioInput","_audioLevel","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","myUserID","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","_calculateVADScore","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_propagateSendMaxFrameHeight","mediaSession","preferredReceiveMaxFrameHeight","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevelsString","AverageStatReport","calculate","appendReport","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","SphinxService","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","ProxyConnectionService","jitsiConnection","otherOptions","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","processMessage","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AuthUtil","getTokenAuthUrl","urlPattern","roleUpgrade","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","current","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","inactiveMid","cmLine","msCrypto","rnds8","rng","byteToHex","bytesToUuid","buf","bth","v4","rnds","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiMeetJS","constants","recording","recordingConstants","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","oldResolution","newResolution","resName","getLowerResolution","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","getSoleInlineScript","currentScript","thrownErr","near","far","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","expr","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","enableConferenceFlag","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","Word","TranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","getWord","getBeginTime","getEndTime","audioBlob","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","supportsUnifiedPlan","val","compactObject","isEmptyObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","shimAddTrackRemoveTrackWithNative","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","addIceCandidateNullSupported","nativeAddIceCandidate","fixNegotiationNeeded","origMSTEnabled","RTCDtmfSender","RTCDTMFSender","RTCPeerConnectionShim","shimRTCPeerConnection","validTurn","shimReplaceTrack","setTrack","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","preferredMediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","audioTransceiver","setDirection","videoTransceiver","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeAllowExtmapMixed","nativeSRD","adapter","shimChrome","shimFirefox","shimEdge","shimSafari","commonShim","chromeShim","browserShim","firefoxShim","edgeShim","safariShim","adapterFactory"],"mappings":"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","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 147);\n","const XMPPEvents = {\r\n    /**\r\n     * Indicates error while adding ice candidate.\r\n     */\r\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\r\n\r\n    // Designates an event indicating that the focus has asked us to mute our\r\n    // audio.\r\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\r\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\r\n    BRIDGE_DOWN: 'xmpp.bridge_down',\r\n\r\n    /**\r\n     * Triggered when 'session-accept' is received from the responder.\r\n     */\r\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\r\n\r\n    // Designates an event indicating that an offer (e.g. Jingle\r\n    // session-initiate) was received.\r\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\r\n\r\n    // Triggered when Jicofo kills our media session, this can happen while\r\n    // we're still in the MUC, when it decides to terminate the media session.\r\n    // For example when the session is idle for too long, because we're the only\r\n    // person in the conference room.\r\n    CALL_ENDED: 'xmpp.callended.jingle',\r\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\r\n\r\n    // The conference properties (as advertised by jicofo) have changed\r\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\r\n\r\n    /**\r\n     * This event is triggered when the ICE connects for the first time.\r\n     */\r\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\r\n\r\n    // Designates an event indicating that the connection to the XMPP server\r\n    // failed.\r\n    CONNECTION_FAILED: 'xmpp.connection.failed',\r\n\r\n    // Designates an event indicating that the media (ICE) connection was\r\n    // interrupted. This should go to the RTC module.\r\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\r\n\r\n    // Designates an event indicating that the media (ICE) connection was\r\n    // restored. This should go to the RTC module.\r\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\r\n\r\n    // Designates an event indicating that the media (ICE) connection failed.\r\n    // This should go to the RTC module.\r\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\r\n\r\n    /**\r\n     * Designates an event indicating connection status changes.\r\n     */\r\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\r\n\r\n    // Designates an event indicating that the display name of a participant\r\n    // has changed.\r\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\r\n\r\n    /**\r\n     * Chat room instance have been added to Strophe.emuc plugin.\r\n     */\r\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\r\n\r\n    /**\r\n     * Chat room instance have been removed from Strophe.emuc plugin.\r\n     */\r\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\r\n    ETHERPAD: 'xmpp.etherpad',\r\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\r\n    FOCUS_LEFT: 'xmpp.focus_left',\r\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\r\n\r\n    /**\r\n     * Event fired when 'transport-replace' Jingle message has been received,\r\n     * before the new offer is set on the PeerConnection.\r\n     */\r\n    ICE_RESTARTING: 'rtc.ice_restarting',\r\n\r\n    /**\r\n     * Event fired after the 'transport-replace' message has been processed\r\n     * and the new offer has been set successfully.\r\n     */\r\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\r\n\r\n    /**\r\n     * Designates an event indicating that we were kicked from the XMPP MUC.\r\n     * @param {boolean} isSelfPresence - whether it is for local participant\r\n     * or another participant.\r\n     * @param {string} actorJid - the jid of the participant who was initator\r\n     * of the kick.\r\n     * @param {?string} participantJid - when it is not a kick for local participant,\r\n     * this is the jid of the participant which was kicked.\r\n     */\r\n    KICKED: 'xmpp.kicked',\r\n\r\n    // Designates an event indicating that our role in the XMPP MUC has changed.\r\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\r\n\r\n    /**\r\n     * Event fired when the unique meeting id is set.\r\n     */\r\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\r\n\r\n    // Designates an event indicating that an XMPP message in the MUC was\r\n    // received.\r\n    MESSAGE_RECEIVED: 'xmpp.message_received',\r\n\r\n    // Designates an event indicating that an invite XMPP message in the MUC was\r\n    // received.\r\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\r\n\r\n    // Designates an event indicating that a private XMPP message in the MUC was\r\n    // received.\r\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\r\n\r\n    // Designates an event indicating that a bot participant type had changed\r\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\r\n\r\n    // Designates an event indicating that the XMPP MUC was destroyed.\r\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\r\n\r\n    // Designates an event indicating that we have joined the XMPP MUC.\r\n    MUC_JOINED: 'xmpp.muc_joined',\r\n\r\n    // Designates an event indicating that a participant joined the XMPP MUC.\r\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\r\n\r\n    // Designates an event indicating that a participant left the XMPP MUC.\r\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\r\n\r\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\r\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\r\n\r\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\r\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\r\n\r\n    // Designates an event indicating that a participant left the XMPP MUC.\r\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\r\n\r\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\r\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\r\n\r\n    // Designates an event indicating that local participant left the muc\r\n    MUC_LEFT: 'xmpp.muc_left',\r\n\r\n    // Designates an event indicating that the MUC role of a participant has\r\n    // changed.\r\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\r\n\r\n    // Designates an event indicating that the MUC has been locked or unlocked.\r\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\r\n\r\n    // Designates an event indicating that the MUC members only config has changed.\r\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\r\n\r\n    // Designates an event indicating that a participant in the XMPP MUC has\r\n    // advertised that they have audio muted (or unmuted).\r\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\r\n\r\n    // Designates an event indicating that a participant in the XMPP MUC has\r\n    // advertised that they have video muted (or unmuted).\r\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\r\n\r\n    // Designates an event indicating that the video type (e.g. 'camera' or\r\n    // 'screen') for a participant has changed.\r\n    // Note: currently this event fires every time we receive presence from\r\n    // someone (regardless of whether or not the \"video type\" changed).\r\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\r\n\r\n    /**\r\n     * Indicates that the features of the participant has been changed.\r\n     */\r\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\r\n    PASSWORD_REQUIRED: 'xmpp.password_required',\r\n\r\n    /**\r\n     * Indicates that phone number changed.\r\n     */\r\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\r\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\r\n    PRESENCE_STATUS: 'xmpp.presence_status',\r\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\r\n\r\n    // xmpp is connected and obtained user media\r\n    READY_TO_JOIN: 'xmpp.ready_to_join',\r\n\r\n    /**\r\n     * Indicates that recording state changed.\r\n     */\r\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\r\n\r\n    // Designates an event indicating that we received statistics from a\r\n    // participant in the MUC.\r\n    REMOTE_STATS: 'xmpp.remote_stats',\r\n\r\n    /**\r\n     * Indicates that the offer / answer renegotiation has failed.\r\n     */\r\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\r\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\r\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\r\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\r\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\r\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\r\n\r\n    /**\r\n     * Indicates that max users limit has been reached.\r\n     */\r\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\r\n\r\n    // Designates an event indicating that we sent an XMPP message to the MUC.\r\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\r\n\r\n    // Designates an event indicating that we sent a private XMPP message to\r\n    // a specific user of the muc.\r\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\r\n\r\n    /**\r\n     * Event fired when we do not get our 'session-accept' acknowledged by\r\n     * Jicofo. It most likely means that there is serious problem with our\r\n     * connection or XMPP server and we should reload the conference.\r\n     *\r\n     * We have seen that to happen in BOSH requests race condition when the BOSH\r\n     * request table containing the 'session-accept' was discarded by Prosody.\r\n     * Jicofo does send the RESULT immediately without any condition, so missing\r\n     * packets means that most likely it has never seen our IQ.\r\n     */\r\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\r\n\r\n    /**\r\n     * Event fired when speaker stats update message is received.\r\n     */\r\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\r\n\r\n    /**\r\n     * Event fired when conference creation timestamp is received.\r\n     */\r\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\r\n\r\n    // Designates an event indicating that we should join the conference with\r\n    // audio and/or video muted.\r\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\r\n\r\n    // Designates an event indicating that the subject of the XMPP MUC has\r\n    // changed.\r\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\r\n\r\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\r\n    // suspending detected\r\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\r\n\r\n    /**\r\n     * Notifies for transcription status changes. The event provides the\r\n     * following parameters to its listeners:\r\n     *\r\n     * @param {String} status - The new status.\r\n     */\r\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\r\n\r\n    /**\r\n     * Event fired when 'transport-info' with new ICE candidates is received.\r\n     */\r\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\r\n\r\n    /**\r\n     * Indicates that video SIP GW state changed.\r\n     *\r\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\r\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\r\n     */\r\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\r\n\r\n    /**\r\n     * Indicates that video SIP GW Session state changed.\r\n     * The statuses are any of the following statuses:\r\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\r\n     * {@see VideoSIPGWConstants}\r\n     *\r\n     * @param {options} event - {address, oldState, newState, displayName}.\r\n     */\r\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\r\n        'xmpp.videoSIPGWSessionStateChanged',\r\n\r\n    // Designates an event indicating that the local ICE connection state has\r\n    // changed.\r\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\r\n\r\n    /**\r\n     * Event which is emitted when the body in an XMPP message in the MUC\r\n     * contains JSON\r\n     */\r\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\r\n};\r\n\r\nmodule.exports = XMPPEvents;\r\n","/**\r\n * The events for the conference.\r\n */\r\n\r\n/**\r\n * Event indicates that the current conference audio input switched between audio\r\n * input states,i.e. with or without audio input.\r\n */\r\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\r\n\r\n/**\r\n * Indicates that authentication status changed.\r\n */\r\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\r\n\r\n/**\r\n * Fired just before the statistics module is disposed and it's the last chance\r\n * to submit some logs to the statistics service (ex. CallStats if enabled),\r\n * before it's disconnected.\r\n */\r\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\r\n\r\n/**\r\n * Indicates that an error occured.\r\n */\r\nexport const CONFERENCE_ERROR = 'conference.error';\r\n\r\n/**\r\n * Indicates that conference failed.\r\n */\r\nexport const CONFERENCE_FAILED = 'conference.failed';\r\n\r\n/**\r\n * Indicates that conference has been joined. The event does NOT provide any\r\n * parameters to its listeners.\r\n */\r\nexport const CONFERENCE_JOINED = 'conference.joined';\r\n\r\n/**\r\n * Indicates that conference has been left.\r\n */\r\nexport const CONFERENCE_LEFT = 'conference.left';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been established\r\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\r\n * state for the first time.\r\n */\r\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been interrupted for some\r\n * reason.\r\n * XXX This is currently fired when the *ICE* connection is interrupted.\r\n */\r\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been restored.\r\n * XXX This is currently fired when the *ICE* connection is restored.\r\n */\r\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\r\n\r\n/**\r\n * A connection to the video bridge's data channel has been established.\r\n */\r\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\r\n\r\n/**\r\n * A user has changed it display name\r\n */\r\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\r\n\r\n/**\r\n * The dominant speaker was changed.\r\n */\r\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\r\n\r\n/**\r\n * UTC conference timestamp when first participant joined.\r\n */\r\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\r\n\r\n/**\r\n * Indicates that DTMF support changed.\r\n */\r\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\r\n\r\n/**\r\n * Indicates that a message from another participant is received on data\r\n * channel.\r\n */\r\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\r\n\r\n/**\r\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\r\n *\r\n * Event emitted when conference transits, between one to one and multiparty JVB\r\n * conference. If the conference switches to P2P it's neither one to one nor\r\n * a multiparty JVB conference, but P2P (the status argument of this event will\r\n * be <tt>false</tt>).\r\n *\r\n * The first argument is a boolean which carries the previous value and\r\n * the seconds argument is a boolean with the new status. The event is emitted\r\n * only if the previous and the new values are different.\r\n *\r\n * @type {string}\r\n */\r\nexport const JVB121_STATUS = 'conference.jvb121Status';\r\n\r\n/**\r\n * You are kicked from the conference.\r\n * @param {JitsiParticipant} the participant that initiated the kick.\r\n */\r\nexport const KICKED = 'conference.kicked';\r\n\r\n/**\r\n * Participant was kicked from the conference.\r\n * @param {JitsiParticipant} the participant that initiated the kick.\r\n * @param {JitsiParticipant} the participant that was kicked.\r\n */\r\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\r\n\r\n/**\r\n * The Last N set is changed.\r\n *\r\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\r\n * which are leaving Last N\r\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\r\n * which are entering Last N\r\n */\r\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\r\n\r\n/**\r\n * Indicates that the room has been locked or unlocked.\r\n */\r\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\r\n\r\n/**\r\n * Indicates that the region of the media server (jitsi-videobridge) that we\r\n * are connected to changed (or was initially set).\r\n * @type {string} the region.\r\n */\r\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\r\n\r\n/**\r\n * An event(library-private) fired when a new media session is added to the conference.\r\n * @type {string}\r\n * @private\r\n */\r\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\r\n\r\n/**\r\n * An event(library-private) fired when the conference switches the currently active media session.\r\n * @type {string}\r\n * @private\r\n */\r\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\r\n\r\n/**\r\n * Indicates that the conference had changed to members only enabled/disabled.\r\n * The first argument of this event is a <tt>boolean</tt> which when set to\r\n * <tt>true</tt> means that the conference is running in members only mode.\r\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\r\n */\r\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\r\n\r\n/**\r\n * New text message was received.\r\n */\r\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\r\n\r\n/**\r\n * Event indicates that the current selected input device has no signal\r\n */\r\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\r\n\r\n/**\r\n * Event indicates that the current microphone used by the conference is noisy.\r\n */\r\nexport const NOISY_MIC = 'conference.noisy_mic';\r\n\r\n/**\r\n * New private text message was received.\r\n */\r\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\r\n\r\n/**\r\n * Event fired when JVB sends notification about interrupted/restored user's\r\n * ICE connection status or we detect local problem with the video track.\r\n * First argument is the ID of the participant and\r\n * the seconds is a string indicating if the connection is currently\r\n * - active - the connection is active\r\n * - inactive - the connection is inactive, was intentionally interrupted by\r\n * the bridge\r\n * - interrupted - a network problem occurred\r\n * - restoring - the connection was inactive and is restoring now\r\n *\r\n * The current status value can be obtained by calling\r\n * JitsiParticipant.getConnectionStatus().\r\n */\r\nexport const PARTICIPANT_CONN_STATUS_CHANGED\r\n    = 'conference.participant_conn_status_changed';\r\n\r\n/**\r\n * Indicates that the features of the participant has been changed.\r\n */\r\nexport const PARTCIPANT_FEATURES_CHANGED\r\n    = 'conference.partcipant_features_changed';\r\n\r\n/**\r\n * Indicates that a the value of a specific property of a specific participant\r\n * has changed.\r\n */\r\nexport const PARTICIPANT_PROPERTY_CHANGED\r\n    = 'conference.participant_property_changed';\r\n\r\n/**\r\n * Indicates that the conference has switched between JVB and P2P connections.\r\n * The first argument of this event is a <tt>boolean</tt> which when set to\r\n * <tt>true</tt> means that the conference is running on the P2P connection.\r\n */\r\nexport const P2P_STATUS = 'conference.p2pStatus';\r\n\r\n/**\r\n * Indicates that phone number changed.\r\n */\r\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\r\n\r\n/**\r\n * The conference properties changed.\r\n * @type {string}\r\n */\r\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\r\n\r\n/**\r\n * Indicates that recording state changed.\r\n */\r\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\r\n\r\n/**\r\n * Indicates that video SIP GW state changed.\r\n * @param {VideoSIPGWConstants} status.\r\n */\r\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\r\n    = 'conference.videoSIPGWAvailabilityChanged';\r\n\r\n/**\r\n * Indicates that video SIP GW Session state changed.\r\n * @param {options} event - {\r\n *     {string} address,\r\n *     {VideoSIPGWConstants} oldState,\r\n *     {VideoSIPGWConstants} newState,\r\n *     {string} displayName}\r\n * }.\r\n */\r\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\r\n    = 'conference.videoSIPGWSessionStateChanged';\r\n\r\n/**\r\n * Indicates that start muted settings changed.\r\n */\r\nexport const START_MUTED_POLICY_CHANGED\r\n    = 'conference.start_muted_policy_changed';\r\n\r\n/**\r\n * Indicates that the local user has started muted.\r\n */\r\nexport const STARTED_MUTED = 'conference.started_muted';\r\n\r\n/**\r\n * Indicates that subject of the conference has changed.\r\n */\r\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\r\n\r\n/**\r\n * Indicates that DTMF support changed.\r\n */\r\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\r\n\r\n/**\r\n * Event indicates that local user is talking while he muted himself\r\n */\r\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\r\n\r\n/**\r\n * A new media track was added to the conference. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {JitsiTrack} track the added JitsiTrack\r\n */\r\nexport const TRACK_ADDED = 'conference.trackAdded';\r\n\r\n/**\r\n * Audio levels of a media track ( attached to the conference) was changed.\r\n */\r\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\r\n\r\n/**\r\n * A media track ( attached to the conference) mute status was changed.\r\n * @param {JitsiParticipant|null} the participant that initiated the mute\r\n * if it is a remote mute.\r\n */\r\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\r\n\r\n/**\r\n * The media track was removed from the conference. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {JitsiTrack} track the removed JitsiTrack\r\n */\r\nexport const TRACK_REMOVED = 'conference.trackRemoved';\r\n\r\n/**\r\n * Notifies for transcription status changes. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {String} status - The new status.\r\n */\r\nexport const TRANSCRIPTION_STATUS_CHANGED\r\n    = 'conference.transcriptionStatusChanged';\r\n\r\n\r\n/**\r\n * A new user joined the conference.\r\n */\r\nexport const USER_JOINED = 'conference.userJoined';\r\n\r\n/**\r\n * A user has left the conference.\r\n */\r\nexport const USER_LEFT = 'conference.userLeft';\r\n\r\n/**\r\n * User role changed.\r\n */\r\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\r\n\r\n/**\r\n * User status changed.\r\n */\r\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\r\n\r\n/**\r\n * Event indicates that the bot participant type changed.\r\n */\r\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\r\n\r\n/**\r\n * A new user joined the lobby room.\r\n */\r\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\r\n\r\n/**\r\n * A user from the lobby room has been update.\r\n */\r\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\r\n\r\n/**\r\n * A user left the lobby room.\r\n */\r\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\r\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","import BrowserCapabilities from './BrowserCapabilities';\r\n\r\nexport default new BrowserCapabilities();\r\n","/* Copyright @ 2015-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require(\"./Logger\");\r\nvar LogCollector = require(\"./LogCollector\");\r\n\r\n/**\r\n * Definition of the log method\r\n * @name log_method\r\n * @function\r\n * @param {...*} log_args the arguments to be logged\r\n */\r\n/**\r\n * The logger's transport type definition.\r\n *\r\n * @typedef {object} LoggerTransport\r\n *\r\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\r\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\r\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\r\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\r\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\r\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\r\n */\r\n\r\n/**\r\n * Map with the created loggers with ID.\r\n */\r\nvar idLoggers = {};\r\n\r\n/**\r\n * Array with the loggers without id.\r\n */\r\nvar loggers = [];\r\n\r\n/**\r\n * Log level for the lbrary.\r\n */\r\nvar curLevel = Logger.levels.TRACE;\r\n\r\n\r\nmodule.exports = {\r\n    /**\r\n     * Adds given {@link LoggerTransport} instance to the list of global\r\n     * transports which means that it'll be used by all {@link Logger}s\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    addGlobalTransport: function(transport) {\r\n        Logger.addGlobalTransport(transport);\r\n    },\r\n    /**\r\n     * Removes given {@link LoggerTransport} instance from the list of global\r\n     * transports\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    removeGlobalTransport: function(transport) {\r\n        Logger.removeGlobalTransport(transport);\r\n    },\r\n    /**\r\n    * Sets global options which will be used by all loggers. Changing these\r\n    * works even after other loggers are created.\r\n    */\r\n    setGlobalOptions: function(options) {\r\n        Logger.setGlobalOptions(options);\r\n    },\r\n    /**\r\n     * Creates new logger.\r\n     * @arguments the same as Logger constructor\r\n     */\r\n    getLogger: function(id, transports, options) {\r\n        var logger = new Logger(curLevel, id, transports, options);\r\n        if(id) {\r\n            idLoggers[id] = idLoggers[id] || [];\r\n            idLoggers[id].push(logger);\r\n        } else {\r\n            loggers.push(logger);\r\n        }\r\n        return logger;\r\n    },\r\n    /**\r\n     * Changes the log level for the existing loggers by id.\r\n     * @param level the new log level.\r\n     * @param id if specified the level will be changed only for loggers with the\r\n     * same id. Otherwise the operation will affect all loggers that don't\r\n     * have id.\r\n     */\r\n    setLogLevelById: function(level, id) {\r\n        var l = id? (idLoggers[id] || []) : loggers;\r\n        for(var i = 0; i < l.length; i++) {\r\n            l[i].setLevel(level);\r\n        }\r\n    },\r\n    /**\r\n     * Changes the log level for all existing loggers.\r\n     * @param level the new log level.\r\n     */\r\n    setLogLevel: function (level) {\r\n        curLevel = level;\r\n        var i = 0;\r\n        for(; i < loggers.length; i++) {\r\n            loggers[i].setLevel(level);\r\n        }\r\n\r\n        for(var id in idLoggers) {\r\n            var l = idLoggers[id] || [];\r\n            for(i = 0; i < l.length; i++) {\r\n                l[i].setLevel(level);\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * The supported log levels.\r\n     */\r\n    levels: Logger.levels,\r\n    /**\r\n     * Exports the <tt>LogCollector</tt>.\r\n     */\r\n    LogCollector: LogCollector\r\n};\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport browser from '../browser';\r\nimport ScriptUtil from '../util/ScriptUtil';\r\n\r\nimport analytics from './AnalyticsAdapter';\r\nimport CallStats from './CallStats';\r\nimport LocalStats from './LocalStatsCollector';\r\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\r\nimport RTPStats from './RTPStatsCollector';\r\nimport { CALLSTATS_SCRIPT_URL } from './constants';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * Stores all active {@link Statistics} instances.\r\n * @type {Set<Statistics>}\r\n */\r\nlet _instances;\r\n\r\n/**\r\n * True if callstats API is loaded\r\n */\r\nlet isCallstatsLoaded = false;\r\n\r\n/**\r\n * Since callstats.io is a third party, we cannot guarantee the quality of their\r\n * service. More specifically, their server may take noticeably long time to\r\n * respond. Consequently, it is in our best interest (in the sense that the\r\n * intergration of callstats.io is pretty important to us but not enough to\r\n * allow it to prevent people from joining a conference) to (1) start\r\n * downloading their API as soon as possible and (2) do the downloading\r\n * asynchronously.\r\n *\r\n * @param {StatisticsOptions} options - Options to use for downloading and\r\n * initializing callstats backend.\r\n */\r\nfunction loadCallStatsAPI(options) {\r\n    if (!isCallstatsLoaded) {\r\n        ScriptUtil.loadScript(\r\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\r\n            /* async */ true,\r\n            /* prepend */ true,\r\n            /* relativeURL */ undefined,\r\n            /* loadCallback */ () => _initCallStatsBackend(options)\r\n        );\r\n        isCallstatsLoaded = true;\r\n    }\r\n}\r\n\r\n/**\r\n * Initializes Callstats backend.\r\n *\r\n * @param {StatisticsOptions} options - The options to use for initializing\r\n * callstats backend.\r\n * @private\r\n */\r\nfunction _initCallStatsBackend(options) {\r\n    if (CallStats.isBackendInitialized()) {\r\n        return;\r\n    }\r\n\r\n    if (!CallStats.initBackend({\r\n        callStatsID: options.callStatsID,\r\n        callStatsSecret: options.callStatsSecret,\r\n        userName: options.userName,\r\n        aliasName: options.aliasName,\r\n        applicationName: options.applicationName,\r\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\r\n        confID: options.confID,\r\n        siteID: options.siteID\r\n    })) {\r\n        logger.error('CallStats Backend initialization failed bad');\r\n    }\r\n}\r\n\r\n/**\r\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\r\n * \"message\" and \"constraintName\". So we need to bundle additional information\r\n * from JitsiTrackError into error passed to callstats to preserve valuable\r\n * information about error.\r\n * @param {JitsiTrackError} error\r\n */\r\nfunction formatJitsiTrackErrorForCallStats(error) {\r\n    const err = new Error();\r\n\r\n    // Just copy original stack from error\r\n    err.stack = error.stack;\r\n\r\n    // Combine name from error's name plus (possibly) name of original GUM error\r\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\r\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\r\n\r\n    // Put all constraints into this field. For constraint failed errors we will\r\n    // still know which exactly constraint failed as it will be a part of\r\n    // message.\r\n    err.constraintName = error.gum && error.gum.constraints\r\n        ? JSON.stringify(error.gum.constraints) : '';\r\n\r\n    // Just copy error's message.\r\n    err.message = error.message;\r\n\r\n    return err;\r\n}\r\n\r\n/**\r\n * Init statistic options\r\n * @param options\r\n */\r\nStatistics.init = function(options) {\r\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\r\n    if (typeof options.pcStatsInterval === 'number') {\r\n        Statistics.pcStatsInterval = options.pcStatsInterval;\r\n    }\r\n\r\n    if (typeof options.audioLevelsInterval === 'number') {\r\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\r\n    }\r\n\r\n    if (typeof options.longTasksStatsInterval === 'number') {\r\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\r\n    }\r\n\r\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\r\n};\r\n\r\n/**\r\n * The options to configure Statistics.\r\n * @typedef {Object} StatisticsOptions\r\n * @property {string} applicationName - The application name to pass to\r\n * callstats.\r\n * @property {string} aliasName - The alias name to use when initializing callstats.\r\n * @property {string} userName - The user name to use when initializing callstats.\r\n * @property {string} confID - The callstats conference ID to use.\r\n * @property {string} callStatsID - Callstats credentials - the id.\r\n * @property {string} callStatsSecret - Callstats credentials - the secret.\r\n * @property {string} customScriptUrl - A custom lib url to use when downloading\r\n * callstats library.\r\n * @property {string} roomName - The room name we are currently in.\r\n */\r\n/**\r\n *\r\n * @param xmpp\r\n * @param {StatisticsOptions} options - The options to use creating the\r\n * Statistics.\r\n */\r\nexport default function Statistics(xmpp, options) {\r\n    /**\r\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\r\n     * collect RTP statistics for each peerconnection.\r\n     * @type {Map<string, RTPStats}\r\n     */\r\n    this.rtpStatsMap = new Map();\r\n    this.eventEmitter = new EventEmitter();\r\n    this.xmpp = xmpp;\r\n    this.options = options || {};\r\n\r\n    this.callStatsIntegrationEnabled\r\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\r\n\r\n            // Even though AppID and AppSecret may be specified, the integration\r\n            // of callstats.io may be disabled because of globally-disallowed\r\n            // requests to any third parties.\r\n            && (Statistics.disableThirdPartyRequests !== true);\r\n    if (this.callStatsIntegrationEnabled) {\r\n        this.callStatsApplicationLogsDisabled\r\n            = this.options.callStatsApplicationLogsDisabled;\r\n        if (browser.isReactNative()) {\r\n            _initCallStatsBackend(this.options);\r\n        } else {\r\n            loadCallStatsAPI(this.options);\r\n        }\r\n\r\n        if (!this.options.confID) {\r\n            logger.warn('\"confID\" is not defined');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores {@link CallStats} instances for each\r\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\r\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\r\n     * @type {Map<number, CallStats>}\r\n     */\r\n    this.callsStatsInstances = new Map();\r\n\r\n    Statistics.instances.add(this);\r\n}\r\nStatistics.audioLevelsEnabled = false;\r\nStatistics.audioLevelsInterval = 200;\r\nStatistics.pcStatsInterval = 10000;\r\nStatistics.disableThirdPartyRequests = false;\r\nStatistics.analytics = analytics;\r\n\r\nObject.defineProperty(Statistics, 'instances', {\r\n    /**\r\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\r\n     * initializes the Set to allow any Set polyfills to be applied.\r\n     * @type {Set<Statistics>}\r\n     */\r\n    get() {\r\n        if (!_instances) {\r\n            _instances = new Set();\r\n        }\r\n\r\n        return _instances;\r\n    }\r\n});\r\n\r\n/**\r\n * Starts collecting RTP stats for given peerconnection.\r\n * @param {TraceablePeerConnection} peerconnection\r\n */\r\nStatistics.prototype.startRemoteStats = function(peerconnection) {\r\n    this.stopRemoteStats(peerconnection);\r\n\r\n    try {\r\n        const rtpStats\r\n            = new RTPStats(\r\n                peerconnection,\r\n                Statistics.audioLevelsInterval,\r\n                Statistics.pcStatsInterval,\r\n                this.eventEmitter);\r\n\r\n        rtpStats.start(Statistics.audioLevelsEnabled);\r\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\r\n    } catch (e) {\r\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\r\n    }\r\n};\r\n\r\nStatistics.localStats = [];\r\n\r\nStatistics.startLocalStats = function(stream, callback) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\r\n        callback);\r\n\r\n    this.localStats.push(localStats);\r\n    localStats.start();\r\n};\r\n\r\nStatistics.prototype.addAudioLevelListener = function(listener) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\r\n};\r\n\r\nStatistics.prototype.removeAudioLevelListener = function(listener) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\r\n};\r\n\r\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\r\n};\r\n\r\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\r\n    this.eventEmitter.removeListener(\r\n        StatisticsEvents.BEFORE_DISPOSED, listener);\r\n};\r\n\r\nStatistics.prototype.addConnectionStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(\r\n        StatisticsEvents.CONNECTION_STATS,\r\n        listener);\r\n};\r\n\r\nStatistics.prototype.addByteSentStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\r\n        listener);\r\n};\r\n\r\n/**\r\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\r\n *\r\n * @param {Function} listener a function that would be called when notified.\r\n * @returns {void}\r\n */\r\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\r\n};\r\n\r\n/**\r\n * Creates an instance of {@link PerformanceObserverStats} and starts the\r\n * observer that records the stats periodically.\r\n *\r\n * @returns {void}\r\n */\r\nStatistics.prototype.attachLongTasksStats = function(conference) {\r\n    if (!browser.supportsPerformanceObserver()) {\r\n        logger.warn('Performance observer for long tasks not supported by browser!');\r\n\r\n        return;\r\n    }\r\n\r\n    this.performanceObserverStats = new PerformanceObserverStats(\r\n        this.eventEmitter,\r\n        Statistics.longTasksStatsInterval);\r\n\r\n    conference.on(\r\n        JitsiConferenceEvents.CONFERENCE_JOINED,\r\n        () => this.performanceObserverStats.startObserver());\r\n    conference.on(\r\n        JitsiConferenceEvents.CONFERENCE_LEFT,\r\n        () => this.performanceObserverStats.stopObserver());\r\n};\r\n\r\n/**\r\n * Obtains the current value of the LongTasks event statistics.\r\n *\r\n * @returns {Object|null} stats object if the observer has been\r\n * created, null otherwise.\r\n */\r\nStatistics.prototype.getLongTasksStats = function() {\r\n    return this.performanceObserverStats\r\n        ? this.performanceObserverStats.getLongTasksStats()\r\n        : null;\r\n};\r\n\r\n/**\r\n * Removes the given listener for the LONG_TASKS_STATS event.\r\n *\r\n * @param {Function} listener the listener we want to remove.\r\n * @returns {void}\r\n */\r\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.dispose = function() {\r\n    try {\r\n        // NOTE Before reading this please see the comment in stopCallStats...\r\n        //\r\n        // Here we prevent from emitting the event twice in case it will be\r\n        // triggered from stopCallStats.\r\n        // If the event is triggered from here it means that the logs will not\r\n        // be submitted anyway (because there is no CallStats instance), but\r\n        // we're doing that for the sake of some kind of consistency.\r\n        if (!this.callsStatsInstances.size) {\r\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\r\n        }\r\n        for (const callStats of this.callsStatsInstances.values()) {\r\n            this.stopCallStats(callStats.tpc);\r\n        }\r\n        for (const tpcId of this.rtpStatsMap.keys()) {\r\n            this._stopRemoteStats(tpcId);\r\n        }\r\n        if (this.eventEmitter) {\r\n            this.eventEmitter.removeAllListeners();\r\n        }\r\n    } finally {\r\n        Statistics.instances.delete(this);\r\n    }\r\n};\r\n\r\nStatistics.stopLocalStats = function(stream) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < Statistics.localStats.length; i++) {\r\n        if (Statistics.localStats[i].stream === stream) {\r\n            const localStats = Statistics.localStats.splice(i, 1);\r\n\r\n            localStats[0].stop();\r\n            break;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Stops remote RTP stats for given peerconnection ID.\r\n * @param {string} tpcId {@link TraceablePeerConnection.id}\r\n * @private\r\n */\r\nStatistics.prototype._stopRemoteStats = function(tpcId) {\r\n    const rtpStats = this.rtpStatsMap.get(tpcId);\r\n\r\n    if (rtpStats) {\r\n        rtpStats.stop();\r\n        this.rtpStatsMap.delete(tpcId);\r\n    }\r\n};\r\n\r\n/**\r\n * Stops collecting RTP stats for given peerconnection\r\n * @param {TraceablePeerConnection} tpc\r\n */\r\nStatistics.prototype.stopRemoteStats = function(tpc) {\r\n    this._stopRemoteStats(tpc.id);\r\n};\r\n\r\n// CALSTATS METHODS\r\n\r\n/**\r\n * Initializes the callstats.io API.\r\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\r\n * instance for which CalStats will be started.\r\n * @param {string} remoteUserID\r\n */\r\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\r\n    if (!this.callStatsIntegrationEnabled) {\r\n        return;\r\n    } else if (this.callsStatsInstances.has(tpc.id)) {\r\n        logger.error('CallStats instance for ${tpc} exists already');\r\n\r\n        return;\r\n    }\r\n\r\n    logger.info(`Starting CallStats for ${tpc}...`);\r\n\r\n    const newInstance\r\n        = new CallStats(\r\n            tpc,\r\n            {\r\n                confID: this.options.confID,\r\n                remoteUserID\r\n            });\r\n\r\n    this.callsStatsInstances.set(tpc.id, newInstance);\r\n};\r\n\r\n/**\r\n * Obtains the list of *all* {@link CallStats} instances collected from every\r\n * valid {@link Statistics} instance.\r\n * @return {Set<CallStats>}\r\n * @private\r\n */\r\nStatistics._getAllCallStatsInstances = function() {\r\n    const csInstances = new Set();\r\n\r\n    for (const statistics of Statistics.instances) {\r\n        for (const cs of statistics.callsStatsInstances.values()) {\r\n            csInstances.add(cs);\r\n        }\r\n    }\r\n\r\n    return csInstances;\r\n};\r\n\r\n/**\r\n * Removes the callstats.io instances.\r\n */\r\nStatistics.prototype.stopCallStats = function(tpc) {\r\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (callStatsInstance) {\r\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\r\n        // able to submit the last log batch from jitsi-meet to CallStats. After\r\n        // recent changes we dispose the CallStats earlier\r\n        // (before Statistics.dispose), so we need to emit this event here to\r\n        // give this last chance for final log batch submission.\r\n        //\r\n        // Eventually there should be a separate module called \"log storage\"\r\n        // which should emit proper events when it's underlying\r\n        // CallStats instance is going away.\r\n        if (this.callsStatsInstances.size === 1) {\r\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\r\n        }\r\n        this.callsStatsInstances.delete(tpc.id);\r\n\r\n        // The fabric needs to be terminated when being stopped\r\n        callStatsInstance.sendTerminateEvent();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n *\r\n * @returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n */\r\nStatistics.prototype.isCallstatsEnabled = function() {\r\n    return this.callStatsIntegrationEnabled;\r\n};\r\n\r\n/**\r\n * Logs either resume or hold event for the given peer connection.\r\n * @param {TraceablePeerConnection} tpc the connection for which event will be\r\n * reported\r\n * @param {boolean} isResume true for resume or false for hold\r\n */\r\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendResumeOrHoldEvent(isResume);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats and analytics (if present) for ice connection failed\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendIceConnectionFailedEvent();\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats for mute events\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n * @param {boolean} muted true for muted and false for not muted\r\n * @param {String} type \"audio\"/\"video\"\r\n */\r\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\r\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\r\n\r\n    CallStats.sendMuteEvent(muted, type, instance);\r\n};\r\n\r\n/**\r\n * Notifies CallStats for screen sharing events\r\n * @param start {boolean} true for starting screen sharing and\r\n * false for not stopping\r\n * @param {string|null} ssrc - optional ssrc value, used only when\r\n * starting screen sharing.\r\n */\r\nStatistics.prototype.sendScreenSharingEvent\r\n    = function(start, ssrc) {\r\n        for (const cs of this.callsStatsInstances.values()) {\r\n            cs.sendScreenSharingEvent(start, ssrc);\r\n        }\r\n    };\r\n\r\n/**\r\n * Notifies the statistics module that we are now the dominant speaker of the\r\n * conference.\r\n * @param {String} roomJid - The room jid where the speaker event occurred.\r\n */\r\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\r\n    for (const cs of this.callsStatsInstances.values()) {\r\n        cs.sendDominantSpeakerEvent();\r\n    }\r\n\r\n    // xmpp send dominant speaker event\r\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\r\n};\r\n\r\n/**\r\n * Notifies about active device.\r\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\r\n *      their data\r\n */\r\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\r\n    const globalSet = Statistics._getAllCallStatsInstances();\r\n\r\n    if (globalSet.size) {\r\n        for (const cs of globalSet) {\r\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\r\n        }\r\n    } else {\r\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\r\n    }\r\n};\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Lets the underlying statistics module know where is given SSRC rendered by\r\n * providing renderer tag ID.\r\n * @param {TraceablePeerConnection} tpc the connection to which the stream\r\n * belongs to\r\n * @param {number} ssrc the SSRC of the stream\r\n * @param {boolean} isLocal\r\n * @param {string} userId\r\n * @param {string} usageLabel  meaningful usage label of this stream like\r\n *        'microphone', 'camera' or 'screen'.\r\n * @param {string} containerId the id of media 'audio' or 'video' tag which\r\n *        renders the stream.\r\n */\r\nStatistics.prototype.associateStreamWithVideoTag = function(\r\n        tpc,\r\n        ssrc,\r\n        isLocal,\r\n        userId,\r\n        usageLabel,\r\n        containerId) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.associateStreamWithVideoTag(\r\n            ssrc,\r\n            isLocal,\r\n            userId,\r\n            usageLabel,\r\n            containerId);\r\n    }\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Notifies CallStats that getUserMedia failed.\r\n *\r\n * @param {Error} e error to send\r\n */\r\nStatistics.sendGetUserMediaFailed = function(e) {\r\n    const error\r\n        = e instanceof JitsiTrackError\r\n            ? formatJitsiTrackErrorForCallStats(e) : e;\r\n    const globalSet = Statistics._getAllCallStatsInstances();\r\n\r\n    if (globalSet.size) {\r\n        for (const cs of globalSet) {\r\n            CallStats.sendGetUserMediaFailed(error, cs);\r\n        }\r\n    } else {\r\n        CallStats.sendGetUserMediaFailed(error, null);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to create offer.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendCreateOfferFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to create answer.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\r\n */\r\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendCreateAnswerFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to set local description.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendSetLocalDescFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to set remote description.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendSetRemoteDescFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to add ICE candidate.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendAddIceCandidateFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Adds to CallStats an application log.\r\n *\r\n * @param {String} m a log message to send or an {Error} object to be reported\r\n */\r\nStatistics.sendLog = function(m) {\r\n    const globalSubSet = new Set();\r\n\r\n    // FIXME we don't want to duplicate logs over P2P instance, but\r\n    // here we should go over instances and call this method for each\r\n    // unique conference ID rather than selecting the first one.\r\n    // We don't have such use case though, so leaving as is for now.\r\n    for (const stats of Statistics.instances) {\r\n        if (stats.callStatsApplicationLogsDisabled) {\r\n            return;\r\n        }\r\n\r\n        if (stats.callsStatsInstances.size) {\r\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\r\n        }\r\n    }\r\n\r\n    if (globalSubSet.size) {\r\n        for (const csPerStats of globalSubSet) {\r\n            CallStats.sendApplicationLog(m, csPerStats);\r\n        }\r\n    } else {\r\n        CallStats.sendApplicationLog(m, null);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends the given feedback through CallStats.\r\n *\r\n * @param overall an integer between 1 and 5 indicating the user's rating.\r\n * @param comment the comment from the user.\r\n * @returns {Promise} Resolves when callstats feedback has been submitted\r\n * successfully.\r\n */\r\nStatistics.prototype.sendFeedback = function(overall, comment) {\r\n    // Statistics.analytics.sendEvent is currently fire and forget, without\r\n    // confirmation of successful send.\r\n    Statistics.analytics.sendEvent(\r\n        FEEDBACK,\r\n        {\r\n            rating: overall,\r\n            comment\r\n        });\r\n\r\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\r\n};\r\n\r\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\r\n\r\n/**\r\n * Reports global error to CallStats.\r\n *\r\n * @param {Error} error\r\n */\r\nStatistics.reportGlobalError = function(error) {\r\n    if (error instanceof JitsiTrackError && error.gum) {\r\n        Statistics.sendGetUserMediaFailed(error);\r\n    } else {\r\n        Statistics.sendLog(error);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends event to analytics and logs a message to the logger/console. Console\r\n * messages might also be logged to callstats automatically.\r\n *\r\n * @param {string | Object} event the event name, or an object which\r\n * represents the entire event.\r\n * @param {Object} properties properties to attach to the event (if an event\r\n * name as opposed to an event object is provided).\r\n */\r\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\r\n    if (!event) {\r\n        logger.warn('No event or event name given.');\r\n\r\n        return;\r\n    }\r\n\r\n    let eventToLog;\r\n\r\n    // Also support an API with a single object as an event.\r\n    if (typeof event === 'object') {\r\n        eventToLog = event;\r\n    } else {\r\n        eventToLog = {\r\n            name: event,\r\n            properties\r\n        };\r\n    }\r\n\r\n    logger.log(JSON.stringify(eventToLog));\r\n\r\n    // We do this last, because it may modify the object which is passed.\r\n    this.analytics.sendEvent(event, properties);\r\n};\r\n\r\n/**\r\n * Sends event to analytics.\r\n *\r\n * @param {string | Object} eventName the event name, or an object which\r\n * represents the entire event.\r\n * @param {Object} properties properties to attach to the event\r\n */\r\nStatistics.sendAnalytics = function(eventName, properties = {}) {\r\n    this.analytics.sendEvent(eventName, properties);\r\n};\r\n","const RTCEvents = {\r\n    /**\r\n     * Indicates error while create answer call.\r\n     */\r\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\r\n\r\n    /**\r\n     * Indicates error while create offer call.\r\n     */\r\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\r\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\r\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\r\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\r\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\r\n\r\n    /**\r\n     * Event emitted when the user granted a permission for the camera / mic.\r\n     * Used to keep track of the granted permissions on browsers which don't\r\n     * support the Permissions API.\r\n     */\r\n    GRANTED_PERMISSIONS: 'rtc.granted_permissions',\r\n\r\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\r\n\r\n    /**\r\n     * Event emitted when {@link RTC.setLastN} method is called to update with\r\n     * the new value set.\r\n     * The first argument is the value passed to {@link RTC.setLastN}.\r\n     */\r\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\r\n\r\n    /**\r\n     * Event emitted when ssrc for a local track is extracted and stored\r\n     * in {@link TraceablePeerConnection}.\r\n     * @param {JitsiLocalTrack} track which ssrc was updated\r\n     * @param {string} ssrc that was stored\r\n     */\r\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\r\n\r\n    /**\r\n     * The max enabled resolution of a local video track was changed.\r\n     */\r\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\r\n\r\n    TRACK_ATTACHED: 'rtc.track_attached',\r\n\r\n    /**\r\n     * Event fired when we remote track is added to the conference.\r\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\r\n     **/\r\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\r\n\r\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\r\n    // (currently implemented for local tracks only)\r\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\r\n\r\n    /**\r\n     * Indicates that the remote track has been removed from the conference.\r\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\r\n     */\r\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\r\n\r\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\r\n    // (currently implemented for local tracks only)\r\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\r\n\r\n    /**\r\n     * Indicates error while set local description.\r\n     */\r\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\r\n\r\n    /**\r\n     * Indicates error while set remote description.\r\n     */\r\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\r\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\r\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\r\n\r\n    /**\r\n     * Indicates that the list with available devices will change.\r\n     */\r\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\r\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\r\n\r\n    /**\r\n     * Indicates that a message from another participant is received on\r\n     * data channel.\r\n     */\r\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\r\n\r\n    /**\r\n     * Designates an event indicating that the local ICE username fragment of\r\n     * the jingle session has changed.\r\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\r\n     * is the source of the event.\r\n     * The second argument is the actual \"ufrag\" string.\r\n     */\r\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\r\n\r\n    /**\r\n     * Designates an event indicating that the local ICE username fragment of\r\n     * the jingle session has changed.\r\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\r\n     * is the source of the event.\r\n     * The second argument is the actual \"ufrag\" string.\r\n     */\r\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\r\n};\r\n\r\nmodule.exports = RTCEvents;\r\n","/**\r\n * This class exports constants and factory methods related to the analytics\r\n * API provided by AnalyticsAdapter. In order for entries in a database to be\r\n * somewhat easily traceable back to the code which produced them, events sent\r\n * through analytics should be defined here.\r\n *\r\n * Since the AnalyticsAdapter API can be used in different ways, for some events\r\n * it is more convenient to just define the event name as a constant. For other\r\n * events a factory function is easier.\r\n *\r\n * A general approach for adding a new event:\r\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\r\n * operational.\r\n * 2. Determine whether the event is related to other existing events, and\r\n * which fields are desired to be set: name, action, actionSubject, source.\r\n * 3. If the name is sufficient (the other fields are not important), use a\r\n * constant. Otherwise use a factory function.\r\n *\r\n * Note that the AnalyticsAdapter uses the events passed to its functions for\r\n * its own purposes, and might modify them. Because of this, factory functions\r\n * should create new objects.\r\n *\r\n */\r\n\r\n/**\r\n * The constant which identifies an event of type \"operational\".\r\n * @type {string}\r\n */\r\nexport const TYPE_OPERATIONAL = 'operational';\r\n\r\n/**\r\n * The constant which identifies an event of type \"page\".\r\n * @type {string}\r\n */\r\nexport const TYPE_PAGE = 'page';\r\n\r\n/**\r\n * The constant which identifies an event of type \"track\".\r\n * @type {string}\r\n */\r\nexport const TYPE_TRACK = 'track';\r\n\r\n/**\r\n * The constant which identifies an event of type \"ui\".\r\n * @type {string}\r\n */\r\nexport const TYPE_UI = 'ui';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that the Jingle session\r\n * was restarted (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_RESTART = 'restart';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-accept\r\n * timed out (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-initiate\r\n * was received.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-initiate\r\n * not arrived within a timeout (the value is specified in\r\n * the {@link JingleSessionPC}.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\r\n\r\n/**\r\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\r\n * the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a transport-replace\r\n * was received.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TR_RECEIVED\r\n    = 'transport-replace.received';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a transport-replace\r\n * succeeded (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TR_SUCCESS\r\n    = 'transport-replace.success';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\r\n * because the mandatory requirements were not met.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_DECLINED = 'decline';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that a connection was\r\n * established (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_ESTABLISHED = 'established';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that something failed.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_FAILED = 'failed';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that a switch to\r\n * jitsi-videobridge happened.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\r\n\r\n/**\r\n * The name of an event which indicates an available device. We send one such\r\n * event per available device once when the available devices are first known,\r\n * and every time that they change\r\n * @type {string}\r\n *\r\n * Properties:\r\n *      audio_input_device_count: the number of audio input devices available at\r\n *          the time the event was sent.\r\n *      audio_output_device_count: the number of audio output devices available\r\n *          at the time the event was sent.\r\n *      video_input_device_count: the number of video input devices available at\r\n *          the time the event was sent.\r\n *      video_output_device_count: the number of video output devices available\r\n *          at the time the event was sent.\r\n *      device_id: an identifier of the device described in this event.\r\n *      device_group_id:\r\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\r\n *          'videooutput'.\r\n *      device_label: a string which describes the device.\r\n */\r\nexport const AVAILABLE_DEVICE = 'available.device';\r\n\r\n/**\r\n * This appears to be fired only in certain cases when the XMPP connection\r\n * disconnects (and it was intentional?). It is currently never observed to\r\n * fire in production.\r\n *\r\n * TODO: document\r\n *\r\n * Properties:\r\n *      message: an error message\r\n */\r\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\r\n\r\n/**\r\n * Indicates that the user of the application provided feedback in terms of a\r\n * rating (an integer from 1 to 5) and an optional comment.\r\n * Properties:\r\n *      value: the user's rating (an integer from 1 to 5)\r\n *      comment: the user's comment\r\n */\r\nexport const FEEDBACK = 'feedback';\r\n\r\n/**\r\n * Indicates the duration of a particular phase of the ICE connectivity\r\n * establishment.\r\n *\r\n * Properties:\r\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\r\n *      value: the duration in milliseconds.\r\n *      p2p: whether the associated ICE connection is p2p or towards a\r\n *          jitsi-videobridge\r\n *      initiator: whether the local Jingle peer is the initiator or responder\r\n *          in the Jingle session. XXX we probably actually care about the ICE\r\n *          role (controlling vs controlled), and we assume that this correlates\r\n *          with the Jingle initiator.\r\n */\r\nexport const ICE_DURATION = 'ice.duration';\r\n\r\n/**\r\n * Indicates the difference in milliseconds between the ICE establishment time\r\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\r\n * P2P connection took 10ms more than JVB connection to establish).\r\n *\r\n * Properties:\r\n *      value: the difference in establishment durations in milliseconds.\r\n *\r\n */\r\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\r\n    = 'ice.establishment.duration.diff';\r\n\r\n/**\r\n * Indicates that the ICE state has changed.\r\n *\r\n * Properties:\r\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\r\n *          'completed', etc).\r\n *      value: the time in milliseconds (as reported by\r\n *          window.performance.now()) that the state change occurred.\r\n *      p2p: whether the associated ICE connection is p2p or towards a\r\n *          jitsi-videobridge\r\n *      signalingState: The signaling state of the associated PeerConnection\r\n *      reconnect: whether the associated Jingle session is in the process of\r\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\r\n */\r\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\r\n\r\n/**\r\n * Indicates that no bytes have been sent for the track.\r\n *\r\n * Properties:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n */\r\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\r\n\r\n/**\r\n * Indicates that a track was unmuted (?).\r\n *\r\n * Properties:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n *      trackType: the type of the track ('local' or 'remote').\r\n *      value: TODO: document\r\n */\r\nexport const TRACK_UNMUTED = 'track.unmuted';\r\n\r\n/**\r\n * Creates an operational event which indicates that we have received a\r\n * \"bridge down\" event from jicofo.\r\n */\r\nexport const createBridgeDownEvent = function() {\r\n    const bridgeDown = 'bridge.down';\r\n\r\n    return {\r\n        action: bridgeDown,\r\n        actionSubject: bridgeDown,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that the XMPP connection failed\r\n * @param errorType TODO\r\n * @param errorMessage TODO\r\n * @param detail connection failed details.\r\n */\r\nexport const createConnectionFailedEvent\r\n    = function(errorType, errorMessage, details) {\r\n        return {\r\n            type: TYPE_OPERATIONAL,\r\n            action: 'connection.failed',\r\n            attributes: {\r\n                'error_type': errorType,\r\n                'error_message': errorMessage,\r\n                ...details\r\n            }\r\n        };\r\n    };\r\n\r\n/**\r\n * Creates a conference event.\r\n *\r\n * @param {string} action - The action of the event.\r\n * @param {Object} attributes - The attributes to be added to the event.\r\n * @returns {{type: string, source: string, action: string, attributes: object}}\r\n */\r\nexport function createConferenceEvent(action, attributes) {\r\n    return {\r\n        action,\r\n        attributes,\r\n        source: 'conference',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an operational event which indicates that a particular connection\r\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\r\n * state).\r\n *\r\n * @param stage the stage which was reached\r\n * @param attributes additional attributes for the event. This should be an\r\n * object with a \"value\" property indicating a timestamp in milliseconds\r\n * relative to the beginning of the document's lifetime.\r\n *\r\n */\r\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\r\n    const action = 'connection.stage.reached';\r\n\r\n    return {\r\n        action,\r\n        actionSubject: stage,\r\n        attributes,\r\n        source: action,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an operational event for the end-to-end round trip time to a\r\n * specific remote participant.\r\n * @param participantId the ID of the remote participant.\r\n * @param region the region of the remote participant\r\n * @param rtt the rtt\r\n */\r\nexport const createE2eRttEvent = function(participantId, region, rtt) {\r\n    const attributes = {\r\n        'participant_id': participantId,\r\n        region,\r\n        rtt\r\n    };\r\n\r\n    return {\r\n        attributes,\r\n        name: 'e2e_rtt',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that the focus has left the MUC.\r\n */\r\nexport const createFocusLeftEvent = function() {\r\n    const action = 'focus.left';\r\n\r\n    return {\r\n        action,\r\n        actionSubject: action,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event related to a getUserMedia call.\r\n *\r\n * @param action the type of the result that the event represents: 'error',\r\n * 'success', 'warning', etc.\r\n * @param attributes the attributes to attach to the event.\r\n * @returns {{type: string, source: string, name: string}}\r\n */\r\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        source: 'get.user.media',\r\n        action,\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event related to remote participant connection status changes.\r\n *\r\n * @param attributes the attributes to attach to the event.\r\n * @returns {{type: string, source: string, name: string}}\r\n */\r\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\r\n    const action = 'duration';\r\n\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        source: 'peer.conn.status',\r\n        action,\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event for a Jingle-related event.\r\n * @param action the action of the event\r\n * @param attributes attributes to add to the event.\r\n */\r\nexport const createJingleEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action,\r\n        source: 'jingle',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that a local track was not able to read\r\n * data from its source (a camera or a microphone).\r\n *\r\n * @param mediaType {String} the media type of the local track ('audio' or\r\n * 'video').\r\n */\r\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\r\n    return {\r\n        attributes: {\r\n            'media_type': mediaType,\r\n            value\r\n        },\r\n        action: 'track.no.data.from.source',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event for a p2p-related event.\r\n * @param action the action of the event\r\n * @param attributes attributes to add to the event.\r\n */\r\nexport const createP2PEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action,\r\n        source: 'p2p',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Indicates that we received a remote command to mute.\r\n */\r\nexport const createRemotelyMutedEvent = function() {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'remotely.muted'\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains RTP statistics such as RTT and packet loss.\r\n *\r\n * All average RTP stats are currently reported under 1 event name, but with\r\n * different properties that allows to distinguish between a P2P call, a\r\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\r\n *\r\n * The structure of the event is:\r\n *\r\n * {\r\n *      p2p: true,\r\n *      conferenceSize: 2,\r\n *      localCandidateType: \"relay\",\r\n *      remoteCandidateType: \"relay\",\r\n *      transportType: \"udp\",\r\n *\r\n *      // Average RTT of 200ms\r\n *      \"rtt.avg\": 200,\r\n *      \"rtt.samples\": \"[100, 200, 300]\",\r\n *\r\n *      // Average packet loss of 10%\r\n *      \"packet.loss.avg\": 10,\r\n *      \"packet.loss.samples\": '[5, 10, 15]'\r\n *\r\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\r\n *      // The e2e RTT through jvb is 15ms shorter:\r\n *      \"rtt.diff\": 15,\r\n *\r\n *      // End-to-end RTT through JVB is ms.\r\n *      \"end2end.rtt.avg\" = 100\r\n * }\r\n *\r\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\r\n * and not JSON arrays, as events' attributes can not be nested. The samples are\r\n * currently included for debug purposes only and can be removed anytime soon\r\n * from the structure.\r\n *\r\n * Also note that not all of values are present in each event, as values are\r\n * obtained and calculated as part of different process/event pipe. For example\r\n * {@link ConnectionAvgStats} instances are doing the reports for each\r\n * {@link TraceablePeerConnection} and work independently from the main stats\r\n * pipe.\r\n */\r\nexport const createRtpStatsEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'rtp.stats',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains the round trip time (RTT) to a set of\r\n * regions.\r\n *\r\n * @param attributes\r\n * @returns {{type: string, action: string, attributes: *}}\r\n */\r\nexport const createRttByRegionEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'rtt.by.region',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains the local and remote ICE candidate types\r\n * for the transport that is currently selected.\r\n *\r\n * @param attributes\r\n * @returns {{type: string, action: string, attributes: *}}\r\n */\r\nexport const createTransportStatsEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'transport.stats',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\r\n * the local audio levels and the remote audio levels that triggered the event).\r\n *\r\n * @param {string} userID - The user id of the affected participant.\r\n * @param {*} localAudioLevels - The local audio levels.\r\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\r\n */\r\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'audio.output.problem',\r\n        attributes: {\r\n            userID,\r\n            localAudioLevels,\r\n            remoteAudioLevels\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an event which contains an information related to the bridge channel close event.\r\n *\r\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\r\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\r\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\r\n */\r\nexport const createBridgeChannelClosedEvent = function(code, reason) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'bridge-channel.error',\r\n        attributes: {\r\n            code,\r\n            reason\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates the Time To First Media (TTFM).\r\n * It is measured in milliseconds relative to the beginning of the document's\r\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\r\n * the following:\r\n * 1. The delay due to getUserMedia()\r\n * 2. The period between the MUC being joined and the reception of the Jingle\r\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\r\n * session until there are at least 2 participants in the room.\r\n *\r\n * @param attributes the attributes to add to the event. Currently used fields:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n *      muted: whether the track has ever been muted (?)\r\n *      value: the TTMF in milliseconds.\r\n */\r\nexport const createTtfmEvent = function(attributes) {\r\n    return createConnectionStageReachedEvent('ttfm', attributes);\r\n};\r\n","/**\r\n * The audio type.\r\n */\r\nexport const AUDIO = 'audio';\r\n\r\n/**\r\n * The presenter type.\r\n */\r\nexport const PRESENTER = 'presenter';\r\n\r\n/**\r\n * The video type.\r\n */\r\nexport const VIDEO = 'video';\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nconst logger = getLogger(__filename);\r\n\r\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport browser from '../browser';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nconst SDPUtil = {\r\n    filterSpecialChars(text) {\r\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\r\n        // \"\", etc.) \"contain\" special chars.\r\n        // eslint-disable-next-line no-useless-escape\r\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\r\n    },\r\n    iceparams(mediadesc, sessiondesc) {\r\n        let data = null;\r\n        let pwd, ufrag;\r\n\r\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\r\n                && (pwd\r\n                    = SDPUtil.findLine(\r\n                        mediadesc,\r\n                        'a=ice-pwd:',\r\n                        sessiondesc))) {\r\n            data = {\r\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\r\n                pwd: SDPUtil.parseICEPwd(pwd)\r\n            };\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseICEUfrag(line) {\r\n        return line.substring(12);\r\n    },\r\n    buildICEUfrag(frag) {\r\n        return `a=ice-ufrag:${frag}`;\r\n    },\r\n    parseICEPwd(line) {\r\n        return line.substring(10);\r\n    },\r\n    buildICEPwd(pwd) {\r\n        return `a=ice-pwd:${pwd}`;\r\n    },\r\n    parseMID(line) {\r\n        return line.substring(6);\r\n    },\r\n    parseMLine(line) {\r\n        const data = {};\r\n        const parts = line.substring(2).split(' ');\r\n\r\n        data.media = parts.shift();\r\n        data.port = parts.shift();\r\n        data.proto = parts.shift();\r\n        if (parts[parts.length - 1] === '') { // trailing whitespace\r\n            parts.pop();\r\n        }\r\n        data.fmt = parts;\r\n\r\n        return data;\r\n    },\r\n    buildMLine(mline) {\r\n        return (\r\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\r\n                mline.fmt.join(' ')}`);\r\n    },\r\n    parseRTPMap(line) {\r\n        const data = {};\r\n        let parts = line.substring(9).split(' ');\r\n\r\n        data.id = parts.shift();\r\n        parts = parts[0].split('/');\r\n        data.name = parts.shift();\r\n        data.clockrate = parts.shift();\r\n        data.channels = parts.length ? parts.shift() : '1';\r\n\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\r\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\r\n     * @returns [SCTP port number, protocol, streams]\r\n     */\r\n    parseSCTPMap(line) {\r\n        const parts = line.substring(10).split(' ');\r\n        const sctpPort = parts[0];\r\n        const protocol = parts[1];\r\n\r\n        // Stream count is optional\r\n        const streamCount = parts.length > 2 ? parts[2] : null;\r\n\r\n\r\n        return [ sctpPort, protocol, streamCount ];// SCTP port\r\n    },\r\n    buildRTPMap(el) {\r\n        let line\r\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\r\n                el.getAttribute('clockrate')}`;\r\n\r\n        if (el.getAttribute('channels')\r\n            && el.getAttribute('channels') !== '1') {\r\n            line += `/${el.getAttribute('channels')}`;\r\n        }\r\n\r\n        return line;\r\n    },\r\n    parseCrypto(line) {\r\n        const data = {};\r\n        const parts = line.substring(9).split(' ');\r\n\r\n        data.tag = parts.shift();\r\n        data['crypto-suite'] = parts.shift();\r\n        data['key-params'] = parts.shift();\r\n        if (parts.length) {\r\n            data['session-params'] = parts.join(' ');\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseFingerprint(line) { // RFC 4572\r\n        const data = {};\r\n        const parts = line.substring(14).split(' ');\r\n\r\n        data.hash = parts.shift();\r\n        data.fingerprint = parts.shift();\r\n\r\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\r\n        return data;\r\n    },\r\n    parseFmtp(line) {\r\n        const data = [];\r\n        let parts = line.split(' ');\r\n\r\n        parts.shift();\r\n        parts = parts.join(' ').split(';');\r\n        for (let i = 0; i < parts.length; i++) {\r\n            let key = parts[i].split('=')[0];\r\n\r\n            while (key.length && key[0] === ' ') {\r\n                key = key.substring(1);\r\n            }\r\n            const value = parts[i].split('=')[1];\r\n\r\n            if (key && value) {\r\n                data.push({ name: key,\r\n                    value });\r\n            } else if (key) {\r\n                // rfc 4733 (DTMF) style stuff\r\n                data.push({ name: '',\r\n                    value: key });\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseICECandidate(line) {\r\n        const candidate = {};\r\n        const elems = line.split(' ');\r\n\r\n        candidate.foundation = elems[0].substring(12);\r\n        candidate.component = elems[1];\r\n        candidate.protocol = elems[2].toLowerCase();\r\n        candidate.priority = elems[3];\r\n        candidate.ip = elems[4];\r\n        candidate.port = elems[5];\r\n\r\n        // elems[6] => \"typ\"\r\n        candidate.type = elems[7];\r\n        candidate.generation = 0; // default value, may be overwritten below\r\n        for (let i = 8; i < elems.length; i += 2) {\r\n            switch (elems[i]) {\r\n            case 'raddr':\r\n                candidate['rel-addr'] = elems[i + 1];\r\n                break;\r\n            case 'rport':\r\n                candidate['rel-port'] = elems[i + 1];\r\n                break;\r\n            case 'generation':\r\n                candidate.generation = elems[i + 1];\r\n                break;\r\n            case 'tcptype':\r\n                candidate.tcptype = elems[i + 1];\r\n                break;\r\n            default: // TODO\r\n                logger.log(\r\n                    `parseICECandidate not translating \"${\r\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\r\n            }\r\n        }\r\n        candidate.network = '1';\r\n\r\n        // not applicable to SDP -- FIXME: should be unique, not just random\r\n        // eslint-disable-next-line newline-per-chained-call\r\n        candidate.id = Math.random().toString(36).substr(2, 10);\r\n\r\n        return candidate;\r\n    },\r\n    buildICECandidate(cand) {\r\n        let line = [\r\n            `a=candidate:${cand.foundation}`,\r\n            cand.component,\r\n            cand.protocol,\r\n            cand.priority,\r\n            cand.ip,\r\n            cand.port,\r\n            'typ',\r\n            cand.type\r\n        ].join(' ');\r\n\r\n        line += ' ';\r\n        switch (cand.type) {\r\n        case 'srflx':\r\n        case 'prflx':\r\n        case 'relay':\r\n            if (cand.hasOwnAttribute('rel-addr')\r\n                    && cand.hasOwnAttribute('rel-port')) {\r\n                line += 'raddr';\r\n                line += ' ';\r\n                line += cand['rel-addr'];\r\n                line += ' ';\r\n                line += 'rport';\r\n                line += ' ';\r\n                line += cand['rel-port'];\r\n                line += ' ';\r\n            }\r\n            break;\r\n        }\r\n        if (cand.hasOwnAttribute('tcptype')) {\r\n            line += 'tcptype';\r\n            line += ' ';\r\n            line += cand.tcptype;\r\n            line += ' ';\r\n        }\r\n        line += 'generation';\r\n        line += ' ';\r\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\r\n\r\n        return line;\r\n    },\r\n    parseSSRC(desc) {\r\n        // proprietary mapping of a=ssrc lines\r\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\r\n        // on google docs and parse according to that\r\n        const data = new Map();\r\n        const lines = desc.split('\\r\\n');\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\r\n                // FIXME: Use regex to smartly find the ssrc.\r\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\r\n\r\n                if (!data.get(ssrc)) {\r\n                    data.set(ssrc, []);\r\n                }\r\n\r\n                data.get(ssrc).push(lines[i]);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseRTCPFB(line) {\r\n        const parts = line.substr(10).split(' ');\r\n        const data = {};\r\n\r\n        data.pt = parts.shift();\r\n        data.type = parts.shift();\r\n        data.params = parts;\r\n\r\n        return data;\r\n    },\r\n    parseExtmap(line) {\r\n        const parts = line.substr(9).split(' ');\r\n        const data = {};\r\n\r\n        data.value = parts.shift();\r\n        if (data.value.indexOf('/') === -1) {\r\n            data.direction = 'both';\r\n        } else {\r\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\r\n            data.value = data.value.substr(0, data.value.indexOf('/'));\r\n        }\r\n        data.uri = parts.shift();\r\n        data.params = parts;\r\n\r\n        return data;\r\n    },\r\n    findLine(haystack, needle, sessionpart) {\r\n        let lines = haystack.split('\\r\\n');\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, needle.length) === needle) {\r\n                return lines[i];\r\n            }\r\n        }\r\n        if (!sessionpart) {\r\n            return false;\r\n        }\r\n\r\n        // search session part\r\n        lines = sessionpart.split('\\r\\n');\r\n        for (let j = 0; j < lines.length; j++) {\r\n            if (lines[j].substring(0, needle.length) === needle) {\r\n                return lines[j];\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n    findLines(haystack, needle, sessionpart) {\r\n        let lines = haystack.split('\\r\\n');\r\n        const needles = [];\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, needle.length) === needle) {\r\n                needles.push(lines[i]);\r\n            }\r\n        }\r\n        if (needles.length || !sessionpart) {\r\n            return needles;\r\n        }\r\n\r\n        // search session part\r\n        lines = sessionpart.split('\\r\\n');\r\n        for (let j = 0; j < lines.length; j++) {\r\n            if (lines[j].substring(0, needle.length) === needle) {\r\n                needles.push(lines[j]);\r\n            }\r\n        }\r\n\r\n        return needles;\r\n    },\r\n    candidateToJingle(line) {\r\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\r\n        // generation 0\r\n        //      <candidate component=... foundation=... generation=... id=...\r\n        // ip=... network=... port=... priority=... protocol=... type=.../>\r\n        if (line.indexOf('candidate:') === 0) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            line = `a=${line}`;\r\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\r\n            logger.log(\r\n                'parseCandidate called with a line that is not a candidate'\r\n                    + ' line');\r\n            logger.log(line);\r\n\r\n            return null;\r\n        }\r\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\r\n            // eslint-disable-next-line no-param-reassign\r\n            line = line.substring(0, line.length - 2);\r\n        }\r\n        const candidate = {};\r\n        const elems = line.split(' ');\r\n\r\n        if (elems[6] !== 'typ') {\r\n            logger.log('did not find typ in the right place');\r\n            logger.log(line);\r\n\r\n            return null;\r\n        }\r\n        candidate.foundation = elems[0].substring(12);\r\n        candidate.component = elems[1];\r\n        candidate.protocol = elems[2].toLowerCase();\r\n        candidate.priority = elems[3];\r\n        candidate.ip = elems[4];\r\n        candidate.port = elems[5];\r\n\r\n        // elems[6] => \"typ\"\r\n        candidate.type = elems[7];\r\n\r\n        candidate.generation = '0'; // default, may be overwritten below\r\n        for (let i = 8; i < elems.length; i += 2) {\r\n            switch (elems[i]) {\r\n            case 'raddr':\r\n                candidate['rel-addr'] = elems[i + 1];\r\n                break;\r\n            case 'rport':\r\n                candidate['rel-port'] = elems[i + 1];\r\n                break;\r\n            case 'generation':\r\n                candidate.generation = elems[i + 1];\r\n                break;\r\n            case 'tcptype':\r\n                candidate.tcptype = elems[i + 1];\r\n                break;\r\n            default: // TODO\r\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\r\n            }\r\n        }\r\n        candidate.network = '1';\r\n\r\n        // not applicable to SDP -- FIXME: should be unique, not just random\r\n        // eslint-disable-next-line newline-per-chained-call\r\n        candidate.id = Math.random().toString(36).substr(2, 10);\r\n\r\n        return candidate;\r\n    },\r\n    candidateFromJingle(cand) {\r\n        let line = 'a=candidate:';\r\n\r\n        line += cand.getAttribute('foundation');\r\n        line += ' ';\r\n        line += cand.getAttribute('component');\r\n        line += ' ';\r\n\r\n        let protocol = cand.getAttribute('protocol');\r\n\r\n        // use tcp candidates for FF\r\n\r\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\r\n            protocol = 'tcp';\r\n        }\r\n\r\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\r\n        line += ' ';\r\n        line += cand.getAttribute('priority');\r\n        line += ' ';\r\n        line += cand.getAttribute('ip');\r\n        line += ' ';\r\n        line += cand.getAttribute('port');\r\n        line += ' ';\r\n        line += 'typ';\r\n        line += ` ${cand.getAttribute('type')}`;\r\n        line += ' ';\r\n        switch (cand.getAttribute('type')) {\r\n        case 'srflx':\r\n        case 'prflx':\r\n        case 'relay':\r\n            if (cand.getAttribute('rel-addr')\r\n                    && cand.getAttribute('rel-port')) {\r\n                line += 'raddr';\r\n                line += ' ';\r\n                line += cand.getAttribute('rel-addr');\r\n                line += ' ';\r\n                line += 'rport';\r\n                line += ' ';\r\n                line += cand.getAttribute('rel-port');\r\n                line += ' ';\r\n            }\r\n            break;\r\n        }\r\n        if (protocol.toLowerCase() === 'tcp') {\r\n            line += 'tcptype';\r\n            line += ' ';\r\n            line += cand.getAttribute('tcptype');\r\n            line += ' ';\r\n        }\r\n        line += 'generation';\r\n        line += ' ';\r\n        line += cand.getAttribute('generation') || '0';\r\n\r\n        return `${line}\\r\\n`;\r\n    },\r\n\r\n    /**\r\n     * Parse the 'most' primary video ssrc from the given m line\r\n     * @param {object} mLine object as parsed from transform.parse\r\n     * @return {number} the primary video ssrc from the given m line\r\n     */\r\n    parsePrimaryVideoSsrc(videoMLine) {\r\n        const numSsrcs = videoMLine.ssrcs\r\n            .map(ssrcInfo => ssrcInfo.id)\r\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\r\n            .length;\r\n        const numGroups\r\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\r\n\r\n        if (numSsrcs > 1 && numGroups === 0) {\r\n            // Ambiguous, can't figure out the primary\r\n            return;\r\n        }\r\n        let primarySsrc = null;\r\n\r\n        if (numSsrcs === 1) {\r\n            primarySsrc = videoMLine.ssrcs[0].id;\r\n        } else if (numSsrcs === 2) {\r\n            // Can figure it out if there's an FID group\r\n            const fidGroup\r\n                = videoMLine.ssrcGroups.find(\r\n                    group => group.semantics === 'FID');\r\n\r\n            if (fidGroup) {\r\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\r\n            }\r\n        } else if (numSsrcs >= 3) {\r\n            // Can figure it out if there's a sim group\r\n            const simGroup\r\n                = videoMLine.ssrcGroups.find(\r\n                    group => group.semantics === 'SIM');\r\n\r\n            if (simGroup) {\r\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\r\n            }\r\n        }\r\n\r\n        return primarySsrc;\r\n    },\r\n\r\n    /**\r\n     * Generate an ssrc\r\n     * @returns {number} an ssrc\r\n     */\r\n    generateSsrc() {\r\n        return RandomUtil.randomInt(1, 0xffffffff);\r\n    },\r\n\r\n    /**\r\n     * Get an attribute for the given ssrc with the given attributeName\r\n     *  from the given mline\r\n     * @param {object} mLine an mLine object as parsed from transform.parse\r\n     * @param {number} ssrc the ssrc for which an attribute is desired\r\n     * @param {string} attributeName the name of the desired attribute\r\n     * @returns {string} the value corresponding to the given ssrc\r\n     *  and attributeName\r\n     */\r\n    getSsrcAttribute(mLine, ssrc, attributeName) {\r\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\r\n            const ssrcLine = mLine.ssrcs[i];\r\n\r\n            if (ssrcLine.id === ssrc\r\n                && ssrcLine.attribute === attributeName) {\r\n                return ssrcLine.value;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Parses the ssrcs from the group sdp line and\r\n     *  returns them as a list of numbers\r\n     * @param {object} the ssrcGroup object as parsed from\r\n     *  sdp-transform\r\n     * @returns {list<number>} a list of the ssrcs in the group\r\n     *  parsed as numbers\r\n     */\r\n    parseGroupSsrcs(ssrcGroup) {\r\n        return ssrcGroup\r\n            .ssrcs\r\n            .split(' ')\r\n            .map(ssrcStr => parseInt(ssrcStr, 10));\r\n    },\r\n\r\n    /**\r\n     * Get the mline of the given type from the given sdp\r\n     * @param {object} sdp sdp as parsed from transform.parse\r\n     * @param {string} type the type of the desired mline (e.g. \"video\")\r\n     * @returns {object} a media object\r\n     */\r\n    getMedia(sdp, type) {\r\n        return sdp.media.find(m => m.type === type);\r\n    },\r\n\r\n    /**\r\n     * Extracts the ICE username fragment from an SDP string.\r\n     * @param {string} sdp the SDP in raw text format\r\n     */\r\n    getUfrag(sdp) {\r\n        const ufragLines\r\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\r\n\r\n        if (ufragLines.length > 0) {\r\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the given codecName as the preferred codec by moving it to the beginning\r\n     * of the payload types list (modifies the given mline in place). All instances\r\n     * of the codec are moved up.\r\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\r\n     * @param {string} codecName the name of the preferred codec\r\n     */\r\n    preferCodec(mline, codecName) {\r\n        if (!mline || !codecName) {\r\n            return;\r\n        }\r\n\r\n        const matchingPayloadTypes = mline.rtp\r\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\r\n            .map(rtp => rtp.payload);\r\n\r\n        if (matchingPayloadTypes) {\r\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\r\n            // payloads as a number, instead of a string, when there is only one payload.\r\n            const payloadTypes\r\n                = mline.payloads\r\n                .toString()\r\n                .split(' ')\r\n                .map(p => parseInt(p, 10));\r\n\r\n            for (const pt of matchingPayloadTypes.reverse()) {\r\n                const payloadIndex = payloadTypes.indexOf(pt);\r\n\r\n                payloadTypes.splice(payloadIndex, 1);\r\n                payloadTypes.unshift(pt);\r\n            }\r\n            mline.payloads = payloadTypes.join(' ');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Strips the given codec from the given mline. All related RTX payload\r\n     * types are also stripped. If the resulting mline would have no codecs,\r\n     * it's disabled.\r\n     *\r\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\r\n     * @param {string} codecName the name of the codec which will be stripped.\r\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\r\n     * stripped from the sdp when the passed codecName is H264.\r\n     */\r\n    stripCodec(mLine, codecName, highProfile = false) {\r\n        if (!mLine || !codecName) {\r\n            return;\r\n        }\r\n\r\n        const h264Pts = [];\r\n        let removePts = [];\r\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\r\n\r\n        for (const rtp of mLine.rtp) {\r\n            if (rtp.codec\r\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\r\n                if (stripH264HighCodec) {\r\n                    h264Pts.push(rtp.payload);\r\n                } else {\r\n                    removePts.push(rtp.payload);\r\n                }\r\n            }\r\n        }\r\n\r\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\r\n        if (stripH264HighCodec) {\r\n            removePts = mLine.fmtp\r\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\r\n                .map(item => item.payload);\r\n        }\r\n\r\n        if (removePts.length > 0) {\r\n            // We also need to remove the payload types that are related to RTX\r\n            // for the codecs we want to disable.\r\n            const rtxApts = removePts.map(item => `apt=${item}`);\r\n            const rtxPts = mLine.fmtp.filter(\r\n                item => rtxApts.indexOf(item.config) !== -1);\r\n\r\n            removePts.push(...rtxPts.map(item => item.payload));\r\n\r\n            // Call toString() on payloads to get around an issue within\r\n            // SDPTransform that sets payloads as a number, instead of a string,\r\n            // when there is only one payload.\r\n            const allPts = mLine.payloads\r\n                .toString()\r\n                .split(' ')\r\n                .map(Number);\r\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\r\n\r\n            if (keepPts.length === 0) {\r\n                // There are no other codecs, disable the stream.\r\n                mLine.port = 0;\r\n                mLine.direction = 'inactive';\r\n                mLine.payloads = '*';\r\n            } else {\r\n                mLine.payloads = keepPts.join(' ');\r\n            }\r\n\r\n            mLine.rtp = mLine.rtp.filter(\r\n                item => keepPts.indexOf(item.payload) !== -1);\r\n            mLine.fmtp = mLine.fmtp.filter(\r\n                item => keepPts.indexOf(item.payload) !== -1);\r\n            if (mLine.rtcpFb) {\r\n                mLine.rtcpFb = mLine.rtcpFb.filter(\r\n                    item => keepPts.indexOf(item.payload) !== -1);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default SDPUtil;\r\n","/* global\r\n          __filename,\r\n          MediaStreamTrack,\r\n          RTCIceCandidate: true,\r\n          RTCPeerConnection,\r\n          RTCSessionDescription: true\r\n*/\r\n\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport clonedeep from 'lodash.clonedeep';\r\n\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport Resolutions from '../../service/RTC/Resolutions';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport SDPUtil from '../xmpp/SDPUtil';\r\n\r\nimport screenObtainer from './ScreenObtainer';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Require adapter only for certain browsers. This is being done for\r\n// react-native, which has its own shims, and while browsers are being migrated\r\n// over to use adapter's shims.\r\nif (browser.usesAdapter()) {\r\n    require('webrtc-adapter');\r\n}\r\n\r\nconst eventEmitter = new EventEmitter();\r\n\r\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\r\n\r\n/**\r\n * Default resolution to obtain for video tracks if no resolution is specified.\r\n * This default is used for old gum flow only, as new gum flow uses\r\n * {@link DEFAULT_CONSTRAINTS}.\r\n */\r\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\r\n\r\n/**\r\n * Default devices to obtain when no specific devices are specified. This\r\n * default is used for old gum flow only.\r\n */\r\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\r\n\r\n/**\r\n * Default MediaStreamConstraints to use for calls to getUserMedia.\r\n *\r\n * @private\r\n */\r\nconst DEFAULT_CONSTRAINTS = {\r\n    video: {\r\n        height: {\r\n            ideal: 720,\r\n            max: 720,\r\n            min: 240\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * The default frame rate for Screen Sharing.\r\n */\r\nconst SS_DEFAULT_FRAME_RATE = 5;\r\n\r\n// Currently audio output device change is supported only in Chrome and\r\n// default output always has 'default' device ID\r\nlet audioOutputDeviceId = 'default'; // default device\r\n// whether user has explicitly set a device to use\r\nlet audioOutputChanged = false;\r\n\r\n// Disables all audio processing\r\nlet disableAP = false;\r\n\r\n// Disables Acoustic Echo Cancellation\r\nlet disableAEC = false;\r\n\r\n// Disables Noise Suppression\r\nlet disableNS = false;\r\n\r\n// Disables Automatic Gain Control\r\nlet disableAGC = false;\r\n\r\n// Disables Highpass Filter\r\nlet disableHPF = false;\r\n\r\nconst featureDetectionAudioEl = document.createElement('audio');\r\nconst isAudioOutputDeviceChangeAvailable\r\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\r\n\r\nlet availableDevices;\r\nlet availableDevicesPollTimer;\r\n\r\n/**\r\n * An empty function.\r\n */\r\nfunction emptyFuncton() {\r\n    // no-op\r\n}\r\n\r\n/**\r\n * Initialize wrapper function for enumerating devices.\r\n * TODO: remove this, it should no longer be needed.\r\n *\r\n * @returns {?Function}\r\n */\r\nfunction initEnumerateDevicesWithCallback() {\r\n    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\r\n        return callback => {\r\n            navigator.mediaDevices.enumerateDevices()\r\n                .then(devices => {\r\n                    updateKnownDevices(devices);\r\n                    callback(devices);\r\n                }, () => {\r\n                    updateKnownDevices([]);\r\n                    callback([]);\r\n                });\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param constraints\r\n * @param isNewStyleConstraintsSupported\r\n * @param resolution\r\n */\r\nfunction setResolutionConstraints(\r\n        constraints,\r\n        isNewStyleConstraintsSupported,\r\n        resolution) {\r\n    if (Resolutions[resolution]) {\r\n        if (isNewStyleConstraintsSupported) {\r\n            constraints.video.width = {\r\n                ideal: Resolutions[resolution].width\r\n            };\r\n            constraints.video.height = {\r\n                ideal: Resolutions[resolution].height\r\n            };\r\n        }\r\n\r\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\r\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\r\n    }\r\n\r\n    if (constraints.video.mandatory.minWidth) {\r\n        constraints.video.mandatory.maxWidth\r\n            = constraints.video.mandatory.minWidth;\r\n    }\r\n\r\n    if (constraints.video.mandatory.minHeight) {\r\n        constraints.video.mandatory.maxHeight\r\n            = constraints.video.mandatory.minHeight;\r\n    }\r\n}\r\n\r\n/**\r\n * @param {string[]} um required user media types\r\n *\r\n * @param {Object} [options={}] optional parameters\r\n * @param {string} options.resolution\r\n * @param {number} options.bandwidth\r\n * @param {number} options.fps\r\n * @param {string} options.desktopStream\r\n * @param {string} options.cameraDeviceId\r\n * @param {string} options.micDeviceId\r\n * @param {CameraFacingMode} options.facingMode\r\n * @param {bool} firefox_fake_device\r\n * @param {Object} options.frameRate - used only for dekstop sharing.\r\n * @param {Object} options.frameRate.min - Minimum fps\r\n * @param {Object} options.frameRate.max - Maximum fps\r\n * @param {bool}   options.screenShareAudio - Used by electron clients to\r\n * enable system audio screen sharing.\r\n */\r\nfunction getConstraints(um, options = {}) {\r\n    const constraints = {\r\n        audio: false,\r\n        video: false\r\n    };\r\n\r\n    // Don't mix new and old style settings for Chromium as this leads\r\n    // to TypeError in new Chromium versions. @see\r\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\r\n    // This is a temporary solution, in future we will fully split old and\r\n    // new style constraints when new versions of Chromium and Firefox will\r\n    // have stable support of new constraints format. For more information\r\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\r\n    const isNewStyleConstraintsSupported\r\n        = browser.isFirefox()\r\n            || browser.isSafari()\r\n            || browser.isReactNative();\r\n\r\n    if (um.indexOf('video') >= 0) {\r\n        // same behaviour as true\r\n        constraints.video = { mandatory: {},\r\n            optional: [] };\r\n\r\n        if (options.cameraDeviceId) {\r\n            if (isNewStyleConstraintsSupported) {\r\n                // New style of setting device id.\r\n                constraints.video.deviceId = options.cameraDeviceId;\r\n            }\r\n\r\n            // Old style.\r\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\r\n        } else {\r\n            // Prefer the front i.e. user-facing camera (to the back i.e.\r\n            // environment-facing camera, for example).\r\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\r\n            // but this probably needs to be decided when updating other\r\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\r\n            const facingMode = options.facingMode || CameraFacingMode.USER;\r\n\r\n            if (isNewStyleConstraintsSupported) {\r\n                constraints.video.facingMode = facingMode;\r\n            }\r\n            constraints.video.optional.push({\r\n                facingMode\r\n            });\r\n        }\r\n\r\n        if (options.minFps || options.maxFps || options.fps) {\r\n            // for some cameras it might be necessary to request 30fps\r\n            // so they choose 30fps mjpg over 10fps yuy2\r\n            if (options.minFps || options.fps) {\r\n                // Fall back to options.fps for backwards compatibility\r\n                options.minFps = options.minFps || options.fps;\r\n                constraints.video.mandatory.minFrameRate = options.minFps;\r\n            }\r\n            if (options.maxFps) {\r\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\r\n            }\r\n        }\r\n\r\n        setResolutionConstraints(\r\n            constraints, isNewStyleConstraintsSupported, options.resolution);\r\n    }\r\n    if (um.indexOf('audio') >= 0) {\r\n        if (browser.isReactNative()) {\r\n            // The react-native-webrtc project that we're currently using\r\n            // expects the audio constraint to be a boolean.\r\n            constraints.audio = true;\r\n        } else if (browser.isFirefox()) {\r\n            if (options.micDeviceId) {\r\n                constraints.audio = {\r\n                    mandatory: {},\r\n                    deviceId: options.micDeviceId, // new style\r\n                    optional: [ {\r\n                        sourceId: options.micDeviceId // old style\r\n                    } ] };\r\n            } else {\r\n                constraints.audio = true;\r\n            }\r\n        } else {\r\n            // same behaviour as true\r\n            constraints.audio = { mandatory: {},\r\n                optional: [] };\r\n            if (options.micDeviceId) {\r\n                if (isNewStyleConstraintsSupported) {\r\n                    // New style of setting device id.\r\n                    constraints.audio.deviceId = options.micDeviceId;\r\n                }\r\n\r\n                // Old style.\r\n                constraints.audio.optional.push({\r\n                    sourceId: options.micDeviceId\r\n                });\r\n            }\r\n\r\n            // if it is good enough for hangouts...\r\n            constraints.audio.optional.push(\r\n                { echoCancellation: !disableAEC && !disableAP },\r\n                { googEchoCancellation: !disableAEC && !disableAP },\r\n                { googAutoGainControl: !disableAGC && !disableAP },\r\n                { googNoiseSuppression: !disableNS && !disableAP },\r\n                { googHighpassFilter: !disableHPF && !disableAP },\r\n                { googNoiseSuppression2: !disableNS && !disableAP },\r\n                { googEchoCancellation2: !disableAEC && !disableAP },\r\n                { googAutoGainControl2: !disableAGC && !disableAP }\r\n            );\r\n        }\r\n    }\r\n    if (um.indexOf('screen') >= 0) {\r\n        if (browser.isChrome()) {\r\n            constraints.video = {\r\n                mandatory: getSSConstraints({\r\n                    ...options,\r\n                    source: 'screen'\r\n                }),\r\n                optional: []\r\n            };\r\n\r\n        } else if (browser.isFirefox()) {\r\n            constraints.video = {\r\n                mozMediaSource: 'window',\r\n                mediaSource: 'window',\r\n                frameRate: options.frameRate || {\r\n                    min: SS_DEFAULT_FRAME_RATE,\r\n                    max: SS_DEFAULT_FRAME_RATE\r\n                }\r\n            };\r\n\r\n        } else {\r\n            const errmsg\r\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\r\n                    + ' and Firefox';\r\n\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n            logger.error(errmsg);\r\n        }\r\n    }\r\n    if (um.indexOf('desktop') >= 0) {\r\n        constraints.video = {\r\n            mandatory: getSSConstraints({\r\n                ...options,\r\n                source: 'desktop'\r\n            }),\r\n            optional: []\r\n        };\r\n\r\n        // Audio screen sharing for electron only works for screen type devices.\r\n        // i.e. when the user shares the whole desktop.\r\n        if (browser.isElectron() && options.screenShareAudio\r\n            && (options.desktopStream.indexOf('screen') >= 0)) {\r\n\r\n            // Provide constraints as described by the electron desktop capturer\r\n            // documentation here:\r\n            // https://www.electronjs.org/docs/api/desktop-capturer\r\n            // Note. The documentation specifies that chromeMediaSourceId should not be present\r\n            // which, in the case a users has multiple monitors, leads to them being shared all\r\n            // at once. However we tested with chromeMediaSourceId present and it seems to be\r\n            // working properly and also takes care of the previously mentioned issue.\r\n            constraints.audio = { mandatory: {\r\n                chromeMediaSource: constraints.video.mandatory.chromeMediaSource\r\n            } };\r\n        }\r\n    }\r\n\r\n    if (options.bandwidth) {\r\n        if (!constraints.video) {\r\n            // same behaviour as true\r\n            constraints.video = { mandatory: {},\r\n                optional: [] };\r\n        }\r\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\r\n    }\r\n\r\n    // we turn audio for both audio and video tracks, the fake audio & video\r\n    // seems to work only when enabled in one getUserMedia call, we cannot get\r\n    // fake audio separate by fake video this later can be a problem with some\r\n    // of the tests\r\n    if (browser.isFirefox() && options.firefox_fake_device) {\r\n        // seems to be fixed now, removing this experimental fix, as having\r\n        // multiple audio tracks brake the tests\r\n        // constraints.audio = true;\r\n        constraints.fake = true;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Creates a constraints object to be passed into a call to getUserMedia.\r\n *\r\n * @param {Array} um - An array of user media types to get. The accepted\r\n * types are \"video\", \"audio\", and \"desktop.\"\r\n * @param {Object} options - Various values to be added to the constraints.\r\n * @param {string} options.cameraDeviceId - The device id for the video\r\n * capture device to get video from.\r\n * @param {Object} options.constraints - Default constraints object to use\r\n * as a base for the returned constraints.\r\n * @param {Object} options.desktopStream - The desktop source id from which\r\n * to capture a desktop sharing video.\r\n * @param {string} options.facingMode - Which direction the camera is\r\n * pointing to.\r\n * @param {string} options.micDeviceId - The device id for the audio capture\r\n * device to get audio from.\r\n * @param {Object} options.frameRate - used only for dekstop sharing.\r\n * @param {Object} options.frameRate.min - Minimum fps\r\n * @param {Object} options.frameRate.max - Maximum fps\r\n * @private\r\n * @returns {Object}\r\n */\r\nfunction newGetConstraints(um = [], options = {}) {\r\n    // Create a deep copy of the constraints to avoid any modification of\r\n    // the passed in constraints object.\r\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\r\n\r\n    if (um.indexOf('video') >= 0) {\r\n        if (!constraints.video) {\r\n            constraints.video = {};\r\n        }\r\n\r\n        // Override the constraints on Safari because of the following webkit bug.\r\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\r\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\r\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\r\n        if (browser.isSafari()) {\r\n            if (constraints.video.height && constraints.video.height.ideal) {\r\n                constraints.video.height = { ideal: clonedeep(constraints.video.height.ideal) };\r\n            } else {\r\n                logger.warn('Ideal camera height missing, camera may not start properly');\r\n            }\r\n            if (constraints.video.width && constraints.video.width.ideal) {\r\n                constraints.video.width = { ideal: clonedeep(constraints.video.width.ideal) };\r\n            } else {\r\n                logger.warn('Ideal camera width missing, camera may not start properly');\r\n            }\r\n        }\r\n        if (options.cameraDeviceId) {\r\n            constraints.video.deviceId = options.cameraDeviceId;\r\n        } else {\r\n            const facingMode = options.facingMode || CameraFacingMode.USER;\r\n\r\n            constraints.video.facingMode = facingMode;\r\n        }\r\n    } else {\r\n        constraints.video = false;\r\n    }\r\n\r\n    if (um.indexOf('audio') >= 0) {\r\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\r\n            constraints.audio = {};\r\n        }\r\n\r\n        // Use the standard audio constraints on non-chromium browsers.\r\n        if (browser.isFirefox() || browser.isSafari()) {\r\n            constraints.audio = {\r\n                deviceId: options.micDeviceId,\r\n                autoGainControl: !disableAGC && !disableAP,\r\n                echoCancellation: !disableAEC && !disableAP,\r\n                noiseSuppression: !disableNS && !disableAP\r\n            };\r\n        } else {\r\n            // NOTE(brian): the new-style ('advanced' instead of 'optional')\r\n            // doesn't seem to carry through the googXXX constraints\r\n            // Changing back to 'optional' here (even with video using\r\n            // the 'advanced' style) allows them to be passed through\r\n            // but also requires the device id to capture to be set in optional\r\n            // as sourceId otherwise the constraints are considered malformed.\r\n            if (!constraints.audio.optional) {\r\n                constraints.audio.optional = [];\r\n            }\r\n            constraints.audio.optional.push(\r\n                { sourceId: options.micDeviceId },\r\n                { echoCancellation: !disableAEC && !disableAP },\r\n                { googEchoCancellation: !disableAEC && !disableAP },\r\n                { googAutoGainControl: !disableAGC && !disableAP },\r\n                { googNoiseSuppression: !disableNS && !disableAP },\r\n                { googHighpassFilter: !disableHPF && !disableAP },\r\n                { googNoiseSuppression2: !disableNS && !disableAP },\r\n                { googEchoCancellation2: !disableAEC && !disableAP },\r\n                { googAutoGainControl2: !disableAGC && !disableAP }\r\n            );\r\n        }\r\n    } else {\r\n        constraints.audio = false;\r\n    }\r\n\r\n    if (um.indexOf('desktop') >= 0) {\r\n        if (!constraints.video || typeof constraints.video === 'boolean') {\r\n            constraints.video = {};\r\n        }\r\n\r\n        constraints.video = {\r\n            mandatory: getSSConstraints({\r\n                ...options,\r\n                source: 'desktop'\r\n            })\r\n        };\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Generates GUM constraints for screen sharing.\r\n *\r\n * @param {Object} options - The options passed to\r\n * <tt>obtainAudioAndVideoPermissions</tt>.\r\n * @returns {Object} - GUM constraints.\r\n *\r\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\r\n * should make it work for all use cases.\r\n */\r\nfunction getSSConstraints(options = {}) {\r\n    const {\r\n        desktopStream,\r\n        frameRate = {\r\n            min: SS_DEFAULT_FRAME_RATE,\r\n            max: SS_DEFAULT_FRAME_RATE\r\n        }\r\n    } = options;\r\n    const { max, min } = frameRate;\r\n\r\n    const constraints = {\r\n        chromeMediaSource: options.source,\r\n        maxWidth: window.screen.width,\r\n        maxHeight: window.screen.height\r\n    };\r\n\r\n    if (typeof min === 'number') {\r\n        constraints.minFrameRate = min;\r\n    }\r\n\r\n    if (typeof max === 'number') {\r\n        constraints.maxFrameRate = max;\r\n    }\r\n\r\n    if (typeof desktopStream !== 'undefined') {\r\n        constraints.chromeMediaSourceId = desktopStream;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Generates constraints for screen sharing when using getDisplayMedia.\r\n * The constraints(MediaTrackConstraints) are applied to the resulting track.\r\n *\r\n * @returns {Object} - MediaTrackConstraints constraints.\r\n */\r\nfunction getTrackSSConstraints(options = {}) {\r\n    // we used to set height and width in the constraints, but this can lead\r\n    // to inconsistencies if the browser is on a lower resolution screen\r\n    // and we share a screen with bigger resolution, so they are now not set\r\n    const constraints = {\r\n        frameRate: SS_DEFAULT_FRAME_RATE\r\n    };\r\n    const { desktopSharingFrameRate } = options;\r\n\r\n    if (desktopSharingFrameRate && desktopSharingFrameRate.max) {\r\n        constraints.frameRate = desktopSharingFrameRate.max;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Updates the granted permissions based on the options we requested and the\r\n * streams we received.\r\n * @param um the options we requested to getUserMedia.\r\n * @param stream the stream we received from calling getUserMedia.\r\n */\r\nfunction updateGrantedPermissions(um, stream) {\r\n    const audioTracksReceived\r\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\r\n    const videoTracksReceived\r\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\r\n    const grantedPermissions = {};\r\n\r\n    if (um.indexOf('video') !== -1) {\r\n        grantedPermissions.video = videoTracksReceived;\r\n    }\r\n    if (um.indexOf('audio') !== -1) {\r\n        grantedPermissions.audio = audioTracksReceived;\r\n    }\r\n\r\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\r\n}\r\n\r\n/**\r\n * Checks if new list of available media devices differs from previous one.\r\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\r\n * @returns {boolean} - true if list is different, false otherwise.\r\n */\r\nfunction compareAvailableMediaDevices(newDevices) {\r\n    if (newDevices.length !== availableDevices.length) {\r\n        return true;\r\n    }\r\n\r\n    /* eslint-disable newline-per-chained-call */\r\n\r\n    return (\r\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\r\n            !== availableDevices\r\n                .map(mediaDeviceInfoToJSON).sort().join(''));\r\n\r\n    /* eslint-enable newline-per-chained-call */\r\n\r\n    /**\r\n     *\r\n     * @param info\r\n     */\r\n    function mediaDeviceInfoToJSON(info) {\r\n        return JSON.stringify({\r\n            kind: info.kind,\r\n            deviceId: info.deviceId,\r\n            groupId: info.groupId,\r\n            label: info.label,\r\n            facing: info.facing\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Sends analytics event with the passed device list.\r\n *\r\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\r\n * available devices.\r\n * @returns {void}\r\n */\r\nfunction sendDeviceListToAnalytics(deviceList) {\r\n    const audioInputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'audioinput').length;\r\n    const audioOutputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\r\n    const videoInputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'videoinput').length;\r\n    const videoOutputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'videooutput').length;\r\n\r\n    deviceList.forEach(device => {\r\n        const attributes = {\r\n            'audio_input_device_count': audioInputDeviceCount,\r\n            'audio_output_device_count': audioOutputDeviceCount,\r\n            'video_input_device_count': videoInputDeviceCount,\r\n            'video_output_device_count': videoOutputDeviceCount,\r\n            'device_id': device.deviceId,\r\n            'device_group_id': device.groupId,\r\n            'device_kind': device.kind,\r\n            'device_label': device.label\r\n        };\r\n\r\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Update known devices.\r\n *\r\n * @param {Array<Object>} pds - The new devices.\r\n * @returns {void}\r\n *\r\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\r\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\r\n * a row, which can cause async post devicechange processing to collide.\r\n */\r\nfunction updateKnownDevices(pds) {\r\n    if (compareAvailableMediaDevices(pds)) {\r\n        onMediaDevicesListChanged(pds);\r\n    }\r\n}\r\n\r\n/**\r\n * Event handler for the 'devicechange' event.\r\n *\r\n * @param {MediaDeviceInfo[]} devices - list of media devices.\r\n * @emits RTCEvents.DEVICE_LIST_CHANGED\r\n */\r\nfunction onMediaDevicesListChanged(devicesReceived) {\r\n    availableDevices = devicesReceived.slice(0);\r\n    logger.info('list of media devices has changed:', availableDevices);\r\n\r\n    sendDeviceListToAnalytics(availableDevices);\r\n\r\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\r\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, devicesReceived);\r\n\r\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, devicesReceived);\r\n}\r\n\r\n/**\r\n * Handles the newly created Media Streams.\r\n * @param streams the new Media Streams\r\n * @param resolution the resolution of the video streams\r\n * @returns {*[]} object that describes the new streams\r\n */\r\nfunction handleLocalStream(streams, resolution) {\r\n    let audioStream, desktopStream, videoStream;\r\n    const res = [];\r\n\r\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\r\n    // the browser, its capabilities, etc. and has taken the decision whether to\r\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\r\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\r\n    // the specified streams and figure out what we've received based on\r\n    // obtainAudioAndVideoPermissions' decision.\r\n    if (streams) {\r\n        // As mentioned above, certian types of browser (e.g. Chrome) support\r\n        // (with a result which meets our requirements expressed bellow) calling\r\n        // getUserMedia once for both audio and video.\r\n        const audioVideo = streams.audioVideo;\r\n\r\n        if (audioVideo) {\r\n            const audioTracks = audioVideo.getAudioTracks();\r\n\r\n            if (audioTracks.length) {\r\n                audioStream = new MediaStream();\r\n                for (let i = 0; i < audioTracks.length; i++) {\r\n                    audioStream.addTrack(audioTracks[i]);\r\n                }\r\n            }\r\n\r\n            const videoTracks = audioVideo.getVideoTracks();\r\n\r\n            if (videoTracks.length) {\r\n                videoStream = new MediaStream();\r\n                for (let j = 0; j < videoTracks.length; j++) {\r\n                    videoStream.addTrack(videoTracks[j]);\r\n                }\r\n            }\r\n\r\n            audioVideo.release && audioVideo.release(false);\r\n        } else {\r\n            // On other types of browser (e.g. Firefox) we choose (namely,\r\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\r\n            // (type).\r\n            audioStream = streams.audio;\r\n            videoStream = streams.video;\r\n        }\r\n\r\n        desktopStream = streams.desktop;\r\n    }\r\n\r\n    if (desktopStream) {\r\n        const { stream, sourceId, sourceType } = desktopStream;\r\n\r\n        res.push({\r\n            stream,\r\n            sourceId,\r\n            sourceType,\r\n            track: stream.getVideoTracks()[0],\r\n            mediaType: MediaType.VIDEO,\r\n            videoType: VideoType.DESKTOP\r\n        });\r\n    }\r\n    if (audioStream) {\r\n        res.push({\r\n            stream: audioStream,\r\n            track: audioStream.getAudioTracks()[0],\r\n            mediaType: MediaType.AUDIO,\r\n            videoType: null\r\n        });\r\n    }\r\n    if (videoStream) {\r\n        res.push({\r\n            stream: videoStream,\r\n            track: videoStream.getVideoTracks()[0],\r\n            mediaType: MediaType.VIDEO,\r\n            videoType: VideoType.CAMERA,\r\n            resolution\r\n        });\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\r\n * source of a video element that tries to be browser-agnostic through feature\r\n * checking. Note though that it was not completely clear from the predating\r\n * browser-specific implementations what &quot;videoSrc&quot; was because one\r\n * implementation of {@link RTCUtils#getVideoSrc} would return\r\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\r\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\r\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\r\n * appear to be used anywhere. Generally, the implementation will try to follow\r\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\r\n * properties of the specified <tt>element</tt> taking into account vender\r\n * prefixes.\r\n *\r\n * @param element the element whose video source/src is to be set to the\r\n * specified <tt>stream</tt>\r\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\r\n * source/src of <tt>element</tt>\r\n */\r\nfunction defaultSetVideoSrc(element, stream) {\r\n    // srcObject\r\n    let srcObjectPropertyName = 'srcObject';\r\n\r\n    if (!(srcObjectPropertyName in element)) {\r\n        srcObjectPropertyName = 'mozSrcObject';\r\n        if (!(srcObjectPropertyName in element)) {\r\n            srcObjectPropertyName = null;\r\n        }\r\n    }\r\n    if (srcObjectPropertyName) {\r\n        element[srcObjectPropertyName] = stream;\r\n\r\n        return;\r\n    }\r\n\r\n    // src\r\n    let src;\r\n\r\n    if (stream) {\r\n        src = stream.jitsiObjectURL;\r\n\r\n        // Save the created URL for stream so we can reuse it and not keep\r\n        // creating URLs.\r\n        if (!src) {\r\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\r\n        }\r\n    }\r\n    element.src = src || '';\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass RTCUtils extends Listenable {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super(eventEmitter);\r\n    }\r\n\r\n    /**\r\n     * Depending on the browser, sets difference instance methods for\r\n     * interacting with user media and adds methods to native WebRTC-related\r\n     * objects. Also creates an instance variable for peer connection\r\n     * constraints.\r\n     *\r\n     * @param {Object} options\r\n     * @returns {void}\r\n     */\r\n    init(options = {}) {\r\n        if (typeof options.disableAEC === 'boolean') {\r\n            disableAEC = options.disableAEC;\r\n            logger.info(`Disable AEC: ${disableAEC}`);\r\n        }\r\n        if (typeof options.disableNS === 'boolean') {\r\n            disableNS = options.disableNS;\r\n            logger.info(`Disable NS: ${disableNS}`);\r\n        }\r\n        if (typeof options.disableAP === 'boolean') {\r\n            disableAP = options.disableAP;\r\n            logger.info(`Disable AP: ${disableAP}`);\r\n        }\r\n        if (typeof options.disableAGC === 'boolean') {\r\n            disableAGC = options.disableAGC;\r\n            logger.info(`Disable AGC: ${disableAGC}`);\r\n        }\r\n        if (typeof options.disableHPF === 'boolean') {\r\n            disableHPF = options.disableHPF;\r\n            logger.info(`Disable HPF: ${disableHPF}`);\r\n        }\r\n\r\n        availableDevices = [];\r\n        window.clearInterval(availableDevicesPollTimer);\r\n        availableDevicesPollTimer = undefined;\r\n\r\n        this.enumerateDevices = initEnumerateDevicesWithCallback();\r\n\r\n        if (browser.usesNewGumFlow()) {\r\n            this.RTCPeerConnectionType = RTCPeerConnection;\r\n\r\n            this.attachMediaStream\r\n                = wrapAttachMediaStream((element, stream) => {\r\n                    if (element) {\r\n                        element.srcObject = stream;\r\n                    }\r\n                });\r\n\r\n            this.getStreamID = ({ id }) => id;\r\n            this.getTrackID = ({ id }) => id;\r\n        } else if (browser.isChromiumBased() // this is chrome < 61\r\n                || browser.isReactNative()) {\r\n\r\n            this.RTCPeerConnectionType = RTCPeerConnection;\r\n\r\n            this.attachMediaStream\r\n                = wrapAttachMediaStream((element, stream) => {\r\n                    defaultSetVideoSrc(element, stream);\r\n\r\n                    return element;\r\n                });\r\n\r\n            this.getStreamID = function({ id }) {\r\n                // A. MediaStreams from FF endpoints have the characters '{' and\r\n                // '}' that make jQuery choke.\r\n                // B. The react-native-webrtc implementation that we use at the\r\n                // time of this writing returns a number for the id of\r\n                // MediaStream. Let's just say that a number contains no special\r\n                // characters.\r\n                return (\r\n                    typeof id === 'number'\r\n                        ? id\r\n                        : SDPUtil.filterSpecialChars(id));\r\n            };\r\n            this.getTrackID = ({ id }) => id;\r\n\r\n            if (!MediaStream.prototype.getVideoTracks) {\r\n                MediaStream.prototype.getVideoTracks = function() {\r\n                    return this.videoTracks;\r\n                };\r\n            }\r\n            if (!MediaStream.prototype.getAudioTracks) {\r\n                MediaStream.prototype.getAudioTracks = function() {\r\n                    return this.audioTracks;\r\n                };\r\n            }\r\n        } else {\r\n            const message = 'Endpoint does not appear to be WebRTC-capable';\r\n\r\n            logger.error(message);\r\n            throw new Error(message);\r\n        }\r\n\r\n        this._initPCConstraints();\r\n\r\n        screenObtainer.init(\r\n            options,\r\n            this.getUserMediaWithConstraints.bind(this));\r\n\r\n        if (this.isDeviceListAvailable()) {\r\n            this.enumerateDevices(ds => {\r\n                availableDevices = ds.splice(0);\r\n\r\n                logger.debug('Available devices: ', availableDevices);\r\n                sendDeviceListToAnalytics(availableDevices);\r\n\r\n                eventEmitter.emit(\r\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\r\n                    availableDevices);\r\n\r\n                if (browser.supportsDeviceChangeEvent()) {\r\n                    navigator.mediaDevices.addEventListener(\r\n                        'devicechange',\r\n                        () => this.enumerateDevices(emptyFuncton));\r\n                } else {\r\n                    // Periodically poll enumerateDevices() method to check if\r\n                    // list of media devices has changed.\r\n                    availableDevicesPollTimer = window.setInterval(\r\n                        () => this.enumerateDevices(emptyFuncton),\r\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates instance objects for peer connection constraints both for p2p\r\n     * and outside of p2p.\r\n     */\r\n    _initPCConstraints() {\r\n        if (browser.isFirefox()) {\r\n            this.pcConstraints = {};\r\n        } else if (browser.isChromiumBased() || browser.isReactNative()) {\r\n            this.pcConstraints = { optional: [\r\n                { googHighStartBitrate: 0 },\r\n                { googPayloadPadding: true },\r\n                { googScreencastMinBitrate: 100 },\r\n                { googCpuOveruseDetection: true },\r\n                { googCpuOveruseEncodeUsage: true },\r\n                { googCpuUnderuseThreshold: 55 },\r\n                { googCpuOveruseThreshold: 85 }\r\n            ] };\r\n\r\n            this.p2pPcConstraints\r\n                = JSON.parse(JSON.stringify(this.pcConstraints));\r\n        }\r\n\r\n        this.p2pPcConstraints = this.p2pPcConstraints || this.pcConstraints;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n    * @param {string[]} um required user media types\r\n    * @param {Object} [options] optional parameters\r\n    * @param {string} options.resolution\r\n    * @param {number} options.bandwidth\r\n    * @param {number} options.fps\r\n    * @param {string} options.desktopStream\r\n    * @param {string} options.cameraDeviceId\r\n    * @param {string} options.micDeviceId\r\n    * @param {Object} options.frameRate - used only for dekstop sharing.\r\n    * @param {Object} options.frameRate.min - Minimum fps\r\n    * @param {Object} options.frameRate.max - Maximum fps\r\n    * @param {bool}   options.screenShareAudio - Used by electron clients to\r\n    * enable system audio screen sharing.\r\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\r\n    * on failure.\r\n    **/\r\n    getUserMediaWithConstraints(um, options = {}) {\r\n        const constraints = getConstraints(um, options);\r\n\r\n        logger.info('Get media constraints', JSON.stringify(constraints));\r\n\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n            .then(stream => {\r\n                logger.log('onUserMediaSuccess');\r\n                updateGrantedPermissions(um, stream);\r\n                resolve(stream);\r\n            })\r\n            .catch(error => {\r\n                logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\r\n                updateGrantedPermissions(um, undefined);\r\n                reject(new JitsiTrackError(error, constraints, um));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Acquires a media stream via getUserMedia that\r\n     * matches the given constraints\r\n     *\r\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\r\n     * @param {Object} constraints - Stream specifications to use.\r\n     * @returns {Promise}\r\n     */\r\n    _newGetUserMediaWithConstraints(umDevices, constraints = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n                .then(stream => {\r\n                    logger.log('onUserMediaSuccess');\r\n                    updateGrantedPermissions(umDevices, stream);\r\n                    resolve(stream);\r\n                })\r\n                .catch(error => {\r\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\r\n                    updateGrantedPermissions(umDevices, undefined);\r\n                    reject(new JitsiTrackError(error, constraints, umDevices));\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Acquire a display stream via the screenObtainer. This requires extra\r\n     * logic compared to use screenObtainer versus normal device capture logic\r\n     * in RTCUtils#_newGetUserMediaWithConstraints.\r\n     *\r\n     * @param {Object} options\r\n     * @param {string[]} options.desktopSharingSources\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @returns {Promise} A promise which will be resolved with an object which\r\n     * contains the acquired display stream. If desktop sharing is not supported\r\n     * then a rejected promise will be returned.\r\n     */\r\n    _newGetDesktopMedia(options) {\r\n        if (!screenObtainer.isSupported() || !browser.supportsVideo()) {\r\n            return Promise.reject(\r\n                new Error('Desktop sharing is not supported!'));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            screenObtainer.obtainStream(\r\n                this._parseDesktopSharingOptions(options),\r\n                stream => {\r\n                    resolve(stream);\r\n                },\r\n                error => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Creates the local MediaStreams.\r\n     * @param {Object} [options] optional parameters\r\n     * @param {Array} options.devices the devices that will be requested\r\n     * @param {string} options.resolution resolution constraints\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @returns {*} Promise object that will receive the new JitsiTracks\r\n     */\r\n    obtainAudioAndVideoPermissions(options = {}) {\r\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\r\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\r\n\r\n        const requestingDesktop = options.devices.includes('desktop');\r\n\r\n        if (requestingDesktop && !screenObtainer.isSupported()) {\r\n            return Promise.reject(\r\n                new Error('Desktop sharing is not supported!'));\r\n        }\r\n\r\n        return this._getAudioAndVideoStreams(options).then(streams =>\r\n            handleLocalStream(streams, options.resolution));\r\n    }\r\n\r\n    /**\r\n     * Performs one call to getUserMedia for audio and/or video and another call\r\n     * for desktop.\r\n     *\r\n     * @param {Object} options - An object describing how the gUM request should\r\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\r\n     * @returns {*} Promise object that will receive the new JitsiTracks on\r\n     * success or a JitsiTrackError on failure.\r\n     */\r\n    _getAudioAndVideoStreams(options) {\r\n        const requestingDesktop = options.devices.includes('desktop');\r\n\r\n        options.devices = options.devices.filter(device =>\r\n            device !== 'desktop');\r\n\r\n        const gumPromise = options.devices.length\r\n            ? this.getUserMediaWithConstraints(options.devices, options)\r\n            : Promise.resolve(null);\r\n\r\n        return gumPromise\r\n            .then(avStream => {\r\n                // If any requested devices are missing, call gum again in\r\n                // an attempt to obtain the actual error. For example, the\r\n                // requested video device is missing or permission was\r\n                // denied.\r\n                const missingTracks\r\n                    = this._getMissingTracks(options.devices, avStream);\r\n\r\n                if (missingTracks.length) {\r\n                    this.stopMediaStream(avStream);\r\n\r\n                    return this.getUserMediaWithConstraints(\r\n                        missingTracks, options)\r\n\r\n                        // GUM has already failed earlier and this success\r\n                        // handling should not be reached.\r\n                        .then(() => Promise.reject(new JitsiTrackError(\r\n                            { name: 'UnknownError' },\r\n                            getConstraints(options.devices, options),\r\n                            missingTracks)));\r\n                }\r\n\r\n                return avStream;\r\n            })\r\n            .then(audioVideo => {\r\n                if (!requestingDesktop) {\r\n                    return { audioVideo };\r\n                }\r\n\r\n                if (options.desktopSharingSourceDevice) {\r\n                    this.stopMediaStream(audioVideo);\r\n\r\n                    throw new Error('Using a camera as screenshare source is'\r\n                        + 'not supported on this browser.');\r\n                }\r\n\r\n                return new Promise((resolve, reject) => {\r\n                    screenObtainer.obtainStream(\r\n                        this._parseDesktopSharingOptions(options),\r\n                        desktop => resolve({\r\n                            audioVideo,\r\n                            desktop\r\n                        }),\r\n                        error => {\r\n                            if (audioVideo) {\r\n                                this.stopMediaStream(audioVideo);\r\n                            }\r\n                            reject(error);\r\n                        });\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Private utility for determining if the passed in MediaStream contains\r\n     * tracks of the type(s) specified in the requested devices.\r\n     *\r\n     * @param {string[]} requestedDevices - The track types that are expected to\r\n     * be includes in the stream.\r\n     * @param {MediaStream} stream - The MediaStream to check if it has the\r\n     * expected track types.\r\n     * @returns {string[]} An array of string with the missing track types. The\r\n     * array will be empty if all requestedDevices are found in the stream.\r\n     */\r\n    _getMissingTracks(requestedDevices = [], stream) {\r\n        const missingDevices = [];\r\n\r\n        const audioDeviceRequested = requestedDevices.includes('audio');\r\n        const audioTracksReceived\r\n            = stream && stream.getAudioTracks().length > 0;\r\n\r\n        if (audioDeviceRequested && !audioTracksReceived) {\r\n            missingDevices.push('audio');\r\n        }\r\n\r\n        const videoDeviceRequested = requestedDevices.includes('video');\r\n        const videoTracksReceived\r\n            = stream && stream.getVideoTracks().length > 0;\r\n\r\n        if (videoDeviceRequested && !videoTracksReceived) {\r\n            missingDevices.push('video');\r\n        }\r\n\r\n        return missingDevices;\r\n    }\r\n\r\n    /**\r\n     * Returns an object formatted for specifying desktop sharing parameters.\r\n     *\r\n     * @param {Object} options - Takes in the same options object as\r\n     * {@link obtainAudioAndVideoPermissions}.\r\n     * @returns {Object}\r\n     */\r\n    _parseDesktopSharingOptions(options) {\r\n        return {\r\n            desktopSharingSources: options.desktopSharingSources,\r\n            gumOptions: {\r\n                frameRate: options.desktopSharingFrameRate\r\n            },\r\n            trackOptions: getTrackSSConstraints(options)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets streams from specified device types. This function intentionally\r\n     * ignores errors for upstream to catch and handle instead.\r\n     *\r\n     * @param {Object} options - A hash describing what devices to get and\r\n     * relevant constraints.\r\n     * @param {string[]} options.devices - The types of media to capture. Valid\r\n     * values are \"desktop\", \"audio\", and \"video\".\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @param {String} options.desktopSharingSourceDevice - The device id or\r\n     * label for a video input source that should be used for screensharing.\r\n     * @returns {Promise} The promise, when successful, will return an array of\r\n     * meta data for the requested device type, which includes the stream and\r\n     * track. If an error occurs, it will be deferred to the caller for\r\n     * handling.\r\n     */\r\n    newObtainAudioAndVideoPermissions(options) {\r\n        logger.info('Using the new gUM flow');\r\n\r\n        const mediaStreamsMetaData = [];\r\n\r\n        // Declare private functions to be used in the promise chain below.\r\n        // These functions are declared in the scope of this function because\r\n        // they are not being used anywhere else, so only this function needs to\r\n        // know about them.\r\n\r\n        /**\r\n         * Executes a request for desktop media if specified in options.\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        const maybeRequestDesktopDevice = function() {\r\n            const umDevices = options.devices || [];\r\n            const isDesktopDeviceRequested\r\n                = umDevices.indexOf('desktop') !== -1;\r\n\r\n            if (!isDesktopDeviceRequested) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const {\r\n                desktopSharingSourceDevice,\r\n                desktopSharingSources,\r\n                desktopSharingFrameRate\r\n            } = options;\r\n\r\n            // Attempt to use a video input device as a screenshare source if\r\n            // the option is defined.\r\n            if (desktopSharingSourceDevice) {\r\n                const matchingDevice\r\n                    = availableDevices && availableDevices.find(device =>\r\n                        device.kind === 'videoinput'\r\n                            && (device.deviceId === desktopSharingSourceDevice\r\n                            || device.label === desktopSharingSourceDevice));\r\n\r\n                if (!matchingDevice) {\r\n                    return Promise.reject(new JitsiTrackError(\r\n                        { name: 'ConstraintNotSatisfiedError' },\r\n                        {},\r\n                        [ desktopSharingSourceDevice ]\r\n                    ));\r\n                }\r\n\r\n                const requestedDevices = [ 'video' ];\r\n\r\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\r\n                // get constraints for the desktop stream.\r\n                const { gumOptions, trackOptions }\r\n                    = this._parseDesktopSharingOptions(options);\r\n\r\n                const constraints = {\r\n                    video: {\r\n                        ...gumOptions,\r\n                        deviceId: matchingDevice.deviceId\r\n                    }\r\n                };\r\n\r\n                return this._newGetUserMediaWithConstraints(\r\n                    requestedDevices, constraints)\r\n                    .then(stream => {\r\n                        const track = stream && stream.getTracks()[0];\r\n                        const applyConstrainsPromise\r\n                            = track && track.applyConstraints\r\n                                ? track.applyConstraints(trackOptions)\r\n                                : Promise.resolve();\r\n\r\n                        return applyConstrainsPromise\r\n                            .then(() => {\r\n                                return {\r\n                                    sourceType: 'device',\r\n                                    stream\r\n                                };\r\n                            });\r\n                    });\r\n            }\r\n\r\n            return this._newGetDesktopMedia({\r\n                desktopSharingSources,\r\n                desktopSharingFrameRate\r\n            });\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Creates a meta data object about the passed in desktopStream and\r\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\r\n         * returned later.\r\n         *\r\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\r\n         * capture.\r\n         * @returns {void}\r\n         */\r\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\r\n            if (!desktopStream) {\r\n                return;\r\n            }\r\n\r\n            const { stream, sourceId, sourceType } = desktopStream;\r\n\r\n            const desktopAudioTracks = stream.getAudioTracks();\r\n\r\n            if (desktopAudioTracks.length) {\r\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: desktopAudioStream,\r\n                    sourceId,\r\n                    sourceType,\r\n                    track: desktopAudioStream.getAudioTracks()[0]\r\n                });\r\n            }\r\n\r\n            const desktopVideoTracks = stream.getVideoTracks();\r\n\r\n            if (desktopVideoTracks.length) {\r\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: desktopVideoStream,\r\n                    sourceId,\r\n                    sourceType,\r\n                    track: desktopVideoStream.getVideoTracks()[0],\r\n                    videoType: VideoType.DESKTOP\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Executes a request for audio and/or video, as specified in options.\r\n         * By default both audio and video will be captured if options.devices\r\n         * is not defined.\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        const maybeRequestCaptureDevices = function() {\r\n            const umDevices = options.devices || [ 'audio', 'video' ];\r\n            const requestedCaptureDevices = umDevices.filter(device =>\r\n                device === 'audio'\r\n                || (device === 'video' && browser.supportsVideo()));\r\n\r\n            if (!requestedCaptureDevices.length) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const constraints = newGetConstraints(\r\n                requestedCaptureDevices, options);\r\n\r\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\r\n\r\n            return this._newGetUserMediaWithConstraints(\r\n                requestedCaptureDevices, constraints);\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Splits the passed in media stream into separate audio and video\r\n         * streams and creates meta data objects for each and pushes them to the\r\n         * internal array mediaStreamsMetaData to be returned later.\r\n         *\r\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\r\n         * video track.\r\n         * @returns {void}\r\n         */\r\n        const maybeCreateAndAddAVTracks = function(avStream) {\r\n            if (!avStream) {\r\n                return;\r\n            }\r\n\r\n            const audioTracks = avStream.getAudioTracks();\r\n\r\n            if (audioTracks.length) {\r\n                const audioStream = new MediaStream(audioTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: audioStream,\r\n                    track: audioStream.getAudioTracks()[0],\r\n                    effects: options.effects\r\n                });\r\n            }\r\n\r\n            const videoTracks = avStream.getVideoTracks();\r\n\r\n            if (videoTracks.length) {\r\n                const videoStream = new MediaStream(videoTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: videoStream,\r\n                    track: videoStream.getVideoTracks()[0],\r\n                    videoType: VideoType.CAMERA,\r\n                    effects: options.effects\r\n                });\r\n            }\r\n        };\r\n\r\n        return maybeRequestDesktopDevice()\r\n            .then(maybeCreateAndAddDesktopTrack)\r\n            .then(maybeRequestCaptureDevices)\r\n            .then(maybeCreateAndAddAVTracks)\r\n            .then(() => mediaStreamsMetaData)\r\n            .catch(error => {\r\n                mediaStreamsMetaData.forEach(({ stream }) => {\r\n                    this.stopMediaStream(stream);\r\n                });\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Checks whether it is possible to enumerate available cameras/microphones.\r\n     *\r\n     * @returns {boolean} {@code true} if the device listing is available;\r\n     * {@code false}, otherwise.\r\n     */\r\n    isDeviceListAvailable() {\r\n        return Boolean(\r\n            navigator.mediaDevices\r\n                && navigator.mediaDevices.enumerateDevices);\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @params {string} [deviceType] - type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        return deviceType === 'output' || deviceType === 'audiooutput'\r\n            ? isAudioOutputDeviceChangeAvailable\r\n            : true;\r\n    }\r\n\r\n    /**\r\n     * A method to handle stopping of the stream.\r\n     * One point to handle the differences in various implementations.\r\n     * @param mediaStream MediaStream object to stop.\r\n     */\r\n    stopMediaStream(mediaStream) {\r\n        if (!mediaStream) {\r\n            return;\r\n        }\r\n\r\n        mediaStream.getTracks().forEach(track => {\r\n            if (track.stop) {\r\n                track.stop();\r\n            }\r\n        });\r\n\r\n        // leave stop for implementation still using it\r\n        if (mediaStream.stop) {\r\n            mediaStream.stop();\r\n        }\r\n\r\n        // The MediaStream implementation of the react-native-webrtc project has\r\n        // an explicit release method that is to be invoked in order to release\r\n        // used resources such as memory.\r\n        if (mediaStream.release) {\r\n            mediaStream.release();\r\n        }\r\n\r\n        // if we have done createObjectURL, lets clean it\r\n        const url = mediaStream.jitsiObjectURL;\r\n\r\n        if (url) {\r\n            delete mediaStream.jitsiObjectURL;\r\n            URL.revokeObjectURL(url);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     * @returns {boolean}\r\n     */\r\n    isDesktopSharingEnabled() {\r\n        return screenObtainer.isSupported();\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\r\n     *      device\r\n     * @returns {Promise} - resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    setAudioOutputDevice(deviceId) {\r\n        if (!this.isDeviceChangeAvailable('output')) {\r\n            return Promise.reject(\r\n                new Error('Audio output device change is not supported'));\r\n        }\r\n\r\n        return featureDetectionAudioEl.setSinkId(deviceId)\r\n            .then(() => {\r\n                audioOutputDeviceId = deviceId;\r\n                audioOutputChanged = true;\r\n\r\n                logger.log(`Audio output device set to ${deviceId}`);\r\n\r\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                    deviceId);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, '' stands for default\r\n     * device\r\n     * @returns {string}\r\n     */\r\n    getAudioOutputDevice() {\r\n        return audioOutputDeviceId;\r\n    }\r\n\r\n    /**\r\n     * Returns list of available media devices if its obtained, otherwise an\r\n     * empty array is returned/\r\n     * @returns {Array} list of available media devices.\r\n     */\r\n    getCurrentlyAvailableMediaDevices() {\r\n        return availableDevices;\r\n    }\r\n\r\n    /**\r\n     * Returns event data for device to be reported to stats.\r\n     * @returns {MediaDeviceInfo} device.\r\n     */\r\n    getEventDataForActiveDevice(device) {\r\n        const deviceList = [];\r\n        const deviceData = {\r\n            'deviceId': device.deviceId,\r\n            'kind': device.kind,\r\n            'label': device.label,\r\n            'groupId': device.groupId\r\n        };\r\n\r\n        deviceList.push(deviceData);\r\n\r\n        return { deviceList };\r\n    }\r\n\r\n    /**\r\n     * Configures the given PeerConnection constraints to either enable or\r\n     * disable (according to the value of the 'enable' parameter) the\r\n     * 'googSuspendBelowMinBitrate' option.\r\n     * @param constraints the constraints on which to operate.\r\n     * @param enable {boolean} whether to enable or disable the suspend video\r\n     * option.\r\n     */\r\n    setSuspendVideo(constraints, enable) {\r\n        if (!constraints.optional) {\r\n            constraints.optional = [];\r\n        }\r\n\r\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\r\n        // that the elements of constraints.optional contain a single property).\r\n        constraints.optional\r\n            = constraints.optional.filter(\r\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\r\n\r\n        if (enable) {\r\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\r\n        }\r\n    }\r\n}\r\n\r\nconst rtcUtils = new RTCUtils();\r\n\r\n/**\r\n * Wraps original attachMediaStream function to set current audio output device\r\n * if this is supported.\r\n * @param {Function} origAttachMediaStream\r\n * @returns {Function}\r\n */\r\nfunction wrapAttachMediaStream(origAttachMediaStream) {\r\n    return function(element, stream) {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\r\n\r\n        if (stream\r\n                && rtcUtils.isDeviceChangeAvailable('output')\r\n                && stream.getAudioTracks\r\n                && stream.getAudioTracks().length\r\n\r\n                // we skip setting audio output if there was no explicit change\r\n                && audioOutputChanged) {\r\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\r\n                .catch(function(ex) {\r\n                    const err\r\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\r\n\r\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\r\n                        promise: this, // eslint-disable-line no-invalid-this\r\n                        reason: err\r\n                    });\r\n\r\n                    logger.warn(\r\n                        'Failed to set audio output device for the element.'\r\n                            + ' Default audio output device will be used'\r\n                            + ' instead',\r\n                        element,\r\n                        err);\r\n                });\r\n        }\r\n\r\n        return res;\r\n    };\r\n}\r\n\r\nexport default rtcUtils;\r\n","/**\r\n * This utility class defines custom onerror and onunhandledrejection functions.\r\n * The custom error handlers respect the previously-defined error handlers.\r\n * GlobalOnErrorHandler class provides utilities to add many custom error\r\n * handlers and to execute the error handlers directly.\r\n */\r\n\r\n\r\n/**\r\n * List with global error handlers that will be executed.\r\n */\r\nconst handlers = [];\r\n\r\n// If an old handler exists, also fire its events.\r\nconst oldOnErrorHandler = window.onerror;\r\n\r\n/**\r\n * Custom error handler that calls the old global error handler and executes\r\n * all handlers that were previously added.\r\n */\r\nfunction JitsiGlobalErrorHandler(...args) {\r\n    handlers.forEach(handler => handler(...args));\r\n    oldOnErrorHandler && oldOnErrorHandler(...args);\r\n}\r\n\r\n// If an old handler exists, also fire its events.\r\nconst oldOnUnhandledRejection = window.onunhandledrejection;\r\n\r\n/**\r\n * Custom handler that calls the old global handler and executes all handlers\r\n * that were previously added. This handler handles rejected Promises.\r\n */\r\nfunction JitsiGlobalUnhandledRejection(event) {\r\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\r\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\r\n}\r\n\r\n// Setting the custom error handlers.\r\nwindow.onerror = JitsiGlobalErrorHandler;\r\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\r\n\r\nconst GlobalOnErrorHandler = {\r\n    /**\r\n     * Adds new error handlers.\r\n     * @param handler the new handler.\r\n     */\r\n    addHandler(handler) {\r\n        handlers.push(handler);\r\n    },\r\n\r\n    /**\r\n     * Calls the global error handler if there is one.\r\n     * @param error the error to pass to the error handler\r\n     */\r\n    callErrorHandler(error) {\r\n        const errHandler = window.onerror;\r\n\r\n        if (!errHandler) {\r\n            return;\r\n        }\r\n        errHandler(null, null, null, null, error);\r\n    },\r\n\r\n    /**\r\n     * Calls the global rejection handler if there is one.\r\n     * @param error the error to pass to the rejection handler.\r\n     */\r\n    callUnhandledRejectionHandler(error) {\r\n        const errHandler = window.onunhandledrejection;\r\n\r\n        if (!errHandler) {\r\n            return;\r\n        }\r\n        errHandler(error);\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = GlobalOnErrorHandler;\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport { safeCounterIncrement } from '../util/MathUtil';\r\n\r\nimport BridgeChannel from './BridgeChannel';\r\nimport JitsiLocalTrack from './JitsiLocalTrack';\r\nimport RTCUtils from './RTCUtils';\r\nimport TraceablePeerConnection from './TraceablePeerConnection';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The counter used to generated id numbers assigned to peer connections\r\n * @type {number}\r\n */\r\nlet peerConnectionIdCounter = 0;\r\n\r\n/**\r\n * The counter used to generate id number for the local\r\n * <code>MediaStreamTrack</code>s.\r\n * @type {number}\r\n */\r\nlet rtcTrackIdCounter = 0;\r\n\r\n/**\r\n *\r\n * @param tracksInfo\r\n * @param options\r\n */\r\nfunction createLocalTracks(tracksInfo, options) {\r\n    const newTracks = [];\r\n    let deviceId = null;\r\n\r\n    tracksInfo.forEach(trackInfo => {\r\n        if (trackInfo.mediaType === MediaType.AUDIO) {\r\n            deviceId = options.micDeviceId;\r\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\r\n            deviceId = options.cameraDeviceId;\r\n        }\r\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\r\n        const localTrack = new JitsiLocalTrack({\r\n            ...trackInfo,\r\n            deviceId,\r\n            facingMode: options.facingMode,\r\n            rtcId: rtcTrackIdCounter,\r\n            effects: options.effects\r\n        });\r\n\r\n        newTracks.push(localTrack);\r\n    });\r\n\r\n    return newTracks;\r\n}\r\n\r\n/**\r\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\r\n * about MedieaTracks.\r\n *\r\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\r\n * MediaTrack instances. Each can look like:\r\n * {{\r\n *     stream: MediaStream instance that holds a track with audio or video,\r\n *     track: MediaTrack within the MediaStream,\r\n *     videoType: \"camera\" or \"desktop\" or falsy,\r\n *     sourceId: ID of the desktopsharing source,\r\n *     sourceType: The desktopsharing source type,\r\n *     effects: Array of effect types\r\n * }}\r\n */\r\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\r\n    return mediaStreamMetaData.map(metaData => {\r\n        const {\r\n            sourceId,\r\n            sourceType,\r\n            stream,\r\n            track,\r\n            videoType,\r\n            effects\r\n        } = metaData;\r\n\r\n        const { deviceId, facingMode } = track.getSettings();\r\n\r\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\r\n        // so RTC does not need to handle ID management. This move would be\r\n        // safer to do once the old createLocalTracks is removed.\r\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\r\n\r\n        return new JitsiLocalTrack({\r\n            deviceId,\r\n            facingMode,\r\n            mediaType: track.kind,\r\n            rtcId: rtcTrackIdCounter,\r\n            sourceId,\r\n            sourceType,\r\n            stream,\r\n            track,\r\n            videoType: videoType || null,\r\n            effects\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport default class RTC extends Listenable {\r\n    /**\r\n     *\r\n     * @param conference\r\n     * @param options\r\n     */\r\n    constructor(conference, options = {}) {\r\n        super();\r\n        this.conference = conference;\r\n\r\n        /**\r\n         * A map of active <tt>TraceablePeerConnection</tt>.\r\n         * @type {Map.<number, TraceablePeerConnection>}\r\n         */\r\n        this.peerConnections = new Map();\r\n\r\n        this.localTracks = [];\r\n\r\n        this.options = options;\r\n\r\n        // BridgeChannel instance.\r\n        // @private\r\n        // @type {BridgeChannel}\r\n        this._channel = null;\r\n\r\n        /**\r\n         * The value specified to the last invocation of setLastN before the\r\n         * channel completed opening. If non-null, the value will be sent\r\n         * through a channel (once) as soon as it opens and will then be\r\n         * discarded.\r\n         * @private\r\n         * @type {number}\r\n         */\r\n        this._lastN = -1;\r\n\r\n        /**\r\n         * Defines the last N endpoints list. It can be null or an array once\r\n         * initialised with a channel last N event.\r\n         * @type {Array<string>|null}\r\n         * @private\r\n         */\r\n        this._lastNEndpoints = null;\r\n\r\n        /*\r\n         * Holds the sender video constraints signaled from the bridge.\r\n         */\r\n        this._senderVideoConstraints = {};\r\n\r\n        /**\r\n         * The number representing the maximum video height the local client\r\n         * should receive from the bridge.\r\n         *\r\n         * @type {number|undefined}\r\n         * @private\r\n         */\r\n        this._maxFrameHeight = undefined;\r\n\r\n        /**\r\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\r\n         * no user is pinned.\r\n         * @type {string|null}\r\n         * @private\r\n         */\r\n        this._pinnedEndpoint = null;\r\n\r\n        /**\r\n         * The endpoint IDs of currently selected participants.\r\n         *\r\n         * @type {Array}\r\n         * @private\r\n         */\r\n        this._selectedEndpoints = [];\r\n\r\n        // The last N change listener.\r\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\r\n\r\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\r\n        this._updateAudioOutputForAudioTracks\r\n            = this._updateAudioOutputForAudioTracks.bind(this);\r\n\r\n        // Switch audio output device on all remote audio tracks. Local audio\r\n        // tracks handle this event by themselves.\r\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\r\n            RTCUtils.addListener(\r\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._updateAudioOutputForAudioTracks\r\n            );\r\n\r\n            RTCUtils.addListener(\r\n                RTCEvents.DEVICE_LIST_CHANGED,\r\n                this._onDeviceListChanged\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes any listeners and stored state from this {@code RTC} instance.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    destroy() {\r\n        RTCUtils.removeListener(\r\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n            this._updateAudioOutputForAudioTracks\r\n        );\r\n\r\n        RTCUtils.removeListener(\r\n            RTCEvents.DEVICE_LIST_CHANGED,\r\n            this._onDeviceListChanged\r\n        );\r\n\r\n        this.removeListener(\r\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n            this._lastNChangeListener\r\n        );\r\n\r\n        if (this._channelOpenListener) {\r\n            this.removeListener(\r\n                RTCEvents.DATA_CHANNEL_OPEN,\r\n                this._channelOpenListener\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exposes the private helper for converting a WebRTC MediaStream to a\r\n     * JitsiLocalTrack.\r\n     *\r\n     * @param {Array<Object>} tracksInfo\r\n     * @returns {Array<JitsiLocalTrack>}\r\n     */\r\n    static newCreateLocalTracks(tracksInfo) {\r\n        return _newCreateLocalTracks(tracksInfo);\r\n    }\r\n\r\n    /**\r\n     * Creates the local MediaStreams.\r\n     * @param {object} [options] Optional parameters.\r\n     * @param {array} options.devices The devices that will be requested.\r\n     * @param {string} options.resolution Resolution constraints.\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @returns {*} Promise object that will receive the new JitsiTracks\r\n     */\r\n    static obtainAudioAndVideoPermissions(options) {\r\n        const usesNewGumFlow = browser.usesNewGumFlow();\r\n        const obtainMediaPromise = usesNewGumFlow\r\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\r\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\r\n\r\n        return obtainMediaPromise.then(tracksInfo => {\r\n            if (usesNewGumFlow) {\r\n                return _newCreateLocalTracks(tracksInfo);\r\n            }\r\n\r\n            return createLocalTracks(tracksInfo, options);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the bridge channel of this instance.\r\n     * At least one of both, peerconnection or wsUrl parameters, must be\r\n     * given.\r\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\r\n     * instance.\r\n     * @param {string} [wsUrl] WebSocket URL.\r\n     */\r\n    initializeBridgeChannel(peerconnection, wsUrl) {\r\n        this._channel = new BridgeChannel(\r\n            peerconnection, wsUrl, this.eventEmitter, this._senderVideoConstraintsChanged.bind(this));\r\n\r\n        this._channelOpenListener = () => {\r\n            // When the channel becomes available, tell the bridge about\r\n            // video selections so that it can do adaptive simulcast,\r\n            // we want the notification to trigger even if userJid\r\n            // is undefined, or null.\r\n            try {\r\n                this._channel.sendPinnedEndpointMessage(\r\n                    this._pinnedEndpoint);\r\n                this._channel.sendSelectedEndpointsMessage(\r\n                    this._selectedEndpoints);\r\n\r\n                if (typeof this._maxFrameHeight !== 'undefined') {\r\n                    this._channel.sendReceiverVideoConstraintMessage(\r\n                        this._maxFrameHeight);\r\n                }\r\n            } catch (error) {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(\r\n                    `Cannot send selected(${this._selectedEndpoint})`\r\n                    + `pinned(${this._pinnedEndpoint})`\r\n                    + `frameHeight(${this._maxFrameHeight}) endpoint message`,\r\n                    error);\r\n            }\r\n\r\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN,\r\n                this._channelOpenListener);\r\n            this._channelOpenListener = null;\r\n\r\n            // If setLastN was invoked before the bridge channel completed\r\n            // opening, apply the specified value now that the channel\r\n            // is open. NOTE that -1 is the default value assumed by both\r\n            // RTC module and the JVB.\r\n            if (this._lastN !== -1) {\r\n                this._channel.sendSetLastNMessage(this._lastN);\r\n            }\r\n        };\r\n\r\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN,\r\n            this._channelOpenListener);\r\n\r\n        // Add Last N change listener.\r\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n            this._lastNChangeListener);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the list of known audio and video devices has\r\n     * been updated. Attempts to update the known available audio output\r\n     * devices.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onDeviceListChanged() {\r\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\r\n    }\r\n\r\n    /**\r\n     * Notifies this instance that the sender video constraints signaled from the bridge have changed.\r\n     *\r\n     * @param {Object} senderVideoConstraints the sender video constraints from the bridge.\r\n     * @private\r\n     */\r\n    _senderVideoConstraintsChanged(senderVideoConstraints) {\r\n        logger.info('Remote max frame height received on bridge channel: ', JSON.stringify(senderVideoConstraints));\r\n        this._senderVideoConstraints = senderVideoConstraints;\r\n        this.eventEmitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Receives events when Last N had changed.\r\n     * @param {array} lastNEndpoints The new Last N endpoints.\r\n     * @private\r\n     */\r\n    _onLastNChanged(lastNEndpoints = []) {\r\n        const oldLastNEndpoints = this._lastNEndpoints || [];\r\n        let leavingLastNEndpoints = [];\r\n        let enteringLastNEndpoints = [];\r\n\r\n        this._lastNEndpoints = lastNEndpoints;\r\n\r\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\r\n            id => !this.isInLastN(id));\r\n\r\n        enteringLastNEndpoints = lastNEndpoints.filter(\r\n            id => oldLastNEndpoints.indexOf(id) === -1);\r\n\r\n        this.conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            leavingLastNEndpoints,\r\n            enteringLastNEndpoints);\r\n    }\r\n\r\n    /**\r\n     * Should be called when current media session ends and after the\r\n     * PeerConnection has been closed using PeerConnection.close() method.\r\n     */\r\n    onCallEnded() {\r\n        if (this._channel) {\r\n            // The BridgeChannel is not explicitly closed as the PeerConnection\r\n            // is closed on call ended which triggers datachannel onclose\r\n            // events. If using a WebSocket, the channel must be closed since\r\n            // it is not managed by the PeerConnection.\r\n            // The reference is cleared to disable any logic related to the\r\n            // channel.\r\n            if (this._channel && this._channel.mode === 'websocket') {\r\n                this._channel.close();\r\n            }\r\n\r\n            this._channel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum video size the local participant should receive from\r\n     * remote participants. Will cache the value and send it through the channel\r\n     * once it is created.\r\n     *\r\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\r\n     * this receiver is willing to receive.\r\n     * @returns {void}\r\n     */\r\n    setReceiverVideoConstraint(maxFrameHeight) {\r\n        this._maxFrameHeight = maxFrameHeight;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elects the participants with the given ids to be the selected\r\n     * participants in order to always receive video for this participant (even\r\n     * when last n is enabled). If there is no channel we store it and send it\r\n     * through the channel once it is created.\r\n     *\r\n     * @param {Array<string>} ids - The user ids.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails.\r\n     * @returns {void}\r\n     */\r\n    selectEndpoints(ids) {\r\n        this._selectedEndpoints = ids;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendSelectedEndpointsMessage(ids);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elects the participant with the given id to be the pinned participant in\r\n     * order to always receive video for this participant (even when last n is\r\n     * enabled).\r\n     * @param {stirng} id The user id.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails.\r\n     */\r\n    pinEndpoint(id) {\r\n        // Cache the value if channel is missing, till we open it.\r\n        this._pinnedEndpoint = id;\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendPinnedEndpointMessage(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param eventType\r\n     * @param listener\r\n     */\r\n    static addListener(eventType, listener) {\r\n        RTCUtils.addListener(eventType, listener);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param eventType\r\n     * @param listener\r\n     */\r\n    static removeListener(eventType, listener) {\r\n        RTCUtils.removeListener(eventType, listener);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param options\r\n     */\r\n    static init(options = {}) {\r\n        this.options = options;\r\n\r\n        return RTCUtils.init(this.options);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>TraceablePeerConnection</tt>\r\n     * @param {SignalingLayer} signaling The signaling layer that will\r\n     *      provide information about the media or participants which is not\r\n     *      carried over SDP.\r\n     * @param {object} iceConfig An object describing the ICE config like\r\n     *      defined in the WebRTC specification.\r\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\r\n     *      in a peer to peer type of session.\r\n     * @param {object} options The config options.\r\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\r\n     * enabled on the PeerConnection.\r\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\r\n     *      the simulcast.\r\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\r\n     *      RTX.\r\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\r\n     *      disabled by removing it from the SDP.\r\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\r\n     *      preferred over other video codecs.\r\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\r\n     * @return {TraceablePeerConnection}\r\n     */\r\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\r\n        const pcConstraints = RTC.getPCConstraints(isP2P);\r\n\r\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\r\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\r\n\r\n            Statistics.analytics.addPermanentProperties(\r\n                { abtestSuspendVideo: options.abtestSuspendVideo });\r\n        }\r\n\r\n        // FIXME: We should rename iceConfig to pcConfig.\r\n\r\n        if (options.enableInsertableStreams) {\r\n            logger.debug('E2EE - setting insertable streams constraints');\r\n            iceConfig.encodedInsertableStreams = true;\r\n            iceConfig.forceEncodedAudioInsertableStreams = true; // legacy, to be removed in M88.\r\n            iceConfig.forceEncodedVideoInsertableStreams = true; // legacy, to be removed in M88.\r\n        }\r\n\r\n        if (browser.supportsSdpSemantics()) {\r\n            iceConfig.sdpSemantics = 'plan-b';\r\n        }\r\n\r\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\r\n        // The default policy generates separate ice candidates for audio and video connections.\r\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\r\n        iceConfig.bundlePolicy = 'max-bundle';\r\n\r\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\r\n\r\n        const newConnection\r\n            = new TraceablePeerConnection(\r\n                this,\r\n                peerConnectionIdCounter,\r\n                signaling,\r\n                iceConfig, pcConstraints,\r\n                isP2P, options);\r\n\r\n        this.peerConnections.set(newConnection.id, newConnection);\r\n\r\n        return newConnection;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Removed given peer connection from this RTC module instance.\r\n     * @param {TraceablePeerConnection} traceablePeerConnection\r\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\r\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\r\n     * this RTC instance.\r\n     */\r\n    _removePeerConnection(traceablePeerConnection) {\r\n        const id = traceablePeerConnection.id;\r\n\r\n        if (this.peerConnections.has(id)) {\r\n            // NOTE Remote tracks are not removed here.\r\n            this.peerConnections.delete(id);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param track\r\n     */\r\n    addLocalTrack(track) {\r\n        if (!track) {\r\n            throw new Error('track must not be null nor undefined');\r\n        }\r\n\r\n        this.localTracks.push(track);\r\n\r\n        track.conference = this.conference;\r\n    }\r\n\r\n    /**\r\n     * Returns the current value for \"lastN\" - the amount of videos are going\r\n     * to be delivered. When set to -1 for unlimited or all available videos.\r\n     * @return {number}\r\n     */\r\n    getLastN() {\r\n        return this._lastN;\r\n    }\r\n\r\n    /**\r\n     * @return {Object} The sender video constraints signaled from the brridge.\r\n     */\r\n    getSenderVideoConstraints() {\r\n        return this._senderVideoConstraints;\r\n    }\r\n\r\n    /**\r\n     * Get local video track.\r\n     * @returns {JitsiLocalTrack|undefined}\r\n     */\r\n    getLocalVideoTrack() {\r\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\r\n\r\n\r\n        return localVideo.length ? localVideo[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Get local audio track.\r\n     * @returns {JitsiLocalTrack|undefined}\r\n     */\r\n    getLocalAudioTrack() {\r\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\r\n\r\n\r\n        return localAudio.length ? localAudio[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns the local tracks of the given media type, or all local tracks if\r\n     * no specific type is given.\r\n     * @param {MediaType} [mediaType] Optional media type filter.\r\n     * (audio or video).\r\n     */\r\n    getLocalTracks(mediaType) {\r\n        let tracks = this.localTracks.slice();\r\n\r\n        if (mediaType !== undefined) {\r\n            tracks = tracks.filter(\r\n                track => track.getType() === mediaType);\r\n        }\r\n\r\n        return tracks;\r\n    }\r\n\r\n    /**\r\n     * Obtains all remote tracks currently known to this RTC module instance.\r\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\r\n     *      by their media type if this argument is specified.\r\n     * @return {Array<JitsiRemoteTrack>}\r\n     */\r\n    getRemoteTracks(mediaType) {\r\n        let remoteTracks = [];\r\n\r\n        for (const tpc of this.peerConnections.values()) {\r\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\r\n\r\n            if (pcRemoteTracks) {\r\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\r\n            }\r\n        }\r\n\r\n        return remoteTracks;\r\n    }\r\n\r\n    /**\r\n     * Set mute for all local audio streams attached to the conference.\r\n     * @param value The mute value.\r\n     * @returns {Promise}\r\n     */\r\n    setAudioMute(value) {\r\n        const mutePromises = [];\r\n\r\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\r\n            // this is a Promise\r\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\r\n        });\r\n\r\n        // We return a Promise from all Promises so we can wait for their\r\n        // execution.\r\n        return Promise.all(mutePromises);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param track\r\n     */\r\n    removeLocalTrack(track) {\r\n        const pos = this.localTracks.indexOf(track);\r\n\r\n        if (pos === -1) {\r\n            return;\r\n        }\r\n\r\n        this.localTracks.splice(pos, 1);\r\n    }\r\n\r\n    /**\r\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\r\n     * (resource part of the JID). Returns array of removed tracks.\r\n     *\r\n     * @param {string} Owner The resource part of the MUC JID.\r\n     * @returns {JitsiRemoteTrack[]}\r\n     */\r\n    removeRemoteTracks(owner) {\r\n        let removedTracks = [];\r\n\r\n        for (const tpc of this.peerConnections.values()) {\r\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\r\n\r\n            removedTracks = removedTracks.concat(pcRemovedTracks);\r\n        }\r\n\r\n        logger.debug(\r\n            `Removed remote tracks for ${owner}`\r\n                + ` count: ${removedTracks.length}`);\r\n\r\n        return removedTracks;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    static getPCConstraints(isP2P) {\r\n        const pcConstraints\r\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\r\n\r\n        if (!pcConstraints) {\r\n            return {};\r\n        }\r\n\r\n        return JSON.parse(JSON.stringify(pcConstraints));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param elSelector\r\n     * @param stream\r\n     */\r\n    static attachMediaStream(elSelector, stream) {\r\n        return RTCUtils.attachMediaStream(elSelector, stream);\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the given stream.\r\n     * @param {MediaStream} stream\r\n     */\r\n    static getStreamID(stream) {\r\n        return RTCUtils.getStreamID(stream);\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the given track.\r\n     * @param {MediaStreamTrack} track\r\n     */\r\n    static getTrackID(track) {\r\n        return RTCUtils.getTrackID(track);\r\n    }\r\n\r\n    /**\r\n     * Returns true if retrieving the the list of input devices is supported\r\n     * and false if not.\r\n     */\r\n    static isDeviceListAvailable() {\r\n        return RTCUtils.isDeviceListAvailable();\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @param {string} [deviceType] Type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    static isDeviceChangeAvailable(deviceType) {\r\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the current execution environment supports WebRTC (for\r\n     * use within this library).\r\n     *\r\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\r\n     * execution environment (for use within this library); {@code false},\r\n     * otherwise.\r\n     */\r\n    static isWebRtcSupported() {\r\n        return browser.isSupported();\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, '' stands for default\r\n     * device\r\n     * @returns {string}\r\n     */\r\n    static getAudioOutputDevice() {\r\n        return RTCUtils.getAudioOutputDevice();\r\n    }\r\n\r\n    /**\r\n     * Returns list of available media devices if its obtained, otherwise an\r\n     * empty array is returned/\r\n     * @returns {array} list of available media devices.\r\n     */\r\n    static getCurrentlyAvailableMediaDevices() {\r\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\r\n    }\r\n\r\n    /**\r\n     * Returns event data for device to be reported to stats.\r\n     * @returns {MediaDeviceInfo} device.\r\n     */\r\n    static getEventDataForActiveDevice(device) {\r\n        return RTCUtils.getEventDataForActiveDevice(device);\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId Id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices().\r\n     * @returns {Promise} resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    static setAudioOutputDevice(deviceId) {\r\n        return RTCUtils.setAudioOutputDevice(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\r\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\r\n     * \"mixed\" JVB stream.\r\n     *\r\n     * Clients that implement Unified Plan, such as Firefox use recvonly\r\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\r\n     * to Plan B where there are only 3 channels: audio, video and data.\r\n     *\r\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\r\n     * @returns {boolean}\r\n     */\r\n    static isUserStream(stream) {\r\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\r\n     * ID is considered a valid \"user\" stream which means that it's not a\r\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\r\n     *\r\n     * Clients that implement Unified Plan, such as Firefox use recvonly\r\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\r\n     * to Plan B where there are only 3 channels: audio, video and data.\r\n     *\r\n     * @param {string} streamId The id of WebRTC MediaStream.\r\n     * @returns {boolean}\r\n     */\r\n    static isUserStreamById(streamId) {\r\n        return streamId && streamId !== 'mixedmslabel'\r\n            && streamId !== 'default';\r\n    }\r\n\r\n    /**\r\n     * Allows to receive list of available cameras/microphones.\r\n     * @param {function} callback Would receive array of devices as an\r\n     *      argument.\r\n     */\r\n    static enumerateDevices(callback) {\r\n        RTCUtils.enumerateDevices(callback);\r\n    }\r\n\r\n    /**\r\n     * A method to handle stopping of the stream.\r\n     * One point to handle the differences in various implementations.\r\n     * @param {MediaStream} mediaStream MediaStream object to stop.\r\n     */\r\n    static stopMediaStream(mediaStream) {\r\n        RTCUtils.stopMediaStream(mediaStream);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     * @returns {boolean}\r\n     */\r\n    static isDesktopSharingEnabled() {\r\n        return RTCUtils.isDesktopSharingEnabled();\r\n    }\r\n\r\n    /**\r\n     * Closes the currently opened bridge channel.\r\n     */\r\n    closeBridgeChannel() {\r\n        if (this._channel) {\r\n            this._channel.close();\r\n            this._channel = null;\r\n\r\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n                this._lastNChangeListener);\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     *\r\n     * @param {TraceablePeerConnection} tpc\r\n     * @param {number} ssrc\r\n     * @param {number} audioLevel\r\n     * @param {boolean} isLocal\r\n     */\r\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\r\n        const track = tpc.getTrackBySSRC(ssrc);\r\n\r\n        if (!track) {\r\n            return;\r\n        } else if (!track.isAudioTrack()) {\r\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\r\n\r\n            return;\r\n        } else if (track.isLocal() !== isLocal) {\r\n            logger.error(\r\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\r\n        }\r\n\r\n        track.setAudioLevel(audioLevel, tpc);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Sends message via the bridge channel.\r\n     * @param {string} to The id of the endpoint that should receive the\r\n     *      message. If \"\" the message will be sent to all participants.\r\n     * @param {object} payload The payload of the message.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails or there is no data channel created.\r\n     */\r\n    sendChannelMessage(to, payload) {\r\n        if (this._channel) {\r\n            this._channel.sendMessage(to, payload);\r\n        } else {\r\n            throw new Error('Channel support is disabled!');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selects a new value for \"lastN\". The requested amount of videos are going\r\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\r\n     * all available videos.\r\n     * @param {number} value the new value for lastN.\r\n     */\r\n    setLastN(value) {\r\n        if (this._lastN !== value) {\r\n            this._lastN = value;\r\n            if (this._channel && this._channel.isOpen()) {\r\n                this._channel.sendSetLastNMessage(value);\r\n            }\r\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates if the endpoint id is currently included in the last N.\r\n     * @param {string} id The endpoint id that we check for last N.\r\n     * @returns {boolean} true if the endpoint id is in the last N or if we\r\n     * don't have bridge channel support, otherwise we return false.\r\n     */\r\n    isInLastN(id) {\r\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\r\n            || this._lastNEndpoints.indexOf(id) > -1;\r\n    }\r\n\r\n    /**\r\n     * Updates the target audio output device for all remote audio tracks.\r\n     *\r\n     * @param {string} deviceId - The device id of the audio ouput device to\r\n     * use for all remote tracks.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _updateAudioOutputForAudioTracks(deviceId) {\r\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\r\n\r\n        for (const track of remoteAudioTracks) {\r\n            track.setAudioOutput(deviceId);\r\n        }\r\n    }\r\n}\r\n","/* global module */\r\n/**\r\n * Enumeration of the video types\r\n * @type {{CAMERA: string, DESKTOP: string}}\r\n */\r\nconst VideoType = {\r\n    /**\r\n     * The camera video type.\r\n     */\r\n    CAMERA: 'camera',\r\n\r\n    /**\r\n     * The desktop video type.\r\n     */\r\n    DESKTOP: 'desktop'\r\n};\r\n\r\nmodule.exports = VideoType;\r\n","/**\r\n * The errors for the JitsiTrack objects.\r\n */\r\n\r\n/**\r\n * An error which indicates that some of requested constraints in\r\n * getUserMedia call were not satisfied.\r\n */\r\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\r\n\r\n/**\r\n * A generic error which indicates an error occurred while selecting\r\n * a DesktopCapturerSource from the electron app.\r\n */\r\nexport const ELECTRON_DESKTOP_PICKER_ERROR\r\n    = 'gum.electron_desktop_picker_error';\r\n\r\n/**\r\n * An error which indicates a custom desktop picker could not be detected\r\n * for the electron app.\r\n */\r\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\r\n    = 'gum.electron_desktop_picker_not_found';\r\n\r\n/**\r\n * Generic getUserMedia error.\r\n */\r\nexport const GENERAL = 'gum.general';\r\n\r\n/**\r\n * An error which indicates that requested device was not found.\r\n */\r\nexport const NOT_FOUND = 'gum.not_found';\r\n\r\n/**\r\n * An error which indicates that user denied permission to share requested\r\n * device.\r\n */\r\nexport const PERMISSION_DENIED = 'gum.permission_denied';\r\n\r\n/**\r\n * Generic error for screensharing failure.\r\n */\r\nexport const SCREENSHARING_GENERIC_ERROR\r\n    = 'gum.screensharing_generic_error';\r\n\r\n/**\r\n * An error which indicates that user canceled screen sharing window\r\n * selection dialog.\r\n */\r\nexport const SCREENSHARING_USER_CANCELED\r\n    = 'gum.screensharing_user_canceled';\r\n\r\n/**\r\n * An error which indicates that track has been already disposed and cannot\r\n * be longer used.\r\n */\r\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\r\n\r\n/**\r\n * An error which indicates that track has no MediaStream associated.\r\n */\r\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\r\n\r\n/**\r\n * An error which indicates that requested video resolution is not supported\r\n * by a webcam.\r\n */\r\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\r\n","/**\r\n * The media track was removed to the conference.\r\n */\r\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\r\n\r\n/**\r\n * Audio levels of a this track was changed.\r\n * The first argument is a number with audio level value in range [0, 1].\r\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\r\n * connection which measured the audio level (one audio track can be added\r\n * to multiple peer connection at the same time). This argument is optional for\r\n * local tracks for which we can measure audio level without the peer\r\n * connection (the value will be <tt>undefined</tt>).\r\n *\r\n * NOTE The second argument should be treated as library internal and can be\r\n * removed at any time.\r\n */\r\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\r\n\r\n/**\r\n * The audio output of the track was changed.\r\n */\r\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\r\n\r\n/**\r\n * A media track mute status was changed.\r\n */\r\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\r\n\r\n/**\r\n * The video type(\"camera\" or \"desktop\") of the track was changed.\r\n */\r\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\r\n\r\n/**\r\n * Indicates that the track is not receiving any data even though we expect it\r\n * to receive data (i.e. the stream is not stopped).\r\n */\r\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\r\n\r\n/**\r\n * Indicates that the local audio track is not receiving any audio input from\r\n * the microphone that is currently selected.\r\n */\r\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\r\n","/**\r\n * The errors for the conference.\r\n */\r\n\r\n/**\r\n * Indicates that client must be authenticated to create the conference.\r\n */\r\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\r\n\r\n/**\r\n * Indicates that chat error occurred.\r\n */\r\nexport const CHAT_ERROR = 'conference.chatError';\r\n\r\n/**\r\n * Indicates that conference has been destroyed.\r\n */\r\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\r\n\r\n/**\r\n * Indicates that max users limit has been reached.\r\n */\r\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\r\n\r\n/**\r\n * Indicates that a connection error occurred when trying to join a conference.\r\n */\r\nexport const CONNECTION_ERROR = 'conference.connectionError';\r\n\r\n/**\r\n * Indicates that a connection error is due to not allowed,\r\n * occurred when trying to join a conference.\r\n */\r\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\r\n\r\n/**\r\n * Indicates that a connection error is due to not allowed,\r\n * occurred when trying to join a conference, only approved members are allowed to join.\r\n */\r\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\r\n\r\n/**\r\n * Indicates that a connection error is due to denied access to the room,\r\n * occurred after joining a lobby room and access is denied by the room moderators.\r\n */\r\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\r\n\r\n/**\r\n * Indicates that focus error happened.\r\n */\r\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\r\n\r\n/**\r\n * Indicates that focus left the conference.\r\n */\r\nexport const FOCUS_LEFT = 'conference.focusLeft';\r\n\r\n/**\r\n * Indicates that graceful shutdown happened.\r\n */\r\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\r\n\r\n/**\r\n * Indicates that the media connection has failed.\r\n */\r\nexport const ICE_FAILED = 'conference.iceFailed';\r\n\r\n/**\r\n * Indicates that the versions of the server side components are incompatible\r\n * with the client side.\r\n */\r\nexport const INCOMPATIBLE_SERVER_VERSIONS\r\n    = 'conference.incompatible_server_versions';\r\n\r\n/**\r\n * Indicates that offer/answer had failed.\r\n */\r\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\r\n\r\n/**\r\n * Indicates that password cannot be set for this conference.\r\n */\r\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\r\n\r\n/**\r\n * Indicates that a password is required in order to join the conference.\r\n */\r\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\r\n\r\n/**\r\n * Indicates that reservation system returned error.\r\n */\r\nexport const RESERVATION_ERROR = 'conference.reservationError';\r\n\r\n/**\r\n * Indicates that there is no available videobridge.\r\n */\r\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\r\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\r\n\r\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\r\n\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\r\n    = 'Video resolution is not supported: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\r\n    = 'User canceled screen sharing prompt';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\r\n    = 'Unknown error from screensharing';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\r\n    = 'Unkown error from desktop picker';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\r\n    = 'Failed to detect desktop picker';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\r\n    = 'Generic getUserMedia error';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\r\n    = 'User denied permission to use device(s): ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\r\n    = 'Requested device(s) was/were not found: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\r\n    = 'Constraint could not be satisfied: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\r\n    = 'Track has been already disposed';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\r\n    = 'Track does not have an associated Media Stream';\r\n\r\n// FIXME: Using prototype inheritance because otherwise instanceof is not\r\n// working properly (see https://github.com/babel/babel/issues/3083)\r\n\r\n/**\r\n *\r\n * Represents an error that occurred to a JitsiTrack. Can represent various\r\n * types of errors. For error descriptions (@see JitsiTrackErrors).\r\n *\r\n * @extends Error\r\n *\r\n *\r\n * @constructor\r\n * @param {Object|string} error - error object or error name\r\n * @param {Object|string} (options) - getUserMedia constraints object or\r\n * error message\r\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\r\n * list of getUserMedia requested devices\r\n */\r\nfunction JitsiTrackError(error, options, devices) {\r\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\r\n        /**\r\n         * Additional information about original getUserMedia error\r\n         * and constraints.\r\n         * @type {{\r\n         *     error: Object,\r\n         *     constraints: Object,\r\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\r\n         * }}\r\n         */\r\n        this.gum = {\r\n            error,\r\n            constraints: options,\r\n            devices: devices && Array.isArray(devices)\r\n                ? devices.slice(0)\r\n                : undefined\r\n        };\r\n\r\n        switch (error.name) {\r\n        case 'NotAllowedError':\r\n        case 'PermissionDeniedError':\r\n        case 'SecurityError':\r\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\r\n            this.message\r\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                    + (this.gum.devices || []).join(', ');\r\n            break;\r\n        case 'DevicesNotFoundError':\r\n        case 'NotFoundError':\r\n            this.name = JitsiTrackErrors.NOT_FOUND;\r\n            this.message\r\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                    + (this.gum.devices || []).join(', ');\r\n            break;\r\n        case 'ConstraintNotSatisfiedError':\r\n        case 'OverconstrainedError': {\r\n            const constraintName = error.constraintName || error.constraint;\r\n\r\n            // we treat deviceId as unsupported resolution, as we want to\r\n            // retry and finally if everything fails to remove deviceId from\r\n            // mandatory constraints\r\n            if (options\r\n                    && options.video\r\n                    && (!devices || devices.indexOf('video') > -1)\r\n                    && (constraintName === 'minWidth'\r\n                        || constraintName === 'maxWidth'\r\n                        || constraintName === 'minHeight'\r\n                        || constraintName === 'maxHeight'\r\n                        || constraintName === 'width'\r\n                        || constraintName === 'height'\r\n                        || constraintName === 'deviceId')) {\r\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\r\n                this.message\r\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                        + getResolutionFromFailedConstraint(\r\n                            constraintName,\r\n                            options);\r\n            } else {\r\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\r\n                this.message\r\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                        + error.constraintName;\r\n            }\r\n            break;\r\n        }\r\n\r\n        default:\r\n            this.name = JitsiTrackErrors.GENERAL;\r\n            this.message\r\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\r\n            break;\r\n        }\r\n    } else if (typeof error === 'string') {\r\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\r\n            this.name = error;\r\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\r\n        } else {\r\n            // this is some generic error that do not fit any of our\r\n            // pre-defined errors, so don't give it any specific name, just\r\n            // store message\r\n            this.message = error;\r\n        }\r\n    } else {\r\n        throw new Error('Invalid arguments');\r\n    }\r\n\r\n    this.stack = error.stack || (new Error()).stack;\r\n}\r\n\r\nJitsiTrackError.prototype = Object.create(Error.prototype);\r\nJitsiTrackError.prototype.constructor = JitsiTrackError;\r\n\r\n/**\r\n * Gets failed resolution constraint from corresponding object.\r\n * @param {string} failedConstraintName\r\n * @param {Object} constraints\r\n * @returns {string|number}\r\n */\r\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\r\n    if (constraints && constraints.video && constraints.video.mandatory) {\r\n        switch (failedConstraintName) {\r\n        case 'width':\r\n            return constraints.video.mandatory.minWidth;\r\n        case 'height':\r\n            return constraints.video.mandatory.minHeight;\r\n        default:\r\n            return constraints.video.mandatory[failedConstraintName] || '';\r\n        }\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\nexport default JitsiTrackError;\r\n","import EventEmitter from 'events';\r\n\r\n/**\r\n * The class implements basic event operations - add/remove listener.\r\n * NOTE: The purpose of the class is to be extended in order to add\r\n * this functionality to other classes.\r\n */\r\nexport default class Listenable {\r\n    /**\r\n     * Creates new instance.\r\n     * @param {EventEmitter} eventEmitter\r\n     * @constructor\r\n     */\r\n    constructor(eventEmitter = new EventEmitter()) {\r\n        this.eventEmitter = eventEmitter;\r\n\r\n        // aliases for addListener/removeListener\r\n        this.addEventListener = this.on = this.addListener;\r\n        this.removeEventListener = this.off = this.removeListener;\r\n    }\r\n\r\n    /**\r\n     * Adds new listener.\r\n     * @param {String} eventName the name of the event\r\n     * @param {Function} listener the listener.\r\n     * @returns {Function} - The unsubscribe function.\r\n     */\r\n    addListener(eventName, listener) {\r\n        this.eventEmitter.addListener(eventName, listener);\r\n\r\n        return () => this.removeEventListener(eventName, listener);\r\n    }\r\n\r\n    /**\r\n     * Removes listener.\r\n     * @param {String} eventName the name of the event that triggers the\r\n     * listener\r\n     * @param {Function} listener the listener.\r\n     */\r\n    removeListener(eventName, listener) {\r\n        this.eventEmitter.removeListener(eventName, listener);\r\n    }\r\n}\r\n","/* global $ */\r\n\r\nimport browser from '../browser';\r\n\r\nimport SDPUtil from './SDPUtil';\r\n\r\n/**\r\n *\r\n * @param sdp\r\n */\r\nexport default function SDP(sdp) {\r\n    const media = sdp.split('\\r\\nm=');\r\n\r\n    for (let i = 1, length = media.length; i < length; i++) {\r\n        let mediaI = `m=${media[i]}`;\r\n\r\n        if (i !== length - 1) {\r\n            mediaI += '\\r\\n';\r\n        }\r\n        media[i] = mediaI;\r\n    }\r\n    const session = `${media.shift()}\\r\\n`;\r\n\r\n    this.media = media;\r\n    this.raw = session + media.join('');\r\n    this.session = session;\r\n}\r\n\r\n/**\r\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\r\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\r\n * failure. The flag is used in the automated testing.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.failICE = false;\r\n\r\n/**\r\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.removeTcpCandidates = false;\r\n\r\n/**\r\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.removeUdpCandidates = false;\r\n\r\n/**\r\n * Returns map of MediaChannel mapped per channel idx.\r\n */\r\nSDP.prototype.getMediaSsrcMap = function() {\r\n    const mediaSSRCs = {};\r\n\r\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\r\n        const mid\r\n            = SDPUtil.parseMID(\r\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\r\n        const media = {\r\n            mediaindex,\r\n            mid,\r\n            ssrcs: {},\r\n            ssrcGroups: []\r\n        };\r\n\r\n        mediaSSRCs[mediaindex] = media;\r\n\r\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\r\n            const linessrc = line.substring(7).split(' ')[0];\r\n\r\n            // allocate new ChannelSsrc\r\n\r\n            if (!media.ssrcs[linessrc]) {\r\n                media.ssrcs[linessrc] = {\r\n                    ssrc: linessrc,\r\n                    lines: []\r\n                };\r\n            }\r\n            media.ssrcs[linessrc].lines.push(line);\r\n        });\r\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\r\n            const idx = line.indexOf(' ');\r\n            const semantics = line.substr(0, idx).substr(13);\r\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\r\n\r\n            if (ssrcs.length) {\r\n                media.ssrcGroups.push({\r\n                    semantics,\r\n                    ssrcs\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return mediaSSRCs;\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if this SDP contains given SSRC.\r\n * @param ssrc the ssrc to check.\r\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\r\n */\r\nSDP.prototype.containsSSRC = function(ssrc) {\r\n    // FIXME this code is really strange - improve it if you can\r\n    const medias = this.getMediaSsrcMap();\r\n    let result = false;\r\n\r\n    Object.keys(medias).forEach(mediaindex => {\r\n        if (result) {\r\n            return;\r\n        }\r\n        if (medias[mediaindex].ssrcs[ssrc]) {\r\n            result = true;\r\n        }\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\n// add content's to a jingle element\r\nSDP.prototype.toJingle = function(elem, thecreator) {\r\n    // https://xmpp.org/extensions/xep-0338.html\r\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\r\n        const parts = line.split(' ');\r\n        const semantics = parts.shift().substr(8);\r\n\r\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\r\n            semantics });\r\n        for (let j = 0; j < parts.length; j++) {\r\n            elem.c('content', { name: parts[j] }).up();\r\n        }\r\n        elem.up();\r\n    });\r\n\r\n    for (let i = 0; i < this.media.length; i++) {\r\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\r\n\r\n        if (!(mline.media === 'audio'\r\n              || mline.media === 'video'\r\n              || mline.media === 'application')) {\r\n            continue; // eslint-disable-line no-continue\r\n        }\r\n\r\n        let ssrc;\r\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\r\n\r\n        if (assrcline) {\r\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\r\n        } else {\r\n            ssrc = false;\r\n        }\r\n\r\n        elem.c('content', { creator: thecreator,\r\n            name: mline.media });\r\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\r\n\r\n        if (amidline) {\r\n            // prefer identifier from a=mid if present\r\n            const mid = SDPUtil.parseMID(amidline);\r\n\r\n            elem.attrs({ name: mid });\r\n        }\r\n\r\n        if (mline.media === 'audio' || mline.media === 'video') {\r\n            elem.c('description',\r\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\r\n                    media: mline.media });\r\n            if (ssrc) {\r\n                elem.attrs({ ssrc });\r\n            }\r\n            for (let j = 0; j < mline.fmt.length; j++) {\r\n                const rtpmap\r\n                    = SDPUtil.findLine(\r\n                        this.media[i],\r\n                        `a=rtpmap:${mline.fmt[j]}`);\r\n\r\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\r\n\r\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\r\n                // value=bar/>\r\n                const afmtpline\r\n                    = SDPUtil.findLine(\r\n                        this.media[i],\r\n                        `a=fmtp:${mline.fmt[j]}`);\r\n\r\n                if (afmtpline) {\r\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    for (let k = 0; k < fmtpParameters.length; k++) {\r\n                        elem.c('parameter', fmtpParameters[k]).up();\r\n                    }\r\n                }\r\n\r\n                // XEP-0293 -- map a=rtcp-fb\r\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\r\n\r\n                elem.up();\r\n            }\r\n\r\n            if (ssrc) {\r\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\r\n\r\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\r\n                    elem.c('source', {\r\n                        ssrc: availableSsrc,\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n\r\n                    ssrcParameters.forEach(ssrcSdpLine => {\r\n                        // get everything after first space\r\n                        const idx = ssrcSdpLine.indexOf(' ');\r\n                        const kv = ssrcSdpLine.substr(idx + 1);\r\n\r\n                        elem.c('parameter');\r\n                        if (kv.indexOf(':') === -1) {\r\n                            elem.attrs({ name: kv });\r\n                        } else {\r\n                            const name = kv.split(':', 2)[0];\r\n\r\n                            elem.attrs({ name });\r\n\r\n                            let v = kv.split(':', 2)[1];\r\n\r\n                            v = SDPUtil.filterSpecialChars(v);\r\n                            elem.attrs({ value: v });\r\n                        }\r\n                        elem.up();\r\n                    });\r\n\r\n                    elem.up();\r\n                }\r\n\r\n                // XEP-0339 handle ssrc-group attributes\r\n                const ssrcGroupLines\r\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\r\n\r\n                ssrcGroupLines.forEach(line => {\r\n                    const idx = line.indexOf(' ');\r\n                    const semantics = line.substr(0, idx).substr(13);\r\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\r\n\r\n                    if (ssrcs.length) {\r\n                        elem.c('ssrc-group', { semantics,\r\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\r\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\r\n                        elem.up();\r\n                    }\r\n                });\r\n            }\r\n\r\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid');\r\n\r\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\r\n                // Map a line which looks like \"a=rid:2 send\" to just\r\n                // the rid (\"2\")\r\n                const rids = ridLines\r\n                    .map(ridLine => ridLine.split(':')[1])\r\n                    .map(ridInfo => ridInfo.split(' ')[0]);\r\n\r\n                rids.forEach(rid => {\r\n                    elem.c('source', {\r\n                        rid,\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n                    elem.up();\r\n                });\r\n                const unifiedSimulcast\r\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast');\r\n\r\n                if (unifiedSimulcast) {\r\n                    elem.c('rid-group', {\r\n                        semantics: 'SIM',\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n                    rids.forEach(rid => {\r\n                        elem.c('source', { rid }).up();\r\n                    });\r\n                    elem.up();\r\n                }\r\n            }\r\n\r\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\r\n                elem.c('rtcp-mux').up();\r\n            }\r\n\r\n            // XEP-0293 -- map a=rtcp-fb:*\r\n            this.rtcpFbToJingle(i, elem, '*');\r\n\r\n            // XEP-0294\r\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\r\n\r\n            for (let j = 0; j < extmapLines.length; j++) {\r\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\r\n\r\n                elem.c('rtp-hdrext', {\r\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\r\n                    uri: extmap.uri,\r\n                    id: extmap.value\r\n                });\r\n\r\n                // eslint-disable-next-line max-depth\r\n                if (extmap.hasOwnProperty('direction')) {\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    switch (extmap.direction) {\r\n                    case 'sendonly':\r\n                        elem.attrs({ senders: 'responder' });\r\n                        break;\r\n                    case 'recvonly':\r\n                        elem.attrs({ senders: 'initiator' });\r\n                        break;\r\n                    case 'sendrecv':\r\n                        elem.attrs({ senders: 'both' });\r\n                        break;\r\n                    case 'inactive':\r\n                        elem.attrs({ senders: 'none' });\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // TODO: handle params\r\n                elem.up();\r\n            }\r\n            elem.up(); // end of description\r\n        }\r\n\r\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\r\n        this.transportToJingle(i, elem);\r\n\r\n        const m = this.media[i];\r\n\r\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\r\n            elem.attrs({ senders: 'both' });\r\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\r\n            elem.attrs({ senders: 'initiator' });\r\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\r\n            elem.attrs({ senders: 'responder' });\r\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\r\n            elem.attrs({ senders: 'none' });\r\n        }\r\n\r\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\r\n        // The port is automatically set to 0 when bundle-only is used.\r\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\r\n            // estos hack to reject an m-line\r\n            elem.attrs({ senders: 'rejected' });\r\n        }\r\n        elem.up(); // end of content\r\n    }\r\n    elem.up();\r\n\r\n    return elem;\r\n};\r\n\r\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\r\n    elem.c('transport');\r\n\r\n    // XEP-0343 DTLS/SCTP\r\n    const sctpmap\r\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\r\n\r\n    if (sctpmap) {\r\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\r\n\r\n        elem.c('sctpmap', {\r\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\r\n            number: sctpAttrs[0], /* SCTP port */\r\n            protocol: sctpAttrs[1] /* protocol */\r\n        });\r\n\r\n        // Optional stream count attribute\r\n        if (sctpAttrs.length > 2) {\r\n            elem.attrs({ streams: sctpAttrs[2] });\r\n        }\r\n        elem.up();\r\n    }\r\n\r\n    // XEP-0320\r\n    const fingerprints\r\n        = SDPUtil.findLines(\r\n            this.media[mediaindex],\r\n            'a=fingerprint:',\r\n            this.session);\r\n\r\n    fingerprints.forEach(line => {\r\n        const fingerprint = SDPUtil.parseFingerprint(line);\r\n\r\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\r\n        elem.c('fingerprint').t(fingerprint.fingerprint);\r\n        delete fingerprint.fingerprint;\r\n\r\n        const setupLine\r\n            = SDPUtil.findLine(\r\n                this.media[mediaindex],\r\n                'a=setup:',\r\n                this.session);\r\n\r\n        if (setupLine) {\r\n            fingerprint.setup = setupLine.substr(8);\r\n        }\r\n        elem.attrs(fingerprint);\r\n        elem.up(); // end of fingerprint\r\n    });\r\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\r\n\r\n    if (iceParameters) {\r\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n        elem.attrs(iceParameters);\r\n\r\n        // XEP-0176\r\n        const candidateLines\r\n            = SDPUtil.findLines(\r\n                this.media[mediaindex],\r\n                'a=candidate:',\r\n                this.session);\r\n\r\n        candidateLines.forEach(line => { // add any a=candidate lines\r\n            const candidate = SDPUtil.candidateToJingle(line);\r\n\r\n            if (this.failICE) {\r\n                candidate.ip = '1.1.1.1';\r\n            }\r\n            const protocol\r\n                = candidate && typeof candidate.protocol === 'string'\r\n                    ? candidate.protocol.toLowerCase()\r\n                    : '';\r\n\r\n            if ((this.removeTcpCandidates\r\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\r\n                || (this.removeUdpCandidates && protocol === 'udp')) {\r\n                return;\r\n            }\r\n            elem.c('candidate', candidate).up();\r\n        });\r\n    }\r\n    elem.up(); // end of transport\r\n};\r\n\r\n// XEP-0293\r\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\r\n    const lines\r\n        = SDPUtil.findLines(\r\n            this.media[mediaindex],\r\n            `a=rtcp-fb:${payloadtype}`);\r\n\r\n    lines.forEach(line => {\r\n        const feedback = SDPUtil.parseRTCPFB(line);\r\n\r\n        if (feedback.type === 'trr-int') {\r\n            elem.c('rtcp-fb-trr-int', {\r\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\r\n                value: feedback.params[0]\r\n            });\r\n            elem.up();\r\n        } else {\r\n            elem.c('rtcp-fb', {\r\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\r\n                type: feedback.type\r\n            });\r\n            if (feedback.params.length > 0) {\r\n                elem.attrs({ 'subtype': feedback.params[0] });\r\n            }\r\n            elem.up();\r\n        }\r\n    });\r\n};\r\n\r\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\r\n    let sdp = '';\r\n    const feedbackElementTrrInt\r\n        = elem.find(\r\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\r\n\r\n    if (feedbackElementTrrInt.length) {\r\n        sdp += 'a=rtcp-fb:* trr-int ';\r\n        if (feedbackElementTrrInt.attr('value')) {\r\n            sdp += feedbackElementTrrInt.attr('value');\r\n        } else {\r\n            sdp += '0';\r\n        }\r\n        sdp += '\\r\\n';\r\n    }\r\n\r\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\r\n\r\n    feedbackElements.each((_, fb) => {\r\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\r\n        if (fb.hasAttribute('subtype')) {\r\n            sdp += ` ${fb.getAttribute('subtype')}`;\r\n        }\r\n        sdp += '\\r\\n';\r\n    });\r\n\r\n    return sdp;\r\n};\r\n\r\n// construct an SDP from a jingle stanza\r\nSDP.prototype.fromJingle = function(jingle) {\r\n    const sessionId = Date.now();\r\n\r\n    // Use a unique session id for every TPC.\r\n    this.raw = 'v=0\\r\\n'\r\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\r\n        + 's=-\\r\\n'\r\n        + 't=0 0\\r\\n';\r\n\r\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\r\n    // #section-8\r\n    const groups\r\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\r\n\r\n    if (groups.length) {\r\n        groups.each((idx, group) => {\r\n            const contents\r\n                = $(group)\r\n                    .find('>content')\r\n                    .map((_, content) => content.getAttribute('name'))\r\n                    .get();\r\n\r\n            if (contents.length > 0) {\r\n                this.raw\r\n                    += `a=group:${\r\n                        group.getAttribute('semantics')\r\n                            || group.getAttribute('type')} ${\r\n                        contents.join(' ')}\\r\\n`;\r\n            }\r\n        });\r\n    }\r\n\r\n    this.session = this.raw;\r\n    jingle.find('>content').each((_, content) => {\r\n        const m = this.jingle2media($(content));\r\n\r\n        this.media.push(m);\r\n    });\r\n\r\n    // reconstruct msid-semantic -- apparently not necessary\r\n    /*\r\n     var msid = SDPUtil.parseSSRC(this.raw);\r\n     if (msid.hasOwnProperty('mslabel')) {\r\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\r\n     }\r\n     */\r\n\r\n    this.raw = this.session + this.media.join('');\r\n};\r\n\r\n// translate a jingle content element into an an SDP media part\r\nSDP.prototype.jingle2media = function(content) {\r\n    const desc = content.find('>description');\r\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\r\n    let sdp = '';\r\n    const sctp = transport.find(\r\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\r\n\r\n    const media = { media: desc.attr('media') };\r\n\r\n    media.port = '1';\r\n    if (content.attr('senders') === 'rejected') {\r\n        // estos hack to reject an m-line.\r\n        media.port = '0';\r\n    }\r\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\r\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\r\n    } else {\r\n        media.proto = 'RTP/AVPF';\r\n    }\r\n    if (sctp.length) {\r\n        sdp += `m=application ${media.port} DTLS/SCTP ${\r\n            sctp.attr('number')}\\r\\n`;\r\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\r\n\r\n        const streamCount = sctp.attr('streams');\r\n\r\n        if (streamCount) {\r\n            sdp += ` ${streamCount}\\r\\n`;\r\n        } else {\r\n            sdp += '\\r\\n';\r\n        }\r\n    } else {\r\n        media.fmt\r\n            = desc\r\n                .find('>payload-type')\r\n                .map((_, payloadType) => payloadType.getAttribute('id'))\r\n                .get();\r\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\r\n    }\r\n\r\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\r\n    if (!sctp.length) {\r\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\r\n    }\r\n\r\n    // XEP-0176 ICE parameters\r\n    if (transport.length) {\r\n        if (transport.attr('ufrag')) {\r\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\r\n        }\r\n        if (transport.attr('pwd')) {\r\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\r\n        }\r\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\r\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\r\n            sdp += ` ${$(fingerprint).text()}`;\r\n            sdp += '\\r\\n';\r\n            if (fingerprint.hasAttribute('setup')) {\r\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\r\n            }\r\n        });\r\n    }\r\n\r\n    // XEP-0176 ICE candidates\r\n    transport.find('>candidate')\r\n        .each((_, candidate) => {\r\n            let protocol = candidate.getAttribute('protocol');\r\n\r\n            protocol\r\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\r\n\r\n            if ((this.removeTcpCandidates\r\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\r\n                || (this.removeUdpCandidates && protocol === 'udp')) {\r\n                return;\r\n            } else if (this.failICE) {\r\n                candidate.setAttribute('ip', '1.1.1.1');\r\n            }\r\n\r\n            sdp += SDPUtil.candidateFromJingle(candidate);\r\n        });\r\n\r\n    switch (content.attr('senders')) {\r\n    case 'initiator':\r\n        sdp += 'a=sendonly\\r\\n';\r\n        break;\r\n    case 'responder':\r\n        sdp += 'a=recvonly\\r\\n';\r\n        break;\r\n    case 'none':\r\n        sdp += 'a=inactive\\r\\n';\r\n        break;\r\n    case 'both':\r\n        sdp += 'a=sendrecv\\r\\n';\r\n        break;\r\n    }\r\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\r\n\r\n    // <description><rtcp-mux/></description>\r\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\r\n    // though\r\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\r\n    if (desc.find('>rtcp-mux').length) {\r\n        sdp += 'a=rtcp-mux\\r\\n';\r\n    }\r\n\r\n    desc.find('>payload-type').each((_, payloadType) => {\r\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\r\n        if ($(payloadType).find('>parameter').length) {\r\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\r\n            sdp\r\n                += $(payloadType)\r\n                    .find('>parameter')\r\n                    .map((__, parameter) => {\r\n                        const name = parameter.getAttribute('name');\r\n\r\n                        return (\r\n                            (name ? `${name}=` : '')\r\n                                + parameter.getAttribute('value'));\r\n                    })\r\n                    .get()\r\n                    .join('; ');\r\n            sdp += '\\r\\n';\r\n        }\r\n\r\n        // xep-0293\r\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\r\n    });\r\n\r\n    // xep-0293\r\n    sdp += this.rtcpFbFromJingle(desc, '*');\r\n\r\n    // xep-0294\r\n    desc\r\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\r\n        .each((_, hdrExt) => {\r\n            sdp\r\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\r\n                    hdrExt.getAttribute('uri')}\\r\\n`;\r\n        });\r\n\r\n    // XEP-0339 handle ssrc-group attributes\r\n    desc\r\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n        .each((_, ssrcGroup) => {\r\n            const semantics = ssrcGroup.getAttribute('semantics');\r\n            const ssrcs\r\n                = $(ssrcGroup)\r\n                    .find('>source')\r\n                    .map((__, source) => source.getAttribute('ssrc'))\r\n                    .get();\r\n\r\n            if (ssrcs.length) {\r\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\r\n            }\r\n        });\r\n\r\n    // XEP-0339 handle source attributes\r\n    desc\r\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n        .each((_, source) => {\r\n            const ssrc = source.getAttribute('ssrc');\r\n\r\n            $(source)\r\n                .find('>parameter')\r\n                .each((__, parameter) => {\r\n                    const name = parameter.getAttribute('name');\r\n                    let value = parameter.getAttribute('value');\r\n\r\n                    value = SDPUtil.filterSpecialChars(value);\r\n                    sdp += `a=ssrc:${ssrc} ${name}`;\r\n                    if (value && value.length) {\r\n                        sdp += `:${value}`;\r\n                    }\r\n                    sdp += '\\r\\n';\r\n                });\r\n        });\r\n\r\n    return sdp;\r\n};\r\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        // Edge is currenly supported only on desktop and android.\n        if (userAgent.match(/Edg(A?)/)) {\n            // Compare the underlying chromium version.\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        return JSON.stringify(this._storage);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @returns {string} - The serialized content.\n     */\n    serialize() {\n        if (this.isLocalStorageDisabled) {\n            return this._storage.serialize();\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            localStorageContent[key] = this._storage.getItem(key);\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","/**\r\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\r\n * versa.\r\n * @event\r\n * @type {boolean} - true when service has changed to active false otherwise.\r\n */\r\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\r\n\r\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\r\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\r\n * it starts receiving audio levels !== 0 after being in a state of no audio.\r\n * @event\r\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\r\n */\r\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\r\n\r\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\r\n * for a period of time, meaning that the device is either broken or hardware/software muted.\r\n * @event\r\n * @type {void}\r\n */\r\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\r\n\r\n/**\r\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\r\n *  @event\r\n *  @type {Object}\r\n */\r\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\r\n\r\n/**\r\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\r\n * The generated objects are of type Array<Object>, one score for each monitored device.\r\n * @event VAD_REPORT_PUBLISHED\r\n * @type Array<Object> with the following structure:\r\n * @property {Date} timestamp - Timestamp at which the compute took place.\r\n * @property {number} avgVAD - Average VAD score over monitored period of time.\r\n * @property {string} deviceId - Associate local audio device ID.\r\n */\r\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\r\n\r\n/**\r\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\r\n *\r\n * @event\r\n * @type {Object}\r\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\r\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\r\n * @property {string} deviceId - Device id of the associated track.\r\n */\r\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\r\n\r\n/**\r\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\r\n *\r\n *  @event\r\n *  @type {Object}\r\n */\r\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\r\n","/**\r\n * Notifies about audio level in RTP statistics by SSRC.\r\n *\r\n * @param ssrc - The synchronization source identifier (SSRC) of the\r\n * endpoint/participant whose audio level is being reported.\r\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\r\n * RTP statistics.\r\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\r\n * local endpoint/participant; otherwise, <tt>false</tt>.\r\n */\r\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\r\n\r\n/**\r\n * An event fired just before the statistics module gets disposes and it's\r\n * the last chance to submit some logs that will end up in stats services like\r\n * CallStats (if enabled).\r\n */\r\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\r\n\r\n/**\r\n * An event carrying all statistics by ssrc.\r\n */\r\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\r\n\r\n/**\r\n * An event carrying connection statistics.\r\n *\r\n * @param {object} connectionStats - The connection statistics carried by the\r\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\r\n * <tt>resolution</tt>, and <tt>transport</tt>.\r\n */\r\nexport const CONNECTION_STATS = 'statistics.connectionstats';\r\n\r\n/**\r\n * An event carrying performance stats.\r\n */\r\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\r\n","/**\r\n * Status that video SIP GW service is available.\r\n * @type {string}\r\n */\r\nexport const STATUS_AVAILABLE = 'available';\r\n\r\n/**\r\n * Status that video SIP GW service is not available.\r\n * @type {string}\r\n */\r\nexport const STATUS_UNDEFINED = 'undefined';\r\n\r\n/**\r\n * Status that video SIP GW service is available but there are no free nodes\r\n * at the moment to serve new requests.\r\n * @type {string}\r\n */\r\nexport const STATUS_BUSY = 'busy';\r\n\r\n/**\r\n * Video SIP GW session state, currently running.\r\n * @type {string}\r\n */\r\nexport const STATE_ON = 'on';\r\n\r\n/**\r\n * Video SIP GW session state, currently stopped and not running.\r\n * @type {string}\r\n */\r\nexport const STATE_OFF = 'off';\r\n\r\n/**\r\n * Video SIP GW session state, currently is starting.\r\n * @type {string}\r\n */\r\nexport const STATE_PENDING = 'pending';\r\n\r\n/**\r\n * Video SIP GW session state, has observed some issues and is retrying at the\r\n * moment.\r\n * @type {string}\r\n */\r\nexport const STATE_RETRYING = 'retrying';\r\n\r\n/**\r\n * Video SIP GW session state, tried to start but it failed.\r\n * @type {string}\r\n */\r\nexport const STATE_FAILED = 'failed';\r\n\r\n/**\r\n * Error on trying to create video SIP GW session in conference where\r\n * there is no room connection (hasn't joined or has left the room).\r\n * @type {string}\r\n */\r\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\r\n\r\n/**\r\n * Error on trying to create video SIP GW session with address for which\r\n * there is an already created session.\r\n * @type {string}\r\n */\r\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\r\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\r\n * The events for the connection.\r\n */\r\n\r\n/**\r\n * Indicates that the connection has been disconnected. The event provides\r\n * the following parameters to its listeners:\r\n *\r\n * @param msg {string} a message associated with the disconnect such as the\r\n * last (known) error message\r\n */\r\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\r\n\r\n/**\r\n * Indicates that the connection has been established. The event provides\r\n * the following parameters to its listeners:\r\n *\r\n * @param id {string} the ID of the local endpoint/participant/peer (within\r\n * the context of the established connection)\r\n */\r\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\r\n\r\n/**\r\n * Indicates that the connection has been failed for some reason. The event\r\n * provides the following parameters to its listeners:\r\n *\r\n * @param errType {JitsiConnectionErrors} the type of error associated with\r\n * the failure\r\n * @param errReason {string} the error (message) associated with the failure\r\n * @param credentials {object} the credentials used to connect (if any)\r\n * @param errReasonDetails {object} an optional object with details about\r\n * the error, like shard moving, suspending. Used for analytics purposes.\r\n */\r\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\r\n\r\n/**\r\n * Indicates that the performed action cannot be executed because the\r\n * connection is not in the correct state(connected, disconnected, etc.)\r\n */\r\nexport const WRONG_STATE = 'connection.wrongState';\r\n\r\n/**\r\n * Indicates that the display name is required over this connection and need to be supplied when\r\n * joining the room.\r\n * There are cases like lobby room where display name is required.\r\n */\r\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $msg, Strophe } from 'strophe.js';\r\nimport 'strophejs-plugin-disco';\r\n\r\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\r\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport browser from '../browser';\r\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nimport Caps from './Caps';\r\nimport XmppConnection from './XmppConnection';\r\nimport MucConnectionPlugin from './strophe.emuc';\r\nimport JingleConnectionPlugin from './strophe.jingle';\r\nimport initStropheLogger from './strophe.logger';\r\nimport RayoConnectionPlugin from './strophe.rayo';\r\nimport initStropheUtil from './strophe.util';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Creates XMPP connection.\r\n *\r\n * @param {Object} options\r\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\r\n * Prosody).\r\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\r\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\r\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\r\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\r\n * @returns {XmppConnection}\r\n */\r\nfunction createConnection({ enableWebsocketResume, serviceUrl = '/http-bind', token, websocketKeepAlive, xmppPing }) {\r\n    // Append token as URL param\r\n    if (token) {\r\n        // eslint-disable-next-line no-param-reassign\r\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\r\n    }\r\n\r\n    return new XmppConnection({\r\n        enableWebsocketResume,\r\n        serviceUrl,\r\n        websocketKeepAlive,\r\n        xmppPing\r\n    });\r\n}\r\n\r\n/**\r\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\r\n * {@link XmppConnection} wrapper.\r\n *\r\n * @returns {void}\r\n */\r\nfunction initStropheNativePlugins() {\r\n    initStropheUtil();\r\n    initStropheLogger();\r\n}\r\n\r\n// FIXME: remove once we have a default config template. -saghul\r\n/**\r\n * A list of ice servers to use by default for P2P.\r\n */\r\nexport const DEFAULT_STUN_SERVERS = [\r\n    { urls: 'stun:stun.l.google.com:19302' },\r\n    { urls: 'stun:stun1.l.google.com:19302' },\r\n    { urls: 'stun:stun2.l.google.com:19302' }\r\n];\r\n\r\n/**\r\n * The name of the field used to recognize a chat message as carrying a JSON\r\n * payload from another endpoint.\r\n * If the json-message of a chat message contains a valid JSON object, and\r\n * the JSON has this key, then it is a valid json-message to be sent.\r\n */\r\nexport const JITSI_MEET_MUC_TYPE = 'type';\r\n\r\n/**\r\n *\r\n */\r\nexport default class XMPP extends Listenable {\r\n    /**\r\n     * FIXME describe all options\r\n     * @param {Object} options\r\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\r\n     * connection with the server.\r\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\r\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\r\n     * module try to resume the session in case the Websocket connection breaks.\r\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\r\n     * constructor for more details.\r\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\r\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\r\n     * @param token\r\n     */\r\n    constructor(options, token) {\r\n        super();\r\n        this.connection = null;\r\n        this.disconnectInProgress = false;\r\n        this.connectionTimes = {};\r\n        this.options = options;\r\n        this.token = token;\r\n        this.authenticatedUser = false;\r\n\r\n        initStropheNativePlugins();\r\n\r\n        this.connection = createConnection({\r\n            enableWebsocketResume: options.enableWebsocketResume,\r\n\r\n            // FIXME remove deprecated bosh option at some point\r\n            serviceUrl: options.serviceUrl || options.bosh,\r\n            token,\r\n            websocketKeepAlive: options.websocketKeepAlive,\r\n            xmppPing: options.xmppPing\r\n        });\r\n\r\n        this._initStrophePlugins();\r\n\r\n        this.caps = new Caps(this.connection, this.options.clientNode);\r\n\r\n        // Initialize features advertised in disco-info\r\n        this.initFeaturesList();\r\n\r\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\r\n        // sounds like they would want that. A problem for them though may be if\r\n        // they wanted to utilize the connected connection in an unload handler\r\n        // of their own. However, it should be fairly easy for them to do that\r\n        // by registering their unload handler before us.\r\n        $(window).on('beforeunload unload', ev => {\r\n            this.disconnect(ev).catch(() => {\r\n                // ignore errors in order to not brake the unload.\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the list of feature advertised through the disco-info\r\n     * mechanism.\r\n     */\r\n    initFeaturesList() {\r\n        // http://xmpp.org/extensions/xep-0167.html#support\r\n        // http://xmpp.org/extensions/xep-0176.html#support\r\n        this.caps.addFeature('urn:xmpp:jingle:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\r\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\r\n\r\n        // Disable RTX on Firefox because of https://bugzilla.mozilla.org/show_bug.cgi?id=1668028.\r\n        if (!(this.options.disableRtx || browser.isFirefox())) {\r\n            this.caps.addFeature('urn:ietf:rfc:4588');\r\n        }\r\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\r\n            this.caps.addFeature('http://jitsi.org/opus-red');\r\n        }\r\n\r\n        // this is dealt with by SDP O/A so we don't need to announce this\r\n        // XEP-0293\r\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\r\n        // XEP-0294\r\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\r\n\r\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\r\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\r\n\r\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\r\n\r\n        // Enable Lipsync ?\r\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\r\n            logger.info('Lip-sync enabled !');\r\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\r\n        }\r\n\r\n        if (this.connection.rayo) {\r\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\r\n        }\r\n\r\n        if (E2EEncryption.isSupported(this.options)) {\r\n            this.caps.addFeature('https://jitsi.org/meet/e2ee');\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getConnection() {\r\n        return this.connection;\r\n    }\r\n\r\n    /**\r\n     * Receive connection status changes and handles them.\r\n     *\r\n     * @param {Object} credentials\r\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\r\n     * connect method. For example, 'user@xmpp.com'.\r\n     * @param {string} credentials.password - The password passed to the connect\r\n     * method.\r\n     * @param {string} status - One of Strophe's connection status strings.\r\n     * @param {string} [msg] - The connection error message provided by Strophe.\r\n     */\r\n    connectionHandler(credentials = {}, status, msg) {\r\n        const now = window.performance.now();\r\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\r\n\r\n        this.connectionTimes[statusStr] = now;\r\n        logger.log(\r\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\r\n            now);\r\n\r\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\r\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\r\n            this.connection.jingle.getStunAndTurnCredentials();\r\n\r\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\r\n\r\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\r\n            this._resetState();\r\n\r\n            // Schedule ping ?\r\n            const pingJid = this.connection.domain;\r\n\r\n            // FIXME no need to do it again on stream resume\r\n            this.caps.getFeaturesAndIdentities(pingJid)\r\n                .then(({ features, identities }) => {\r\n                    if (!features.has(Strophe.NS.PING)) {\r\n                        logger.error(\r\n                            `Ping NOT supported by ${pingJid} - please enable ping in your XMPP server config`);\r\n                    }\r\n\r\n                    // check for speakerstats\r\n                    identities.forEach(identity => {\r\n                        if (identity.type === 'speakerstats') {\r\n                            this.speakerStatsComponentAddress = identity.name;\r\n                        }\r\n\r\n                        if (identity.type === 'conference_duration') {\r\n                            this.conferenceDurationComponentAddress = identity.name;\r\n                        }\r\n\r\n                        if (identity.type === 'lobbyrooms') {\r\n                            this.lobbySupported = true;\r\n                            identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\r\n                                .then(({ features: f }) => {\r\n                                    f.forEach(fr => {\r\n                                        if (fr.endsWith('#displayname_required')) {\r\n                                            this.eventEmitter.emit(\r\n                                                JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\r\n                                        }\r\n                                    });\r\n                                })\r\n                                .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\r\n                        }\r\n                    });\r\n\r\n                    if (this.speakerStatsComponentAddress\r\n                        || this.conferenceDurationComponentAddress) {\r\n                        this.connection.addHandler(\r\n                            this._onPrivateMessage.bind(this), null,\r\n                            'message', null, null);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    const errmsg = 'Feature discovery error';\r\n\r\n                    GlobalOnErrorHandler.callErrorHandler(\r\n                        new Error(`${errmsg}: ${error}`));\r\n                    logger.error(errmsg, error);\r\n                });\r\n\r\n            if (credentials.password) {\r\n                this.authenticatedUser = true;\r\n            }\r\n            if (this.connection && this.connection.connected\r\n                && Strophe.getResourceFromJid(this.connection.jid)) {\r\n                // .connected is true while connecting?\r\n                // this.connection.send($pres());\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\r\n                    Strophe.getResourceFromJid(this.connection.jid));\r\n            }\r\n        } else if (status === Strophe.Status.CONNFAIL) {\r\n            if (msg === 'x-strophe-bad-non-anon-jid') {\r\n                this.anonymousConnectionFailed = true;\r\n            } else {\r\n                this.connectionFailed = true;\r\n            }\r\n            this.lastErrorMsg = msg;\r\n            if (msg === 'giving-up') {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\r\n            }\r\n        } else if (status === Strophe.Status.ERROR) {\r\n            this.lastErrorMsg = msg;\r\n        } else if (status === Strophe.Status.DISCONNECTED) {\r\n            // Stop ping interval\r\n            this.connection.ping.stopInterval();\r\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\r\n            const errMsg = msg || this.lastErrorMsg;\r\n\r\n            if (this.anonymousConnectionFailed) {\r\n                // prompt user for username and password\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\r\n            } else if (this.connectionFailed) {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.OTHER_ERROR,\r\n                    errMsg,\r\n                    undefined, /* credentials */\r\n                    this._getConnectionFailedReasonDetails());\r\n            } else if (wasIntentionalDisconnect) {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\r\n            } else {\r\n                // XXX if Strophe drops the connection while not being asked to,\r\n                // it means that most likely some serious error has occurred.\r\n                // One currently known case is when a BOSH request fails for\r\n                // more than 4 times. The connection is dropped without\r\n                // supplying a reason(error message/event) through the API.\r\n                logger.error('XMPP connection dropped!');\r\n\r\n                // XXX if the last request error is within 5xx range it means it\r\n                // was a server failure\r\n                const lastErrorStatus = Strophe.getLastErrorStatus();\r\n\r\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConnectionEvents.CONNECTION_FAILED,\r\n                        JitsiConnectionErrors.SERVER_ERROR,\r\n                        errMsg || 'server-error',\r\n                        /* credentials */ undefined,\r\n                        this._getConnectionFailedReasonDetails());\r\n                } else {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConnectionEvents.CONNECTION_FAILED,\r\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\r\n                        errMsg || 'connection-dropped-error',\r\n                        /* credentials */ undefined,\r\n                        this._getConnectionFailedReasonDetails());\r\n                }\r\n            }\r\n        } else if (status === Strophe.Status.AUTHFAIL) {\r\n            // wrong password or username, prompt user\r\n            this.eventEmitter.emit(\r\n                JitsiConnectionEvents.CONNECTION_FAILED,\r\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\r\n                msg,\r\n                credentials);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     */\r\n    _connect(jid, password) {\r\n        // connection.connect() starts the connection process.\r\n        //\r\n        // As the connection process proceeds, the user supplied callback will\r\n        // be triggered multiple times with status updates. The callback should\r\n        // take two arguments - the status code and the error condition.\r\n        //\r\n        // The status code will be one of the values in the Strophe.Status\r\n        // constants. The error condition will be one of the conditions defined\r\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\r\n        //\r\n        // The Parameters wait, hold and route are optional and only relevant\r\n        // for BOSH connections. Please see XEP 124 for a more detailed\r\n        // explanation of the optional parameters.\r\n        //\r\n        // Connection status constants for use by the connection handler\r\n        // callback.\r\n        //\r\n        //  Status.ERROR - An error has occurred (websockets specific)\r\n        //  Status.CONNECTING - The connection is currently being made\r\n        //  Status.CONNFAIL - The connection attempt failed\r\n        //  Status.AUTHENTICATING - The connection is authenticating\r\n        //  Status.AUTHFAIL - The authentication attempt failed\r\n        //  Status.CONNECTED - The connection has succeeded\r\n        //  Status.DISCONNECTED - The connection has been terminated\r\n        //  Status.DISCONNECTING - The connection is currently being terminated\r\n        //  Status.ATTACHED - The connection has been attached\r\n\r\n        this._resetState();\r\n        this.connection.connect(\r\n            jid,\r\n            password,\r\n            this.connectionHandler.bind(this, {\r\n                jid,\r\n                password\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Attach to existing connection. Can be used for optimizations. For\r\n     * example: if the connection is created on the server we can attach to it\r\n     * and start using it.\r\n     *\r\n     * @param options {object} connecting options - rid, sid, jid and password.\r\n     */\r\n    attach(options) {\r\n        this._resetState();\r\n        const now = this.connectionTimes.attaching = window.performance.now();\r\n\r\n        logger.log('(TIME) Strophe Attaching:\\t', now);\r\n        this.connection.attach(options.jid, options.sid,\r\n            parseInt(options.rid, 10) + 1,\r\n            this.connectionHandler.bind(this, {\r\n                jid: options.jid,\r\n                password: options.password\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Resets any state/flag before starting a new connection.\r\n     * @private\r\n     */\r\n    _resetState() {\r\n        this.anonymousConnectionFailed = false;\r\n        this.connectionFailed = false;\r\n        this.lastErrorMsg = undefined;\r\n        this.disconnectInProgress = undefined;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     */\r\n    connect(jid, password) {\r\n        if (!jid) {\r\n            const { anonymousdomain, domain } = this.options.hosts;\r\n            let configDomain = anonymousdomain || domain;\r\n\r\n            // Force authenticated domain if room is appended with '?login=true'\r\n            // or if we're joining with the token\r\n\r\n            // FIXME Do not rely on window.location because (1) React Native\r\n            // does not have a window.location by default and (2) here we cannot\r\n            // know for sure that query/search has not be stripped from\r\n            // window.location by the time the following executes.\r\n            const { location } = window;\r\n\r\n            if (anonymousdomain) {\r\n                const search = location && location.search;\r\n\r\n                if ((search && search.indexOf('login=true') !== -1)\r\n                        || this.token) {\r\n                    configDomain = domain;\r\n                }\r\n            }\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            jid = configDomain || (location && location.hostname);\r\n        }\r\n\r\n        return this._connect(jid, password);\r\n    }\r\n\r\n    /**\r\n     * Joins or creates a muc with the provided jid, created from the passed\r\n     * in room name and muc host and onCreateResource result.\r\n     *\r\n     * @param {string} roomName - The name of the muc to join.\r\n     * @param {Object} options - Configuration for how to join the muc.\r\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\r\n     * is to be added to the jid.\r\n     * @returns {Promise} Resolves with an instance of a strophe muc.\r\n     */\r\n    createRoom(roomName, options, onCreateResource) {\r\n        // There are cases (when using subdomain) where muc can hold an uppercase part\r\n        let roomjid = `${roomName}@${options.customDomain\r\n            ? options.customDomain : this.options.hosts.muc.toLowerCase()}/`;\r\n\r\n        const mucNickname = onCreateResource\r\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\r\n            : RandomUtil.randomHexString(8).toLowerCase();\r\n\r\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\r\n        roomjid += mucNickname;\r\n\r\n        return this.connection.emuc.createRoom(roomjid, null, options);\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the participant associated with the Strophe connection.\r\n     *\r\n     * @returns {string} The jid of the participant.\r\n     */\r\n    getJid() {\r\n        return this.connection.jid;\r\n    }\r\n\r\n    /**\r\n     * Returns the logs from strophe.jingle.\r\n     * @returns {Object}\r\n     */\r\n    getJingleLog() {\r\n        const jingle = this.connection.jingle;\r\n\r\n\r\n        return jingle ? jingle.getLog() : {};\r\n    }\r\n\r\n    /**\r\n     * Returns the logs from strophe.\r\n     */\r\n    getXmppLog() {\r\n        return (this.connection.logger || {}).log || null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    dial(...args) {\r\n        this.connection.rayo.dial(...args);\r\n    }\r\n\r\n    /**\r\n     * Pings the server.\r\n     * @param timeout how many ms before a timeout should occur.\r\n     * @returns {Promise} resolved on ping success and reject on an error or\r\n     * a timeout.\r\n     */\r\n    ping(timeout) {\r\n        return new Promise((resolve, reject) => {\r\n            this.connection.ping\r\n                    .ping(this.connection.domain, resolve, reject, timeout);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getSessions() {\r\n        return this.connection.jingle.sessions;\r\n    }\r\n\r\n    /**\r\n     * Disconnects this from the XMPP server (if this is connected).\r\n     *\r\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\r\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\r\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\r\n     */\r\n    disconnect(ev) {\r\n        if (this.disconnectInProgress) {\r\n            return this.disconnectInProgress;\r\n        } else if (!this.connection) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this.disconnectInProgress = new Promise(resolve => {\r\n            const disconnectListener = (credentials, status) => {\r\n                if (status === Strophe.Status.DISCONNECTED) {\r\n                    resolve();\r\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\r\n                }\r\n            };\r\n\r\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\r\n        });\r\n\r\n        this._cleanupXmppConnection(ev);\r\n\r\n        return this.disconnectInProgress;\r\n    }\r\n\r\n    /**\r\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\r\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\r\n     *\r\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\r\n     * (e.g. beforeunload, unload).\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _cleanupXmppConnection(ev) {\r\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\r\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\r\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\r\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\r\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\r\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\r\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\r\n        // possible.\r\n        !this.connection.isUsingWebSocket && this.connection.flush();\r\n\r\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\r\n            const evType = ev.type;\r\n\r\n            if (evType === 'beforeunload' || evType === 'unload') {\r\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\r\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\r\n                // depending on whether we want to run with it for some time.\r\n                this.connection.options.sync = true;\r\n\r\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\r\n                if (this.connection.sendUnavailableBeacon()) {\r\n\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.connection.disconnect();\r\n\r\n        if (this.connection.options.sync !== true) {\r\n            this.connection.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    _initStrophePlugins() {\r\n        const iceConfig = {\r\n            jvb: { iceServers: [ ] },\r\n            p2p: { iceServers: [ ] }\r\n        };\r\n\r\n        const p2pStunServers = (this.options.p2p\r\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\r\n\r\n        if (Array.isArray(p2pStunServers)) {\r\n            logger.info('P2P STUN servers: ', p2pStunServers);\r\n            iceConfig.p2p.iceServers = p2pStunServers;\r\n        }\r\n\r\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\r\n            logger.info('P2P ICE transport policy: ',\r\n                this.options.p2p.iceTransportPolicy);\r\n\r\n            iceConfig.p2p.iceTransportPolicy\r\n                = this.options.p2p.iceTransportPolicy;\r\n        }\r\n\r\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\r\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\r\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\r\n    }\r\n\r\n    /**\r\n     * Returns details about connection failure. Shard change or is it after\r\n     * suspend.\r\n     * @returns {object} contains details about a connection failure.\r\n     * @private\r\n     */\r\n    _getConnectionFailedReasonDetails() {\r\n        const details = {};\r\n\r\n        // check for moving between shard if information is available\r\n        if (this.options.deploymentInfo\r\n            && this.options.deploymentInfo.shard\r\n            && this.connection.lastResponseHeaders) {\r\n\r\n            // split headers by line\r\n            const headersArr = this.connection.lastResponseHeaders\r\n                .trim().split(/[\\r\\n]+/);\r\n            const headers = {};\r\n\r\n            headersArr.forEach(line => {\r\n                const parts = line.split(': ');\r\n                const header = parts.shift();\r\n                const value = parts.join(': ');\r\n\r\n                headers[header] = value;\r\n            });\r\n\r\n            /* eslint-disable camelcase */\r\n            details.shard_changed\r\n                = this.options.deploymentInfo.shard\r\n                    !== headers['x-jitsi-shard'];\r\n            /* eslint-enable camelcase */\r\n        }\r\n\r\n        /* eslint-disable camelcase */\r\n        // check for possible suspend\r\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\r\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\r\n        /* eslint-enable camelcase */\r\n\r\n        return details;\r\n    }\r\n\r\n    /**\r\n     * Notifies speaker stats component if available that we are the new\r\n     * dominant speaker in the conference.\r\n     * @param {String} roomJid - The room jid where the speaker event occurred.\r\n     */\r\n    sendDominantSpeakerEvent(roomJid) {\r\n        // no speaker stats component advertised\r\n        if (!this.speakerStatsComponentAddress || !roomJid) {\r\n            return;\r\n        }\r\n\r\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\r\n\r\n        msg.c('speakerstats', {\r\n            xmlns: 'http://jitsi.org/jitmeet',\r\n            room: roomJid })\r\n            .up();\r\n\r\n        this.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\r\n     * parsing it and checking if it has a field called 'type'.\r\n     *\r\n     * @param {string} jsonString check if this string is a valid json string\r\n     * and contains the special structure.\r\n     * @returns {boolean, object} if given object is a valid JSON string, return\r\n     * the json object. Otherwise, returns false.\r\n     */\r\n    tryParseJSONAndVerify(jsonString) {\r\n        try {\r\n            const json = JSON.parse(jsonString);\r\n\r\n            // Handle non-exception-throwing cases:\r\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\r\n            // hence the type-checking,\r\n            // but... JSON.parse(null) returns null, and\r\n            // typeof null === \"object\",\r\n            // so we must check for that, too.\r\n            // Thankfully, null is falsey, so this suffices:\r\n            if (json && typeof json === 'object') {\r\n                const type = json[JITSI_MEET_MUC_TYPE];\r\n\r\n                if (typeof type !== 'undefined') {\r\n                    return json;\r\n                }\r\n\r\n                logger.debug('parsing valid json but does not have correct '\r\n                    + 'structure', 'topic: ', type);\r\n            }\r\n        } catch (e) {\r\n            logger.error(e);\r\n\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * A private message is received, message that is not addressed to the muc.\r\n     * We expect private message coming from plugins component if it is\r\n     * enabled and running.\r\n     *\r\n     * @param {string} msg - The message.\r\n     */\r\n    _onPrivateMessage(msg) {\r\n        const from = msg.getAttribute('from');\r\n\r\n        if (!(from === this.speakerStatsComponentAddress\r\n            || from === this.conferenceDurationComponentAddress)) {\r\n            return true;\r\n        }\r\n\r\n        const jsonMessage = $(msg).find('>json-message')\r\n            .text();\r\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\r\n\r\n        if (parsedJson\r\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\r\n            && parsedJson.users) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\r\n        }\r\n\r\n        if (parsedJson\r\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration'\r\n            && parsedJson.created_timestamp) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","\r\n/**\r\n * The method will increase the given number by 1. If the given counter is equal\r\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\r\n * 1.\r\n * @param {number} number - An integer counter value to be incremented.\r\n * @return {number} the next counter value increased by 1 (see the description\r\n * above for exception).\r\n */\r\nexport function safeCounterIncrement(number) {\r\n    let nextValue = number;\r\n\r\n    if (number >= Number.MAX_SAFE_INTEGER) {\r\n        nextValue = 0;\r\n    }\r\n\r\n    return nextValue + 1;\r\n}\r\n\r\n/**\r\n * Calculates the average value of am Array of numbers.\r\n *\r\n * @param {Float32Array} valueArray - Array of numbers.\r\n * @returns {number} - Number array average.\r\n */\r\nexport function calculateAverage(valueArray) {\r\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\r\n}\r\n\r\n/**\r\n * Calculates a unique hash for a given string similar to Java's\r\n * implementation of String.hashCode()\r\n *\r\n * @param {String} string - String whose hash has to be calculated.\r\n * @returns {number} - Unique hash code calculated.\r\n */\r\nexport function hashString(string) {\r\n    let hash = 0;\r\n\r\n    for (let i = 0; i < string.length; i++) {\r\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\r\n\r\n        /* eslint-disable no-bitwise */\r\n        hash = hash & hash; // Convert to 32bit integer\r\n    }\r\n\r\n    return Math.abs(hash);\r\n}\r\n\r\n/**\r\n * Returns only the positive values from an array of numbers.\r\n *\r\n * @param {Float32Array} valueArray - Array of vad scores.\r\n * @returns {Array} - Array of positive numbers.\r\n */\r\nexport function filterPositiveValues(valueArray) {\r\n    return valueArray.filter(value => value >= 0);\r\n}\r\n\r\n/**\r\n * This class calculates a simple running average that continually changes\r\n * as more data points are collected and added.\r\n */\r\nexport class RunningAverage {\r\n    /**\r\n     * Creates an instance of the running average calculator.\r\n     */\r\n    constructor() {\r\n        this.average = 0;\r\n        this.n = 0;\r\n    }\r\n\r\n    /**\r\n     * Adds a new data point to the existing set of values and recomputes\r\n     * the running average.\r\n     * @param {number} value\r\n     * @returns {void}\r\n     */\r\n    addNext(value) {\r\n        if (typeof value !== 'number') {\r\n            return;\r\n        }\r\n        this.n += 1;\r\n        this.average = this.average + ((value - this.average) / this.n);\r\n    }\r\n\r\n    /**\r\n     * Obtains the average value for the current subset of values.\r\n     * @returns {number} - computed average.\r\n     */\r\n    getAverage() {\r\n        return this.average;\r\n    }\r\n}\r\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nimport UsernameGenerator from '../util/UsernameGenerator';\r\n\r\nlet _callStatsUserName;\r\n\r\nlet _machineId;\r\n\r\n/**\r\n *\r\n */\r\nexport default {\r\n\r\n    /**\r\n     * The storage used to store the settings.\r\n     */\r\n    _storage: jitsiLocalStorage,\r\n\r\n    /**\r\n     * Initializes the Settings class.\r\n     *\r\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\r\n     * used for storing data instead of jitsiLocalStorage if specified.\r\n     */\r\n    init(externalStorage) {\r\n        this._storage = externalStorage || jitsiLocalStorage;\r\n    },\r\n\r\n    /**\r\n     * Returns fake username for callstats\r\n     * @returns {string} fake username for callstats\r\n     */\r\n    get callStatsUserName() {\r\n        if (!_callStatsUserName) {\r\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\r\n            if (!_callStatsUserName) {\r\n                _callStatsUserName = generateCallStatsUserName();\r\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\r\n            }\r\n        }\r\n\r\n        return _callStatsUserName;\r\n    },\r\n\r\n    /**\r\n     * Returns current machine id.\r\n     * @returns {string} machine id\r\n     */\r\n    get machineId() {\r\n        if (!_machineId) {\r\n            _machineId = this._storage.getItem('jitsiMeetId');\r\n            if (!_machineId) {\r\n                _machineId = generateJitsiMeetId();\r\n                this._storage.setItem('jitsiMeetId', _machineId);\r\n            }\r\n        }\r\n\r\n        return _machineId;\r\n    },\r\n\r\n    /**\r\n     * Returns current session id.\r\n     * @returns {string} current session id\r\n     */\r\n    get sessionId() {\r\n        // We may update sessionId in localStorage from another JitsiConference\r\n        // instance and that's why we should always re-read it.\r\n        return this._storage.getItem('sessionId');\r\n    },\r\n\r\n    /**\r\n     * Save current session id.\r\n     * @param {string} sessionId session id\r\n     */\r\n    set sessionId(sessionId) {\r\n        if (sessionId) {\r\n            this._storage.setItem('sessionId', sessionId);\r\n        } else {\r\n            this._storage.removeItem('sessionId');\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Generate fake username for callstats.\r\n * @returns {string} fake random username\r\n */\r\nfunction generateCallStatsUserName() {\r\n    const username = UsernameGenerator.generateUsername();\r\n\r\n    logger.log('generated callstats uid', username);\r\n\r\n    return username;\r\n}\r\n\r\n/**\r\n * Generate unique id.\r\n * @returns {string} random unique id\r\n */\r\nfunction generateJitsiMeetId() {\r\n    const jitsiMeetId = generateUniqueId();\r\n\r\n    logger.log('generated id', jitsiMeetId);\r\n\r\n    return jitsiMeetId;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction generateUniqueId() {\r\n    return _p8() + _p8() + _p8() + _p8();\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction _p8() {\r\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\r\n}\r\n","import * as transform from 'sdp-transform';\r\n\r\n/**\r\n * Parses the primary SSRC of given SSRC group.\r\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\r\n * @return {Number} the primary SSRC number\r\n */\r\nexport function parsePrimarySSRC(group) {\r\n    return parseInt(group.ssrcs.split(' ')[0], 10);\r\n}\r\n\r\n/**\r\n * Parses the secondary SSRC of given SSRC group.\r\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\r\n * @return {Number} the secondary SSRC number\r\n */\r\nexport function parseSecondarySSRC(group) {\r\n    return parseInt(group.ssrcs.split(' ')[1], 10);\r\n}\r\n\r\n/**\r\n * Tells how many distinct SSRCs are contained in given media line.\r\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\r\n * @return {number}\r\n */\r\nfunction _getSSRCCount(mLine) {\r\n    if (!mLine.ssrcs) {\r\n        return 0;\r\n    }\r\n\r\n    return mLine.ssrcs\r\n        .map(ssrcInfo => ssrcInfo.id)\r\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\r\n        .length;\r\n}\r\n\r\n/**\r\n * A wrapper around 'sdp-transform' media description object which provides\r\n * utility methods for common SDP/SSRC related operations.\r\n */\r\nclass MLineWrap {\r\n\r\n    /**\r\n     * Creates new <tt>MLineWrap</t>>\r\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\r\n     * lib.\r\n     */\r\n    constructor(mLine) {\r\n        if (!mLine) {\r\n            throw new Error('mLine is undefined');\r\n        }\r\n\r\n        this.mLine = mLine;\r\n    }\r\n\r\n    /**\r\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\r\n     * one will be preassigned.\r\n     *\r\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\r\n     * objects.\r\n     */\r\n    get ssrcs() {\r\n        if (!this.mLine.ssrcs) {\r\n            this.mLine.ssrcs = [];\r\n        }\r\n\r\n        return this.mLine.ssrcs;\r\n    }\r\n\r\n    /**\r\n     * Setter for the mLine's \"ssrcs\" array.\r\n     *\r\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\r\n     * objects.\r\n     */\r\n    set ssrcs(ssrcs) {\r\n        this.mLine.ssrcs = ssrcs;\r\n    }\r\n\r\n    /**\r\n     * Returns the direction of the underlying media description.\r\n     * @return {string} the media direction name as defined in the SDP.\r\n     */\r\n    get direction() {\r\n        return this.mLine.direction;\r\n    }\r\n\r\n    /**\r\n     * Modifies the direction of the underlying media description.\r\n     * @param {string} direction the new direction to be set\r\n     */\r\n    set direction(direction) {\r\n        this.mLine.direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Exposes the SSRC group array of the underlying media description object.\r\n     * @return {Array.<Object>}\r\n     */\r\n    get ssrcGroups() {\r\n        if (!this.mLine.ssrcGroups) {\r\n            this.mLine.ssrcGroups = [];\r\n        }\r\n\r\n        return this.mLine.ssrcGroups;\r\n    }\r\n\r\n    /**\r\n     * Modifies the SSRC groups array of the underlying media description\r\n     * object.\r\n     * @param {Array.<Object>} ssrcGroups\r\n     */\r\n    set ssrcGroups(ssrcGroups) {\r\n        this.mLine.ssrcGroups = ssrcGroups;\r\n    }\r\n\r\n    /**\r\n     * Obtains value from SSRC attribute.\r\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\r\n     * found\r\n     * @param {string} attrName the name of the SSRC attribute to be found.\r\n     * @return {string|undefined} the value of SSRC attribute or\r\n     * <tt>undefined</tt> if no such attribute exists.\r\n     */\r\n    getSSRCAttrValue(ssrcNumber, attrName) {\r\n        const attribute = this.ssrcs.find(\r\n            ssrcObj => ssrcObj.id === ssrcNumber\r\n            && ssrcObj.attribute === attrName);\r\n\r\n\r\n        return attribute && attribute.value;\r\n    }\r\n\r\n    /**\r\n     * Removes all attributes for given SSRC number.\r\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\r\n     * removed.\r\n     */\r\n    removeSSRC(ssrcNum) {\r\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcs\r\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\r\n    }\r\n\r\n    /**\r\n     * Adds SSRC attribute\r\n     * @param {object} ssrcObj the SSRC attribute object as defined in\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    addSSRCAttribute(ssrcObj) {\r\n        this.ssrcs.push(ssrcObj);\r\n    }\r\n\r\n    /**\r\n     * Finds a SSRC group matching both semantics and SSRCs in order.\r\n     * @param {string} semantics the name of the semantics\r\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\r\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\r\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\r\n     * not found.\r\n     */\r\n    findGroup(semantics, ssrcs) {\r\n        return this.ssrcGroups.find(\r\n            group =>\r\n                group.semantics === semantics\r\n                    && (!ssrcs || ssrcs === group.ssrcs));\r\n    }\r\n\r\n    /**\r\n     * Finds all groups matching given semantic's name.\r\n     * @param {string} semantics the name of the semantics\r\n     * @return {Array.<object>} an array of SSRC group objects as defined by\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    findGroups(semantics) {\r\n        return this.ssrcGroups.filter(\r\n            group => group.semantics === semantics);\r\n    }\r\n\r\n    /**\r\n     * Finds all groups matching given semantic's name and group's primary SSRC.\r\n     * @param {string} semantics the name of the semantics\r\n     * @param {number} primarySSRC the primary SSRC number to be matched\r\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\r\n     */\r\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\r\n        return this.ssrcGroups.find(\r\n            group => group.semantics === semantics\r\n                && parsePrimarySSRC(group) === primarySSRC);\r\n    }\r\n\r\n    /**\r\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\r\n     * the first SSRC object with any 'msid' value.\r\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\r\n     * lib.\r\n     */\r\n    findSSRCByMSID(msid) {\r\n        return this.ssrcs.find(\r\n            ssrcObj => ssrcObj.attribute === 'msid'\r\n                && (msid === null || ssrcObj.value === msid));\r\n    }\r\n\r\n    /**\r\n     * Gets the SSRC count for the underlying media description.\r\n     * @return {number}\r\n     */\r\n    getSSRCCount() {\r\n        return _getSSRCCount(this.mLine);\r\n    }\r\n\r\n    /**\r\n     * Checks whether the underlying media description contains any SSRC groups.\r\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\r\n     * <tt>false</tt> otherwise.\r\n     */\r\n    containsAnySSRCGroups() {\r\n        return this.mLine.ssrcGroups !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Finds the primary video SSRC.\r\n     * @returns {number|undefined} the primary video ssrc\r\n     * @throws Error if the underlying media description is not a video\r\n     */\r\n    getPrimaryVideoSsrc() {\r\n        const mediaType = this.mLine.type;\r\n\r\n        if (mediaType !== 'video') {\r\n            throw new Error(\r\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\r\n        }\r\n\r\n        const numSsrcs = _getSSRCCount(this.mLine);\r\n\r\n        if (numSsrcs === 1) {\r\n            // Not using \"ssrcs\" getter on purpose here\r\n            return this.mLine.ssrcs[0].id;\r\n        }\r\n\r\n        // Look for a SIM, FID, or FEC-FR group\r\n        if (this.mLine.ssrcGroups) {\r\n            const simGroup = this.findGroup('SIM');\r\n\r\n            if (simGroup) {\r\n                return parsePrimarySSRC(simGroup);\r\n            }\r\n            const fidGroup = this.findGroup('FID');\r\n\r\n            if (fidGroup) {\r\n                return parsePrimarySSRC(fidGroup);\r\n            }\r\n            const fecGroup = this.findGroup('FEC-FR');\r\n\r\n            if (fecGroup) {\r\n                return parsePrimarySSRC(fecGroup);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Obtains RTX SSRC from the underlying video description (the\r\n     * secondary SSRC of the first \"FID\" group found)\r\n     * @param {number} primarySsrc the video ssrc for which to find the\r\n     * corresponding rtx ssrc\r\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\r\n     * one)\r\n     */\r\n    getRtxSSRC(primarySsrc) {\r\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\r\n\r\n\r\n        return fidGroup && parseSecondarySSRC(fidGroup);\r\n    }\r\n\r\n    /**\r\n     * Obtains all SSRCs contained in the underlying media description.\r\n     * @return {Array.<number>} an array with all SSRC as numbers.\r\n     */\r\n    getSSRCs() {\r\n        return this.ssrcs\r\n            .map(ssrcInfo => ssrcInfo.id)\r\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\r\n    }\r\n\r\n    /**\r\n     * Obtains primary video SSRCs.\r\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\r\n     * @throws Error if the wrapped media description is not a video.\r\n     */\r\n    getPrimaryVideoSSRCs() {\r\n        const mediaType = this.mLine.type;\r\n\r\n        if (mediaType !== 'video') {\r\n            throw new Error(\r\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\r\n        }\r\n\r\n        const videoSSRCs = this.getSSRCs();\r\n\r\n        for (const ssrcGroupInfo of this.ssrcGroups) {\r\n            // Right now, FID and FEC-FR groups are the only ones we parse to\r\n            // disqualify streams.  If/when others arise we'll\r\n            // need to add support for them here\r\n            if (ssrcGroupInfo.semantics === 'FID'\r\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\r\n                // secondary streams should be filtered out\r\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\r\n\r\n                videoSSRCs.splice(\r\n                    videoSSRCs.indexOf(secondarySsrc), 1);\r\n            }\r\n        }\r\n\r\n        return videoSSRCs;\r\n    }\r\n\r\n    /**\r\n     * Dumps all SSRC groups of this media description to JSON.\r\n     */\r\n    dumpSSRCGroups() {\r\n        return JSON.stringify(this.mLine.ssrcGroups);\r\n    }\r\n\r\n    /**\r\n     * Removes all SSRC groups which contain given SSRC number at any position.\r\n     * @param {number} ssrc the SSRC for which all matching groups are to be\r\n     * removed.\r\n     */\r\n    removeGroupsWithSSRC(ssrc) {\r\n        if (!this.mLine.ssrcGroups) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\r\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\r\n    }\r\n\r\n    /**\r\n     * Removes groups that match given semantics.\r\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\r\n     */\r\n    removeGroupsBySemantics(semantics) {\r\n        if (!this.mLine.ssrcGroups) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcGroups\r\n            = this.mLine.ssrcGroups\r\n                .filter(groupInfo => groupInfo.semantics !== semantics);\r\n    }\r\n\r\n    /**\r\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\r\n     * @param {number} oldSSRC the old SSRC number\r\n     * @param {number} newSSRC the new SSRC number\r\n     */\r\n    replaceSSRC(oldSSRC, newSSRC) {\r\n        if (this.mLine.ssrcs) {\r\n            this.mLine.ssrcs.forEach(ssrcInfo => {\r\n                if (ssrcInfo.id === oldSSRC) {\r\n                    ssrcInfo.id = newSSRC;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds given SSRC group to this media description.\r\n     * @param {object} group the SSRC group object as defined by\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    addSSRCGroup(group) {\r\n        this.ssrcGroups.push(group);\r\n    }\r\n}\r\n\r\n/**\r\n * Utility class for SDP manipulation using the 'sdp-transform' library.\r\n *\r\n * Typical use usage scenario:\r\n *\r\n * const transformer = new SdpTransformWrap(rawSdp);\r\n * const videoMLine = transformer.selectMedia('video);\r\n * if (videoMLine) {\r\n *     videoMLiner.addSSRCAttribute({\r\n *         id: 2342343,\r\n *         attribute: \"cname\",\r\n *         value: \"someCname\"\r\n *     });\r\n *     rawSdp = transformer.toRawSdp();\r\n * }\r\n */\r\nexport class SdpTransformWrap {\r\n\r\n    /**\r\n     * Creates new instance and parses the raw SDP into objects using\r\n     * 'sdp-transform' lib.\r\n     * @param {string} rawSDP the SDP in raw text format.\r\n     */\r\n    constructor(rawSDP) {\r\n        this.parsedSDP = transform.parse(rawSDP);\r\n    }\r\n\r\n    /**\r\n     * Selects the first media SDP of given name.\r\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\r\n     * 'data'.\r\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\r\n     * line or <tt>null</tt> if not found. The object returned references\r\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\r\n     * (it's not a copy).\r\n     */\r\n    selectMedia(mediaType) {\r\n        const selectedMLine\r\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\r\n\r\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\r\n    }\r\n\r\n    /**\r\n     * Converts the currently stored SDP state in this instance to raw text SDP\r\n     * format.\r\n     * @return {string}\r\n     */\r\n    toRawSDP() {\r\n        return transform.write(this.parsedSDP);\r\n    }\r\n}\r\n","/**\r\n * Indicates that the local connection statistics were updated.\r\n */\r\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\r\n\r\n/**\r\n * Indicates that the connection statistics for a particular remote participant\r\n * were updated.\r\n */\r\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\r\n","/**\r\n * The pending Jingle session state which means the session as defined in\r\n * XEP-0166(before 'session-invite/session-accept' took place).\r\n *\r\n * @type {string}\r\n */\r\nexport const PENDING = 'pending';\r\n\r\n/**\r\n * The active Jingle session state as defined in XEP-0166\r\n * (after 'session-invite'/'session-accept').\r\n *\r\n * @type {string}\r\n */\r\nexport const ACTIVE = 'active';\r\n\r\n/**\r\n * The ended Jingle session state as defined in XEP-0166\r\n * (after 'session-terminate').\r\n * @type {string}\r\n */\r\nexport const ENDED = 'ended';\r\n","/**\r\n * The know jingle actions that can be sent and should be acted upon by\r\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\r\n */\r\nexport const ACTIONS = {\r\n    ACCEPT: 'session-accept',\r\n    CONNECTION_ERROR: 'connection-error-encountered',\r\n    INITIATE: 'session-initiate',\r\n    TERMINATE: 'session-terminate',\r\n    TRANSPORT_INFO: 'transport-info',\r\n    UNAVAILABLE: 'unavailable'\r\n};\r\n","const Resolutions = {\r\n    '1080': {\r\n        width: 1920,\r\n        height: 1080,\r\n        order: 8\r\n    },\r\n    'fullhd': {\r\n        width: 1920,\r\n        height: 1080,\r\n        order: 8\r\n    },\r\n    '720': {\r\n        width: 1280,\r\n        height: 720,\r\n        order: 7\r\n    },\r\n    'hd': {\r\n        width: 1280,\r\n        height: 720,\r\n        order: 7\r\n    },\r\n    '960': {\r\n        width: 960,\r\n        height: 720,\r\n        order: 6\r\n    },\r\n    '540': {\r\n        width: 960,\r\n        height: 540,\r\n        order: 5\r\n    },\r\n    'qhd': {\r\n        width: 960,\r\n        height: 540,\r\n        order: 5\r\n    },\r\n\r\n    // 16:9 resolution first.\r\n    '360': {\r\n        width: 640,\r\n        height: 360,\r\n        order: 4\r\n    },\r\n    '640': {\r\n        width: 640,\r\n        height: 480,\r\n        order: 3\r\n    },\r\n    'vga': {\r\n        width: 640,\r\n        height: 480,\r\n        order: 3\r\n    },\r\n\r\n    // 16:9 resolution first.\r\n    '180': {\r\n        width: 320,\r\n        height: 180,\r\n        order: 2\r\n    },\r\n    '320': {\r\n        width: 320,\r\n        height: 240,\r\n        order: 1\r\n    }\r\n};\r\n\r\nmodule.exports = Resolutions;\r\n","/* global callstats */\r\n\r\nimport browser from '../browser';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * We define enumeration of wrtcFuncNames as we need them before\r\n * callstats is initialized to queue events.\r\n * @const\r\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\r\n */\r\nconst wrtcFuncNames = {\r\n    createOffer: 'createOffer',\r\n    createAnswer: 'createAnswer',\r\n    setLocalDescription: 'setLocalDescription',\r\n    setRemoteDescription: 'setRemoteDescription',\r\n    addIceCandidate: 'addIceCandidate',\r\n    getUserMedia: 'getUserMedia',\r\n    iceConnectionFailure: 'iceConnectionFailure',\r\n    signalingError: 'signalingError',\r\n    applicationLog: 'applicationLog'\r\n};\r\n\r\n/**\r\n * We define enumeration of fabricEvent as we need them before\r\n * callstats is initialized to queue events.\r\n * @const\r\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\r\n */\r\nconst fabricEvent = {\r\n    fabricHold: 'fabricHold',\r\n    fabricResume: 'fabricResume',\r\n    audioMute: 'audioMute',\r\n    audioUnmute: 'audioUnmute',\r\n    videoPause: 'videoPause',\r\n    videoResume: 'videoResume',\r\n    fabricUsageEvent: 'fabricUsageEvent',\r\n    fabricStats: 'fabricStats',\r\n    fabricTerminated: 'fabricTerminated',\r\n    screenShareStart: 'screenShareStart',\r\n    screenShareStop: 'screenShareStop',\r\n    dominantSpeaker: 'dominantSpeaker',\r\n    activeDeviceList: 'activeDeviceList'\r\n};\r\n\r\n/**\r\n * The user id to report to callstats as destination.\r\n * @type {string}\r\n */\r\nconst DEFAULT_REMOTE_USER = 'jitsi';\r\n\r\n/**\r\n * Type of pending reports, can be event or an error.\r\n * @type {{ERROR: string, EVENT: string}}\r\n */\r\nconst reportType = {\r\n    ERROR: 'error',\r\n    EVENT: 'event',\r\n    MST_WITH_USERID: 'mstWithUserID'\r\n};\r\n\r\n/**\r\n * Set of currently existing {@link CallStats} instances.\r\n * @type {Set<CallStats>}\r\n */\r\nlet _fabrics;\r\n\r\n/**\r\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\r\n * reports one peer connection the the CallStats backend and is allocated with\r\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\r\n * reporting various events. A fabric is considered disposed when\r\n * {@link CallStats.sendTerminateEvent} is executed.\r\n *\r\n * Currently only one backend instance can be created ever and it's done using\r\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\r\n * explicitly shutdown the backend, but it's supposed to close it's connection\r\n * automatically, after all fabrics have been terminated.\r\n */\r\nexport default class CallStats {\r\n    /**\r\n     * A callback passed to {@link callstats.addNewFabric}.\r\n     * @param {string} error 'success' means ok\r\n     * @param {string} msg some more details\r\n     * @private\r\n     */\r\n    static _addNewFabricCallback(error, msg) {\r\n        if (CallStats.backend && error !== 'success') {\r\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback passed to {@link callstats.initialize} (backend initialization)\r\n     * @param {string} error 'success' means ok\r\n     * @param {String} msg\r\n     * @private\r\n     */\r\n    static _initCallback(error, msg) {\r\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\r\n\r\n        // there is no lib, nothing to report to\r\n        if (error !== 'success') {\r\n            return;\r\n        }\r\n\r\n        CallStats.backendInitialized = true;\r\n\r\n        // I hate that\r\n        let atLeastOneFabric = false;\r\n        let defaultInstance = null;\r\n\r\n        for (const callStatsInstance of CallStats.fabrics.values()) {\r\n            if (!callStatsInstance.hasFabric) {\r\n                logger.debug('addNewFabric - initCallback');\r\n                if (callStatsInstance._addNewFabric()) {\r\n                    atLeastOneFabric = true;\r\n                    if (!defaultInstance) {\r\n                        defaultInstance = callStatsInstance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!atLeastOneFabric) {\r\n            return;\r\n        }\r\n\r\n        CallStats._emptyReportQueue(defaultInstance);\r\n    }\r\n\r\n    /**\r\n     * Empties report queue.\r\n     *\r\n     * @param {CallStats} csInstance - The callstats instance.\r\n     * @private\r\n     */\r\n    static _emptyReportQueue(csInstance) {\r\n        // There is no conference ID nor a PeerConnection available when some of\r\n        // the events are scheduled on the reportsQueue, so those will be\r\n        // reported on the first initialized fabric.\r\n        const defaultConfID = csInstance.confID;\r\n        const defaultPC = csInstance.peerconnection;\r\n\r\n        // notify callstats about failures if there were any\r\n        for (const report of CallStats.reportsQueue) {\r\n            if (report.type === reportType.ERROR) {\r\n                const errorData = report.data;\r\n\r\n                CallStats._reportError(\r\n                    csInstance,\r\n                    errorData.type,\r\n                    errorData.error,\r\n                    errorData.pc || defaultPC);\r\n            } else if (report.type === reportType.EVENT) {\r\n                // if we have and event to report and we failed to add\r\n                // fabric this event will not be reported anyway, returning\r\n                // an error\r\n                const eventData = report.data;\r\n\r\n                CallStats.backend.sendFabricEvent(\r\n                    report.pc || defaultPC,\r\n                    eventData.event,\r\n                    defaultConfID,\r\n                    eventData.eventData);\r\n            } else if (report.type === reportType.MST_WITH_USERID) {\r\n                const data = report.data;\r\n\r\n                CallStats.backend.associateMstWithUserID(\r\n                    report.pc || defaultPC,\r\n                    data.callStatsId,\r\n                    defaultConfID,\r\n                    data.ssrc,\r\n                    data.usageLabel,\r\n                    data.containerId\r\n                );\r\n            }\r\n        }\r\n        CallStats.reportsQueue.length = 0;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Reports an error to callstats.\r\n     *\r\n     * @param {CallStats} [cs]\r\n     * @param type the type of the error, which will be one of the wrtcFuncNames\r\n     * @param error the error\r\n     * @param pc the peerconnection\r\n     * @private\r\n     */\r\n    static _reportError(cs, type, error, pc) {\r\n        let _error = error;\r\n\r\n        if (!_error) {\r\n            logger.warn('No error is passed!');\r\n            _error = new Error('Unknown error');\r\n        }\r\n        if (CallStats.backendInitialized && cs) {\r\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                type: reportType.ERROR,\r\n                data: {\r\n                    error: _error,\r\n                    pc,\r\n                    type\r\n                }\r\n            });\r\n        }\r\n\r\n        // else just ignore it\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Reports an error to callstats.\r\n     *\r\n     * @param {CallStats} cs\r\n     * @param event the type of the event, which will be one of the fabricEvent\r\n     * @param eventData additional data to pass to event\r\n     * @private\r\n     */\r\n    static _reportEvent(cs, event, eventData) {\r\n        const pc = cs && cs.peerconnection;\r\n        const confID = cs && cs.confID;\r\n\r\n        if (CallStats.backendInitialized && cs) {\r\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                confID,\r\n                pc,\r\n                type: reportType.EVENT,\r\n                data: { event,\r\n                    eventData }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wraps some of the CallStats API method and logs their calls with\r\n     * arguments on the debug logging level. Also wraps some of the backend\r\n     * methods execution into try catch blocks to not crash the app in case\r\n     * there is a problem with the backend itself.\r\n     * @param {callstats} theBackend\r\n     * @private\r\n     */\r\n    static _traceAndCatchBackendCalls(theBackend) {\r\n        const tryCatchMethods = [\r\n            'associateMstWithUserID',\r\n            'sendFabricEvent',\r\n            'sendUserFeedback'\r\n\r\n            // 'reportError', - this one needs special handling - see code below\r\n        ];\r\n\r\n        for (const methodName of tryCatchMethods) {\r\n            const originalMethod = theBackend[methodName];\r\n\r\n            theBackend[methodName] = function(...theArguments) {\r\n                try {\r\n                    return originalMethod.apply(theBackend, theArguments);\r\n                } catch (e) {\r\n                    GlobalOnErrorHandler.callErrorHandler(e);\r\n                }\r\n            };\r\n        }\r\n        const debugMethods = [\r\n            'associateMstWithUserID',\r\n            'sendFabricEvent',\r\n            'sendUserFeedback'\r\n\r\n            // 'reportError', - this one needs special handling - see code below\r\n        ];\r\n\r\n        for (const methodName of debugMethods) {\r\n            const originalMethod = theBackend[methodName];\r\n\r\n            theBackend[methodName] = function(...theArguments) {\r\n                logger.debug(methodName, theArguments);\r\n                originalMethod.apply(theBackend, theArguments);\r\n            };\r\n        }\r\n        const originalReportError = theBackend.reportError;\r\n\r\n        /* eslint-disable max-params */\r\n        theBackend.reportError = function(pc, cs, type, ...args) {\r\n            // Logs from the logger are submitted on the applicationLog event\r\n            // \"type\". Logging the arguments on the logger will create endless\r\n            // loop, because it will put all the logs to the logger queue again.\r\n            if (type === wrtcFuncNames.applicationLog) {\r\n                // NOTE otherArguments are not logged to the console on purpose\r\n                // to not log the whole log batch\r\n                // FIXME check the current logging level (currently not exposed\r\n                // by the logger implementation)\r\n                // NOTE it is not safe to log whole objects on react-native as\r\n                // those contain too many circular references and may crash\r\n                // the app.\r\n                if (!browser.isReactNative()) {\r\n                    console && console.debug('reportError', pc, cs, type);\r\n                }\r\n            } else {\r\n                logger.debug('reportError', pc, cs, type, ...args);\r\n            }\r\n            try {\r\n                originalReportError.call(theBackend, pc, cs, type, ...args);\r\n            } catch (exception) {\r\n                if (type === wrtcFuncNames.applicationLog) {\r\n                    console && console.error('reportError', exception);\r\n                } else {\r\n                    GlobalOnErrorHandler.callErrorHandler(exception);\r\n                }\r\n            }\r\n        };\r\n\r\n        /* eslint-enable max-params */\r\n    }\r\n\r\n    /**\r\n     * Returns the Set with the currently existing {@link CallStats} instances.\r\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\r\n     * @type {Set<CallStats>}\r\n     */\r\n    static get fabrics() {\r\n        if (!_fabrics) {\r\n            _fabrics = new Set();\r\n        }\r\n\r\n        return _fabrics;\r\n    }\r\n\r\n    /**\r\n     * Initializes the CallStats backend. Should be called only if\r\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\r\n     * @param {object} options\r\n     * @param {String} options.callStatsID CallStats credentials - ID\r\n     * @param {String} options.callStatsSecret CallStats credentials - secret\r\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\r\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\r\n     * @param {string} options.userName the <tt>userName</tt> part of\r\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\r\n     *\r\n     */\r\n    static initBackend(options) {\r\n        if (CallStats.backend) {\r\n            throw new Error('CallStats backend has been initialized already!');\r\n        }\r\n        try {\r\n            const CallStatsBackend = callstats;\r\n\r\n            CallStats.backend = new CallStatsBackend();\r\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\r\n            CallStats.userID = {\r\n                aliasName: options.aliasName,\r\n                userName: options.userName\r\n            };\r\n            CallStats.callStatsID = options.callStatsID;\r\n            CallStats.callStatsSecret = options.callStatsSecret;\r\n\r\n            let configParams;\r\n\r\n            if (options.applicationName) {\r\n                configParams = {\r\n                    applicationVersion:\r\n                        `${options.applicationName} (${\r\n                            browser.getName()})`\r\n                };\r\n            }\r\n\r\n            if (options.confID) {\r\n                // we first check is there a tenant in the confID\r\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\r\n\r\n                // if there is no tenant, we will just set '/'\r\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\r\n            }\r\n\r\n            // userID is generated or given by the origin server\r\n            CallStats.backend.initialize(\r\n                CallStats.callStatsID,\r\n                CallStats.callStatsSecret,\r\n                CallStats.userID,\r\n                CallStats._initCallback,\r\n                undefined,\r\n                configParams);\r\n\r\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\r\n\r\n            if (getWiFiStatsMethod) {\r\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\r\n\r\n                getWiFiStatsMethod().then(result => {\r\n                    if (result) {\r\n                        logger.info('Reported wifi addresses:'\r\n                            , JSON.parse(result).addresses);\r\n                    }\r\n                })\r\n                .catch(() => {});// eslint-disable-line no-empty-function\r\n            }\r\n\r\n            return true;\r\n        } catch (e) {\r\n            // The callstats.io API failed to initialize (e.g. because its\r\n            // download did not succeed in general or on time). Further attempts\r\n            // to utilize it cannot possibly succeed.\r\n            GlobalOnErrorHandler.callErrorHandler(e);\r\n            CallStats.backend = null;\r\n            logger.error(e);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the CallStats backend has been created. It does not mean that\r\n     * it has been initialized, but only that the API instance has been\r\n     * allocated successfully.\r\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\r\n     * otherwise\r\n     */\r\n    static isBackendInitialized() {\r\n        return Boolean(CallStats.backend);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats about active device.\r\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\r\n     * their data\r\n     * @param {CallStats} cs callstats instance related to the event\r\n     */\r\n    static sendActiveDeviceListEvent(devicesData, cs) {\r\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that there is a log we want to report.\r\n     *\r\n     * @param {Error} e error to send or {String} message\r\n     * @param {CallStats} cs callstats instance related to the error (optional)\r\n     */\r\n    static sendApplicationLog(e, cs) {\r\n        try {\r\n            CallStats._reportError(\r\n                cs,\r\n                wrtcFuncNames.applicationLog,\r\n                e,\r\n                cs && cs.peerconnection);\r\n        } catch (error) {\r\n            // If sendApplicationLog fails it should not be printed to\r\n            // the logger, because it will try to push the logs again\r\n            // (through sendApplicationLog) and an endless loop is created.\r\n            if (console && (typeof console.error === 'function')) {\r\n                // FIXME send analytics event as well\r\n                console.error('sendApplicationLog failed', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the given feedback through CallStats.\r\n     *\r\n     * @param {string} conferenceID the conference ID for which the feedback\r\n     * will be reported.\r\n     * @param overall an integer between 1 and 5 indicating the\r\n     * user feedback\r\n     * @param comment detailed feedback from the user.\r\n     */\r\n    static sendFeedback(conferenceID, overall, comment) {\r\n        return new Promise((resolve, reject) => {\r\n            if (CallStats.backend) {\r\n                CallStats.backend.sendUserFeedback(\r\n                    conferenceID,\r\n                    {\r\n                        userID: CallStats.userID,\r\n                        overall,\r\n                        comment\r\n                    },\r\n                    (status, message) => {\r\n                        if (status === 'success') {\r\n                            resolve(message);\r\n                        } else {\r\n                            reject(message);\r\n                        }\r\n                    });\r\n            } else {\r\n                const reason = 'Failed to submit feedback to CallStats - no backend';\r\n\r\n                logger.error(reason);\r\n                reject(reason);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that getUserMedia failed.\r\n     *\r\n     * @param {Error} e error to send\r\n     * @param {CallStats} cs callstats instance related to the error (optional)\r\n     */\r\n    static sendGetUserMediaFailed(e, cs) {\r\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for mute events\r\n     * @param mute {boolean} true for muted and false for not muted\r\n     * @param type {String} \"audio\"/\"video\"\r\n     * @param {CallStats} cs callstats instance related to the event\r\n     */\r\n    static sendMuteEvent(mute, type, cs) {\r\n        let event;\r\n\r\n        if (type === 'video') {\r\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\r\n        } else {\r\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\r\n        }\r\n\r\n        CallStats._reportEvent(cs, event);\r\n    }\r\n\r\n    /**\r\n     * Creates new CallStats instance that handles all callstats API calls for\r\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\r\n     * one CallStats fabric added with 'addFabric' API method for the\r\n     * {@link TraceablePeerConnection} instance passed in the constructor.\r\n     * @param {TraceablePeerConnection} tpc\r\n     * @param {Object} options\r\n     * @param {string} options.confID the conference ID that wil be used to\r\n     * report the session.\r\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\r\n     * which given <tt>tpc</tt> is connected.\r\n     */\r\n    constructor(tpc, options) {\r\n        this.confID = options.confID;\r\n        this.tpc = tpc;\r\n        this.peerconnection = tpc.peerconnection;\r\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\r\n        this.hasFabric = false;\r\n\r\n        CallStats.fabrics.add(this);\r\n\r\n        if (CallStats.backendInitialized) {\r\n            this._addNewFabric();\r\n\r\n            // if this is the first fabric let's try to empty the\r\n            // report queue. Reports all events that we recorded between\r\n            // backend initialization and receiving the first fabric\r\n            if (CallStats.fabrics.size === 1) {\r\n                CallStats._emptyReportQueue(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\r\n     * the peer connection associated with this instance.\r\n     * @return {boolean} true if the call was successful or false otherwise.\r\n     */\r\n    _addNewFabric() {\r\n        logger.info('addNewFabric', this.remoteUserID);\r\n        try {\r\n            const fabricAttributes = {\r\n                remoteEndpointType:\r\n                    this.tpc.isP2P\r\n                        ? CallStats.backend.endpointType.peer\r\n                        : CallStats.backend.endpointType.server\r\n            };\r\n            const ret\r\n                = CallStats.backend.addNewFabric(\r\n                    this.peerconnection,\r\n                    this.remoteUserID,\r\n                    CallStats.backend.fabricUsage.multiplex,\r\n                    this.confID,\r\n                    fabricAttributes,\r\n                    CallStats._addNewFabricCallback);\r\n\r\n            this.hasFabric = true;\r\n\r\n            const success = ret.status === 'success';\r\n\r\n            if (!success) {\r\n                logger.error('callstats fabric not initilized', ret.message);\r\n            }\r\n\r\n            return success;\r\n\r\n        } catch (error) {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Lets CallStats module know where is given SSRC rendered by providing\r\n     * renderer tag ID.\r\n     * If the lib is not initialized yet queue the call for later, when it's\r\n     * ready.\r\n     * @param {number} ssrc the SSRC of the stream\r\n     * @param {boolean} isLocal indicates whether this the stream is local\r\n     * @param {string|null} streamEndpointId if the stream is not local the it\r\n     * needs to contain the stream owner's ID\r\n     * @param {string} usageLabel meaningful usage label of this stream like\r\n     *        'microphone', 'camera' or 'screen'.\r\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\r\n     *        renders the stream.\r\n     */\r\n    associateStreamWithVideoTag(\r\n            ssrc,\r\n            isLocal,\r\n            streamEndpointId,\r\n            usageLabel,\r\n            containerId) {\r\n        if (!CallStats.backend) {\r\n            return;\r\n        }\r\n\r\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\r\n\r\n        if (CallStats.backendInitialized) {\r\n            CallStats.backend.associateMstWithUserID(\r\n                this.peerconnection,\r\n                callStatsId,\r\n                this.confID,\r\n                ssrc,\r\n                usageLabel,\r\n                containerId);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                type: reportType.MST_WITH_USERID,\r\n                pc: this.peerconnection,\r\n                data: {\r\n                    callStatsId,\r\n                    containerId,\r\n                    ssrc,\r\n                    usageLabel\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Notifies CallStats that we are the new dominant speaker in the\r\n     * conference.\r\n     */\r\n    sendDominantSpeakerEvent() {\r\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that the fabric for the underlying peerconnection was\r\n     * closed and no evens should be reported, after this call.\r\n     */\r\n    sendTerminateEvent() {\r\n        if (CallStats.backendInitialized) {\r\n            CallStats.backend.sendFabricEvent(\r\n                this.peerconnection,\r\n                CallStats.backend.fabricEvent.fabricTerminated,\r\n                this.confID);\r\n        }\r\n        CallStats.fabrics.delete(this);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for ice connection failed\r\n     */\r\n    sendIceConnectionFailedEvent() {\r\n        CallStats._reportError(\r\n            this,\r\n            wrtcFuncNames.iceConnectionFailure,\r\n            null,\r\n            this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to create offer.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendCreateOfferFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to create answer.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendCreateAnswerFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Sends either resume or hold event for the fabric associated with\r\n     * the underlying peerconnection.\r\n     * @param {boolean} isResume true to resume or false to hold\r\n     */\r\n    sendResumeOrHoldEvent(isResume) {\r\n        CallStats._reportEvent(\r\n            this,\r\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for screen sharing events\r\n     * @param {boolean} start true for starting screen sharing and\r\n     * false for not stopping\r\n     * @param {string|null} ssrc - optional ssrc value, used only when\r\n     * starting screen sharing.\r\n     */\r\n    sendScreenSharingEvent(start, ssrc) {\r\n        let eventData;\r\n\r\n        if (ssrc) {\r\n            eventData = { ssrc };\r\n        }\r\n\r\n        CallStats._reportEvent(\r\n            this,\r\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\r\n            eventData);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to set local description.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendSetLocalDescFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to set remote description.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendSetRemoteDescFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to add ICE candidate.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendAddIceCandidateFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\r\n    }\r\n}\r\n\r\n/**\r\n * The CallStats API backend instance\r\n * @type {callstats}\r\n */\r\nCallStats.backend = null;\r\n\r\n// some errors/events may happen before CallStats init\r\n// in this case we accumulate them in this array\r\n// and send them to callstats on init\r\nCallStats.reportsQueue = [];\r\n\r\n/**\r\n * Whether the library was successfully initialized(the backend) using its\r\n * initialize method.\r\n * @type {boolean}\r\n */\r\nCallStats.backendInitialized = false;\r\n\r\n/**\r\n * Part of the CallStats credentials - application ID\r\n * @type {string}\r\n */\r\nCallStats.callStatsID = null;\r\n\r\n/**\r\n * Part of the CallStats credentials - application secret\r\n * @type {string}\r\n */\r\nCallStats.callStatsSecret = null;\r\n\r\n/**\r\n * Local CallStats user ID structure. Can be set only once when\r\n * {@link backend} is initialized, so it's static for the time being.\r\n * See CallStats API for more info:\r\n * https://www.callstats.io/api/#userid\r\n * @type {object}\r\n */\r\nCallStats.userID = null;\r\n","/* global module */\r\n/**\r\n * Enumeration of the codec mime types\r\n * @type {{H264: string, VP8: string, VP9: string}}\r\n */\r\nconst CodecMimeType = {\r\n    /**\r\n     * The h264 codec mime type\r\n     */\r\n    H264: 'h264',\r\n\r\n    /**\r\n     * The vp8 codec mime type.\r\n     */\r\n    VP8: 'vp8',\r\n\r\n    /**\r\n     * The vp9 codec mime type.\r\n     */\r\n    VP9: 'vp9'\r\n\r\n};\r\n\r\nmodule.exports = CodecMimeType;\r\n","/**\r\n * @const\r\n */\r\nconst ALPHANUM\r\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n/**\r\n * Hexadecimal digits.\r\n * @const\r\n */\r\nconst HEX_DIGITS = '0123456789abcdef';\r\n\r\n/**\r\n * Generates random int within the range [min, max]\r\n * @param min the minimum value for the generated number\r\n * @param max the maximum value for the generated number\r\n * @returns random int number\r\n */\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * Get random element from array or string.\r\n * @param {Array|string} arr source\r\n * @returns array element or string character\r\n */\r\nfunction randomElement(arr) {\r\n    return arr[randomInt(0, arr.length - 1)];\r\n}\r\n\r\n/**\r\n * Generate random alphanumeric string.\r\n * @param {number} length expected string length\r\n * @returns {string} random string of specified length\r\n */\r\nfunction randomAlphanumStr(length) {\r\n    let result = '';\r\n\r\n    for (let i = 0; i < length; i += 1) {\r\n        result += randomElement(ALPHANUM);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Exported interface.\r\n */\r\nconst RandomUtil = {\r\n    /**\r\n     * Returns a random hex digit.\r\n     * @returns {*}\r\n     */\r\n    randomHexDigit() {\r\n        return randomElement(HEX_DIGITS);\r\n    },\r\n\r\n    /**\r\n     * Returns a random string of hex digits with length 'len'.\r\n     * @param len the length.\r\n     */\r\n    randomHexString(len) {\r\n        let ret = '';\r\n\r\n        while (len--) { // eslint-disable-line no-param-reassign\r\n            ret += this.randomHexDigit();\r\n        }\r\n\r\n        return ret;\r\n    },\r\n    randomElement,\r\n    randomAlphanumStr,\r\n    randomInt\r\n};\r\n\r\nmodule.exports = RandomUtil;\r\n","import Listenable from '../util/Listenable';\r\n\r\n/**\r\n * Creates ConnectionPlugin class that extends the passed class.\r\n * @param {Class} base the definition of the class that will be extended by\r\n * ConnectionPlugin\r\n */\r\nfunction getConnectionPluginDefinition(base = class {}) {\r\n    /**\r\n     * Base class for strophe connection plugins.\r\n     */\r\n    return class extends base {\r\n        /**\r\n         *\r\n         */\r\n        constructor(...args) {\r\n            super(...args);\r\n            this.connection = null;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param connection\r\n         */\r\n        init(connection) {\r\n            this.connection = connection;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * ConnectionPlugin class.\r\n */\r\nexport default getConnectionPluginDefinition();\r\n\r\n/**\r\n * ConnectionPlugin class that extends Listenable.\r\n */\r\nexport const ConnectionPluginListenable\r\n    = getConnectionPluginDefinition(Listenable);\r\n","/**\r\n * The errors for the connection.\r\n */\r\n\r\n/**\r\n * Indicates that the connection was dropped with an error which was most likely\r\n * caused by some networking issues. The dropped term in this context means that\r\n * the connection was closed unexpectedly (not on user's request).\r\n *\r\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\r\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\r\n * could also happen when BOSH request is sent to the server with the session-id\r\n * that is not know to the server. But this should not happen in lib-jitsi-meet\r\n * case as long as the service is configured correctly (there is no bug).\r\n */\r\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\r\n\r\n/**\r\n * Not specified errors.\r\n */\r\nexport const OTHER_ERROR = 'connection.otherError';\r\n\r\n/**\r\n * Indicates that a password is required in order to join the conference.\r\n */\r\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\r\n\r\n/**\r\n * Indicates that the connection was dropped, because of too many 5xx HTTP\r\n * errors on BOSH requests.\r\n */\r\nexport const SERVER_ERROR = 'connection.serverError';\r\n","/**\r\n * Event triggered when participant's muted status changes.\r\n * @param {string} endpointId the track owner's identifier (MUC nickname)\r\n * @param {MediaType} mediaType \"audio\" or \"video\"\r\n * @param {boolean} isMuted the new muted state\r\n */\r\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\r\n\r\n/**\r\n * Event triggered when participant's video type changes.\r\n * @param {string} endpointId the video owner's ID (MUC nickname)\r\n * @param {VideoType} videoType the new value\r\n */\r\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\r\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $pres, Strophe } from 'strophe.js';\r\nimport 'strophejs-plugin-stream-management';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport ResumeTask from './ResumeTask';\r\nimport LastSuccessTracker from './StropheLastSuccess';\r\nimport PingConnectionPlugin from './strophe.ping';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\r\n */\r\nexport default class XmppConnection extends Listenable {\r\n    /**\r\n     * The list of {@link XmppConnection} events.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    static get Events() {\r\n        return {\r\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The list of Xmpp connection statuses.\r\n     *\r\n     * @returns {Strophe.Status}\r\n     */\r\n    static get Status() {\r\n        return Strophe.Status;\r\n    }\r\n\r\n    /**\r\n     * Initializes new connection instance.\r\n     *\r\n     * @param {Object} options\r\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\r\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\r\n     * It will enable automatically by default if supported by the XMPP server.\r\n     * @param {Number} [options.websocketKeepAlive=240000] - The websocket keep alive interval. It's 4 minutes by\r\n     * default with jitter. Pass -1 to disable. The actual interval equation is:\r\n     * jitterDelay = (interval * 0.2) + (0.8 * interval * Math.random())\r\n     * The keep alive is HTTP GET request to the {@link options.serviceUrl}.\r\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\r\n     */\r\n    constructor({ enableWebsocketResume, websocketKeepAlive, serviceUrl, xmppPing }) {\r\n        super();\r\n        this._options = {\r\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\r\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 4 * 60 * 1000 : Number(websocketKeepAlive)\r\n        };\r\n\r\n        this._stropheConn = new Strophe.Connection(serviceUrl);\r\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\r\n\r\n        // The default maxRetries is 5, which is too long.\r\n        this._stropheConn.maxRetries = 3;\r\n\r\n        this._lastSuccessTracker = new LastSuccessTracker();\r\n        this._lastSuccessTracker.startTracking(this, this._stropheConn);\r\n\r\n        this._resumeTask = new ResumeTask(this._stropheConn);\r\n\r\n        /**\r\n         * @typedef DeferredSendIQ Object\r\n         * @property {Element} iq - The IQ to send.\r\n         * @property {function} resolve - The resolve method of the deferred Promise.\r\n         * @property {function} reject - The reject method of the deferred Promise.\r\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\r\n         */\r\n        /**\r\n         * Deferred IQs to be sent upon reconnect.\r\n         * @type {Array<DeferredSendIQ>}\r\n         * @private\r\n         */\r\n        this._deferredIQs = [];\r\n\r\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\r\n        // is broken (WebSocket/TCP connection not closed gracefully).\r\n        this.addConnectionPlugin(\r\n            'ping',\r\n            new PingConnectionPlugin({\r\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\r\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\r\n                pingOptions: xmppPing\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * A getter for the connected state.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get connected() {\r\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\r\n\r\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\r\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\r\n    }\r\n\r\n    /**\r\n     * Retrieves the feature discovery plugin instance.\r\n     *\r\n     * @returns {Strophe.Connection.disco}\r\n     */\r\n    get disco() {\r\n        return this._stropheConn.disco;\r\n    }\r\n\r\n    /**\r\n     * A getter for the disconnecting state.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get disconnecting() {\r\n        return this._stropheConn.disconnecting === true;\r\n    }\r\n\r\n    /**\r\n     * A getter for the domain.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    get domain() {\r\n        return this._stropheConn.domain;\r\n    }\r\n\r\n    /**\r\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\r\n     * for BOSH.\r\n     * @returns {boolean}\r\n     */\r\n    get isUsingWebSocket() {\r\n        return this._usesWebsocket;\r\n    }\r\n\r\n    /**\r\n     * A getter for the JID.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    get jid() {\r\n        return this._stropheConn.jid;\r\n    }\r\n\r\n    /**\r\n     * Returns headers for the last BOSH response received.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get lastResponseHeaders() {\r\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\r\n    }\r\n\r\n    /**\r\n     * A getter for the logger plugin instance.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get logger() {\r\n        return this._stropheConn.logger;\r\n    }\r\n\r\n    /**\r\n     * A getter for the connection options.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get options() {\r\n        return this._stropheConn.options;\r\n    }\r\n\r\n    /**\r\n     * A getter for the service URL.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get service() {\r\n        return this._stropheConn.service;\r\n    }\r\n\r\n    /**\r\n     * Returns the current connection status.\r\n     *\r\n     * @returns {Strophe.Status}\r\n     */\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * Adds a connection plugin to this instance.\r\n     *\r\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\r\n     * instance.\r\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\r\n     */\r\n    addConnectionPlugin(name, plugin) {\r\n        this[name] = plugin;\r\n        plugin.init(this);\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.addHandler}\r\n     *\r\n     * @returns {void}\r\n     */\r\n    addHandler(...args) {\r\n        this._stropheConn.addHandler(...args);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\r\n     * See {@link Strophe.Connection.attach} for the params description.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    attach(jid, sid, rid, callback, ...args) {\r\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\r\n    }\r\n\r\n    /**\r\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\r\n     * See {@link Strophe.Connection.connect} for the params description.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    connect(jid, pass, callback, ...args) {\r\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Handles {@link Strophe.Status} updates for the current connection.\r\n     *\r\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\r\n     * the connect methods.\r\n     * @param {Strophe.Status} status - The new connection status.\r\n     * @param {*} args - The rest of the arguments passed by Strophe.\r\n     * @private\r\n     */\r\n    _stropheConnectionCb(targetCallback, status, ...args) {\r\n        this._status = status;\r\n\r\n        let blockCallback = false;\r\n\r\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\r\n            this._maybeEnableStreamResume();\r\n            this._maybeStartWSKeepAlive();\r\n            this._processDeferredIQs();\r\n            this._resumeTask.cancel();\r\n            this.ping.startInterval(this.domain);\r\n        } else if (status === Strophe.Status.DISCONNECTED) {\r\n            this.ping.stopInterval();\r\n\r\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\r\n            blockCallback = this._tryResumingConnection();\r\n            if (!blockCallback) {\r\n                clearTimeout(this._wsKeepAlive);\r\n            }\r\n        }\r\n\r\n        if (!blockCallback) {\r\n            targetCallback(status, ...args);\r\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the list of IQs and rejects deferred Promises with an error.\r\n     *\r\n     * @private\r\n     */\r\n    _clearDeferredIQs() {\r\n        for (const deferred of this._deferredIQs) {\r\n            deferred.reject(new Error('disconnect'));\r\n        }\r\n        this._deferredIQs = [];\r\n    }\r\n\r\n    /**\r\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    closeWebsocket() {\r\n        if (this._stropheConn && this._stropheConn._proto) {\r\n            this._stropheConn._proto._closeSocket();\r\n            this._stropheConn._proto._onClose(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.disconnect}.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    disconnect(...args) {\r\n        this._resumeTask.cancel();\r\n        clearTimeout(this._wsKeepAlive);\r\n        this._clearDeferredIQs();\r\n        this._stropheConn.disconnect(...args);\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.flush}.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    flush(...args) {\r\n        this._stropheConn.flush(...args);\r\n    }\r\n\r\n    /**\r\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\r\n     *\r\n     * @returns {number|null}\r\n     */\r\n    getTimeSinceLastSuccess() {\r\n        return this._lastSuccessTracker.getTimeSinceLastSuccess();\r\n    }\r\n\r\n    /**\r\n     * Requests a resume token from the server if enabled and all requirements are met.\r\n     *\r\n     * @private\r\n     */\r\n    _maybeEnableStreamResume() {\r\n        if (!this._options.enableWebsocketResume) {\r\n\r\n            return;\r\n        }\r\n\r\n        const { streamManagement } = this._stropheConn;\r\n\r\n        if (!this.isUsingWebSocket) {\r\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\r\n        } else if (!streamManagement) {\r\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\r\n        } else if (!streamManagement.isSupported()) {\r\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\r\n        } else if (!streamManagement.getResumeToken()) {\r\n            logger.info('Enabling XEP-0198 stream management');\r\n            streamManagement.enable(/* resume */ true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the Websocket keep alive if enabled.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _maybeStartWSKeepAlive() {\r\n        const { websocketKeepAlive } = this._options;\r\n\r\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\r\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\r\n            clearTimeout(this._wsKeepAlive);\r\n\r\n            const intervalWithJitter\r\n                = /* base */ (websocketKeepAlive * 0.2) + /* jitter */ (Math.random() * 0.8 * websocketKeepAlive);\r\n\r\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\r\n\r\n            this._wsKeepAlive = setTimeout(() => {\r\n                const url = this.service.replace('wss://', 'https://').replace('ws://', 'http://');\r\n\r\n                fetch(url).catch(\r\n                    error => {\r\n                        logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\r\n                    })\r\n                    .then(() => this._maybeStartWSKeepAlive());\r\n            }, intervalWithJitter);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _processDeferredIQs() {\r\n        for (const deferred of this._deferredIQs) {\r\n            if (deferred.iq) {\r\n                clearTimeout(deferred.timeout);\r\n\r\n                const timeLeft = Date.now() - deferred.start;\r\n\r\n                this.sendIQ(\r\n                    deferred.iq,\r\n                    result => deferred.resolve(result),\r\n                    error => deferred.reject(error),\r\n                    timeLeft);\r\n            }\r\n        }\r\n\r\n        this._deferredIQs = [];\r\n    }\r\n\r\n    /**\r\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\r\n     *\r\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\r\n     * @returns {void}\r\n     */\r\n    send(stanza) {\r\n        if (!this.connected) {\r\n            throw new Error('Not connected');\r\n        }\r\n        this._stropheConn.send(stanza);\r\n    }\r\n\r\n    /**\r\n     * Helper function to send IQ stanzas.\r\n     *\r\n     * @param {Element} elem - The stanza to send.\r\n     * @param {Function} callback - The callback function for a successful request.\r\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\r\n     * be null.\r\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\r\n     * @returns {number} - The id used to send the IQ.\r\n     */\r\n    sendIQ(elem, callback, errback, timeout) {\r\n        if (!this.connected) {\r\n            errback('Not connected');\r\n\r\n            return;\r\n        }\r\n\r\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\r\n    }\r\n\r\n    /**\r\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\r\n     * which would fail immediately if disconnected).\r\n     *\r\n     * @param {Element} iq - The IQ to send.\r\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\r\n     * included, which means that the IQ may never be sent and still fail with a timeout.\r\n     */\r\n    sendIQ2(iq, { timeout }) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.connected) {\r\n                this.sendIQ(\r\n                    iq,\r\n                    result => resolve(result),\r\n                    error => reject(error),\r\n                    timeout);\r\n            } else {\r\n                const deferred = {\r\n                    iq,\r\n                    resolve,\r\n                    reject,\r\n                    start: Date.now(),\r\n                    timeout: setTimeout(() => {\r\n                        // clears the IQ on timeout and invalidates the deferred task\r\n                        deferred.iq = undefined;\r\n\r\n                        // Strophe calls with undefined on timeout\r\n                        reject(undefined);\r\n                    }, timeout)\r\n                };\r\n\r\n                this._deferredIQs.push(deferred);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called by the ping plugin when ping fails too many times.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _onPingErrorThresholdExceeded() {\r\n        if (this.isUsingWebSocket) {\r\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\r\n            this.closeWebsocket();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\r\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\r\n     *\r\n     * @param {Element} elem - The stanza to send.\r\n     * @param {Function} callback - The callback function for a successful request.\r\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\r\n     * be null.\r\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\r\n     * @returns {number} - The id used to send the presence.\r\n     */\r\n    sendPresence(elem, callback, errback, timeout) {\r\n        if (!this.connected) {\r\n            errback('Not connected');\r\n\r\n            return;\r\n        }\r\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\r\n    }\r\n\r\n    /**\r\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\r\n     *\r\n     * @returns {boolean} - true if the beacon was sent.\r\n     */\r\n    sendUnavailableBeacon() {\r\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\r\n            return false;\r\n        }\r\n\r\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\r\n        this._stropheConn.disconnecting = true;\r\n\r\n        const body = this._stropheConn._proto._buildBody()\r\n            .attrs({\r\n                type: 'terminate'\r\n            });\r\n        const pres = $pres({\r\n            xmlns: Strophe.NS.CLIENT,\r\n            type: 'unavailable'\r\n        });\r\n\r\n        body.cnode(pres.tree());\r\n\r\n        const res = navigator.sendBeacon(\r\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\r\n            Strophe.serialize(body.tree()));\r\n\r\n        logger.info(`Successfully send unavailable beacon ${res}`);\r\n\r\n        this._stropheConn._proto._abortAllRequests();\r\n        this._stropheConn._doDisconnect();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\r\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\r\n     * the token is present it means the connection can be resumed.\r\n     *\r\n     * @private\r\n     * @returns {boolean}\r\n     */\r\n    _tryResumingConnection() {\r\n        const { streamManagement } = this._stropheConn;\r\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\r\n\r\n        if (resumeToken) {\r\n            this._resumeTask.schedule();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","/**\r\n * The possible camera facing modes. For now support only 'user' and\r\n * 'environment' because 'left' and 'right' are not used anywhere in our\r\n * projects at the time of this writing. For more information please refer to\r\n * https://w3c.github.io/mediacapture-main/getusermedia.html\r\n * #def-constraint-facingMode.\r\n *\r\n * @enum {string}\r\n */\r\nconst CameraFacingMode = {\r\n    /**\r\n     * The mode which specifies the environment-facing camera.\r\n     */\r\n    ENVIRONMENT: 'environment',\r\n\r\n    /**\r\n     * The mode which specifies the user-facing camera.\r\n     */\r\n    USER: 'user'\r\n};\r\n\r\nmodule.exports = CameraFacingMode;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\r\nimport browser from '../browser';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\nlet gumFunction = null;\r\n\r\n/**\r\n * Handles obtaining a stream from a screen capture on different browsers.\r\n */\r\nconst ScreenObtainer = {\r\n    /**\r\n     * If not <tt>null</tt> it means that the initialization process is still in\r\n     * progress. It is used to make desktop stream request wait and continue\r\n     * after it's done.\r\n     * {@type Promise|null}\r\n     */\r\n\r\n    obtainStream: null,\r\n\r\n    /**\r\n     * Initializes the function used to obtain a screen capture\r\n     * (this.obtainStream).\r\n     *\r\n     * @param {object} options\r\n     * @param {Function} gum GUM method\r\n     */\r\n    init(options = {}, gum) {\r\n        this.options = options;\r\n        gumFunction = gum;\r\n\r\n        this.obtainStream = this._createObtainStreamMethod();\r\n\r\n        if (!this.obtainStream) {\r\n            logger.info('Desktop sharing disabled');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns a method which will be used to obtain the screen sharing stream\r\n     * (based on the browser type).\r\n     *\r\n     * @returns {Function}\r\n     * @private\r\n     */\r\n    _createObtainStreamMethod() {\r\n        if (browser.isNWJS()) {\r\n            return (_, onSuccess, onFailure) => {\r\n                window.JitsiMeetNW.obtainDesktopStream(\r\n                    onSuccess,\r\n                    (error, constraints) => {\r\n                        let jitsiError;\r\n\r\n                        // FIXME:\r\n                        // This is very very dirty fix for recognising that the\r\n                        // user have clicked the cancel button from the Desktop\r\n                        // sharing pick window. The proper solution would be to\r\n                        // detect this in the NWJS application by checking the\r\n                        // streamId === \"\". Even better solution would be to\r\n                        // stop calling GUM from the NWJS app and just pass the\r\n                        // streamId to lib-jitsi-meet. This way the desktop\r\n                        // sharing implementation for NWJS and chrome extension\r\n                        // will be the same and lib-jitsi-meet will be able to\r\n                        // control the constraints, check the streamId, etc.\r\n                        //\r\n                        // I cannot find documentation about \"InvalidStateError\"\r\n                        // but this is what we are receiving from GUM when the\r\n                        // streamId for the desktop sharing is \"\".\r\n\r\n                        if (error && error.name === 'InvalidStateError') {\r\n                            jitsiError = new JitsiTrackError(\r\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\r\n                            );\r\n                        } else {\r\n                            jitsiError = new JitsiTrackError(\r\n                                error, constraints, [ 'desktop' ]);\r\n                        }\r\n                        (typeof onFailure === 'function')\r\n                            && onFailure(jitsiError);\r\n                    });\r\n            };\r\n        } else if (browser.isElectron()) {\r\n            return this.obtainScreenOnElectron;\r\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\r\n            return this.obtainScreenFromGetDisplayMediaRN;\r\n        } else if (browser.supportsGetDisplayMedia()) {\r\n            return this.obtainScreenFromGetDisplayMedia;\r\n        }\r\n        logger.log('Screen sharing not supported on ', browser.getName());\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Checks whether obtaining a screen capture is supported in the current\r\n     * environment.\r\n     * @returns {boolean}\r\n     */\r\n    isSupported() {\r\n        return this.obtainStream !== null;\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream on Electron.\r\n     *\r\n     * @param {Object} [options] - Screen sharing options.\r\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\r\n     * sources that have to be displayed in the desktop picker window ('screen',\r\n     * 'window', etc.).\r\n     * @param onSuccess - Success callback.\r\n     * @param onFailure - Failure callback.\r\n     */\r\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\r\n        if (window.JitsiMeetScreenObtainer\r\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\r\n            const { desktopSharingSources, gumOptions } = options;\r\n\r\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\r\n                {\r\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\r\n                },\r\n                (streamId, streamType, screenShareAudio = false) =>\r\n                    onGetStreamResponse(\r\n                        {\r\n                            response: {\r\n                                streamId,\r\n                                streamType,\r\n                                screenShareAudio\r\n                            },\r\n                            gumOptions\r\n                        },\r\n                        onSuccess,\r\n                        onFailure\r\n                    ),\r\n                err => onFailure(new JitsiTrackError(\r\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\r\n                    err\r\n                ))\r\n            );\r\n        } else {\r\n            onFailure(new JitsiTrackError(\r\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream using getDisplayMedia.\r\n     *\r\n     * @param callback - The success callback.\r\n     * @param errorCallback - The error callback.\r\n     */\r\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\r\n        logger.info('Using getDisplayMedia for screen sharing');\r\n\r\n        let getDisplayMedia;\r\n\r\n        if (navigator.getDisplayMedia) {\r\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\r\n        } else {\r\n            // eslint-disable-next-line max-len\r\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\r\n        }\r\n\r\n        getDisplayMedia({\r\n            video: true,\r\n            audio: true,\r\n            cursor: 'always'\r\n        })\r\n            .then(stream => {\r\n                let applyConstraintsPromise;\r\n\r\n                if (stream\r\n                    && stream.getTracks()\r\n                    && stream.getTracks().length > 0) {\r\n                    const videoTrack = stream.getVideoTracks()[0];\r\n\r\n                    // Apply video track constraint.\r\n                    if (videoTrack) {\r\n                        applyConstraintsPromise = videoTrack.applyConstraints(options.trackOptions);\r\n                    }\r\n                } else {\r\n                    applyConstraintsPromise = Promise.resolve();\r\n                }\r\n\r\n                applyConstraintsPromise.then(() =>\r\n                    callback({\r\n                        stream,\r\n                        sourceId: stream.id\r\n                    }));\r\n            })\r\n            .catch(error => {\r\n                const errorDetails = {\r\n                    errorName: error && error.name,\r\n                    errorMsg: error && error.message,\r\n                    errorStack: error && error.stack\r\n                };\r\n\r\n                logger.error('getDisplayMedia error', errorDetails);\r\n\r\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\r\n                    // On Chrome this is the only thing different between error returned when user cancels\r\n                    // and when no permission was given on the OS level.\r\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\r\n\r\n                    return;\r\n                }\r\n\r\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\r\n            });\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream using getDisplayMedia.\r\n     *\r\n     * @param callback - The success callback.\r\n     * @param errorCallback - The error callback.\r\n     */\r\n    obtainScreenFromGetDisplayMediaRN(options, callback, errorCallback) {\r\n        logger.info('Using getDisplayMedia for screen sharing');\r\n\r\n        navigator.mediaDevices.getDisplayMedia({ video: true })\r\n            .then(stream => {\r\n                callback({\r\n                    stream,\r\n                    sourceId: stream.id });\r\n            })\r\n            .catch(() => {\r\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\r\n                    .SCREENSHARING_USER_CANCELED));\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Handles response from external application / extension and calls GUM to\r\n * receive the desktop streams or reports error.\r\n * @param {object} options\r\n * @param {object} options.response\r\n * @param {string} options.response.streamId - the streamId for the desktop\r\n * stream.\r\n * @param {bool}   options.response.screenShareAudio - Used by electron clients to\r\n * enable system audio screen sharing.\r\n * @param {string} options.response.error - error to be reported.\r\n * @param {object} options.gumOptions - options passed to GUM.\r\n * @param {Function} onSuccess - callback for success.\r\n * @param {Function} onFailure - callback for failure.\r\n * @param {object} gumOptions - options passed to GUM.\r\n */\r\nfunction onGetStreamResponse(\r\n        options = {\r\n            response: {},\r\n            gumOptions: {}\r\n        },\r\n        onSuccess,\r\n        onFailure) {\r\n    const { streamId, streamType, screenShareAudio, error } = options.response || {};\r\n\r\n    if (streamId) {\r\n        const gumOptions = {\r\n            desktopStream: streamId,\r\n            screenShareAudio,\r\n            ...options.gumOptions\r\n        };\r\n\r\n        gumFunction([ 'desktop' ], gumOptions)\r\n            .then(stream => onSuccess({\r\n                stream,\r\n                sourceId: streamId,\r\n                sourceType: streamType\r\n            }), onFailure);\r\n    } else {\r\n        // As noted in Chrome Desktop Capture API:\r\n        // If user didn't select any source (i.e. canceled the prompt)\r\n        // then the callback is called with an empty streamId.\r\n        if (streamId === '') {\r\n            onFailure(new JitsiTrackError(\r\n                JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\r\n\r\n            return;\r\n        }\r\n\r\n        onFailure(new JitsiTrackError(\r\n            JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR,\r\n            error));\r\n    }\r\n}\r\n\r\nexport default ScreenObtainer;\r\n","const currentExecutingScript = require('current-executing-script');\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Implements utility functions which facilitate the dealing with scripts such\r\n * as the download and execution of a JavaScript file.\r\n */\r\nconst ScriptUtil = {\r\n    /**\r\n     * Loads a script from a specific source.\r\n     *\r\n     * @param src the source from the which the script is to be (down)loaded\r\n     * @param async true to asynchronously load the script or false to\r\n     * synchronously load the script\r\n     * @param prepend true to schedule the loading of the script as soon as\r\n     * possible or false to schedule the loading of the script at the end of the\r\n     * scripts known at the time\r\n     * @param relativeURL whether we need load the library from url relative\r\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\r\n     * library from different location than the app that is using it\r\n     * @param loadCallback on load callback function\r\n     * @param errorCallback callback to be called on error loading the script\r\n     */\r\n    loadScript(\r\n            src,\r\n            async,\r\n            prepend,\r\n            relativeURL,\r\n            loadCallback,\r\n            errorCallback) {\r\n        const d = document;\r\n        const tagName = 'script';\r\n        const script = d.createElement(tagName);\r\n        const referenceNode = d.getElementsByTagName(tagName)[0];\r\n\r\n        script.async = async;\r\n\r\n        if (relativeURL) {\r\n            // finds the src url of the current loaded script\r\n            // and use it as base of the src supplied argument\r\n            const scriptEl = currentExecutingScript();\r\n\r\n            if (scriptEl) {\r\n                const scriptSrc = scriptEl.src;\r\n                const baseScriptSrc\r\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\r\n\r\n                if (scriptSrc && baseScriptSrc) {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    src = baseScriptSrc + src;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (loadCallback) {\r\n            script.onload = loadCallback;\r\n        }\r\n        if (errorCallback) {\r\n            script.onerror = errorCallback;\r\n        }\r\n\r\n        script.src = src;\r\n        if (prepend) {\r\n            referenceNode.parentNode.insertBefore(script, referenceNode);\r\n        } else {\r\n            referenceNode.parentNode.appendChild(script);\r\n        }\r\n    }\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\nmodule.exports = ScriptUtil;\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Default value of 500 milliseconds for\r\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\r\n *\r\n * @type {number}\r\n */\r\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\r\n\r\n/**\r\n * Default value of 2000 milliseconds for\r\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\r\n *\r\n * @type {number}\r\n */\r\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\r\n\r\n/**\r\n * The time to wait a track to be restored. Track which was out of lastN\r\n * should be inactive and when entering lastN it becomes restoring and when\r\n * data is received from bridge it will become active, but if no data is\r\n * received for some time we set status of that participant connection to\r\n * interrupted.\r\n * @type {number}\r\n */\r\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\r\n\r\n/**\r\n * Participant connection statuses.\r\n *\r\n * @type {{\r\n *      ACTIVE: string,\r\n *      INACTIVE: string,\r\n *      INTERRUPTED: string,\r\n *      RESTORING: string\r\n * }}\r\n */\r\nexport const ParticipantConnectionStatus = {\r\n    /**\r\n     * Status indicating that connection is currently active.\r\n     */\r\n    ACTIVE: 'active',\r\n\r\n    /**\r\n     * Status indicating that connection is currently inactive.\r\n     * Inactive means the connection was stopped on purpose from the bridge,\r\n     * like exiting lastN or adaptivity decided to drop video because of not\r\n     * enough bandwidth.\r\n     */\r\n    INACTIVE: 'inactive',\r\n\r\n    /**\r\n     * Status indicating that connection is currently interrupted.\r\n     */\r\n    INTERRUPTED: 'interrupted',\r\n\r\n    /**\r\n     * Status indicating that connection is currently restoring.\r\n     */\r\n    RESTORING: 'restoring'\r\n};\r\n\r\n/**\r\n * Class is responsible for emitting\r\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\r\n */\r\nexport default class ParticipantConnectionStatusHandler {\r\n    /* eslint-disable max-params*/\r\n    /**\r\n     * Calculates the new {@link ParticipantConnectionStatus} based on\r\n     * the values given for some specific remote user. It is assumed that\r\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\r\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\r\n     * data from the user for the last 15 seconds.\r\n     * @param {boolean} isInLastN indicates whether the user is in the last N\r\n     * set. When set to false it means that JVB is not sending any video for\r\n     * the user.\r\n     * @param {boolean} isRestoringTimedout if true it means that the user has\r\n     * been outside of last N too long to be considered\r\n     * {@link ParticipantConnectionStatus.RESTORING}.\r\n     * @param {boolean} isVideoMuted true if the user is video muted and we\r\n     * should not expect to receive any video.\r\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\r\n     * frozen detection then it will be set to true when the video track is\r\n     * frozen. If the current browser does not support frozen detection the it's\r\n     * always false.\r\n     * @return {ParticipantConnectionStatus} the new connection status for\r\n     * the user for whom the values above were provided.\r\n     * @private\r\n     */\r\n    static _getNewStateForJvbMode(\r\n            isConnectionActiveByJvb,\r\n            isInLastN,\r\n            isRestoringTimedout,\r\n            isVideoMuted,\r\n            isVideoTrackFrozen) {\r\n        if (!isConnectionActiveByJvb) {\r\n            // when there is a connection problem signaled from jvb\r\n            // it means no media was flowing for at least 15secs, so both audio\r\n            // and video are most likely interrupted\r\n            return ParticipantConnectionStatus.INTERRUPTED;\r\n        } else if (isVideoMuted) {\r\n            // If the connection is active according to JVB and the user is\r\n            // video muted there is no way for the connection to be inactive,\r\n            // because the detection logic below only makes sense for video.\r\n            return ParticipantConnectionStatus.ACTIVE;\r\n        }\r\n\r\n        // Logic when isVideoTrackFrozen is supported\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n            if (!isVideoTrackFrozen) {\r\n                // If the video is playing we're good\r\n                return ParticipantConnectionStatus.ACTIVE;\r\n            } else if (isInLastN) {\r\n                return isRestoringTimedout\r\n                    ? ParticipantConnectionStatus.INTERRUPTED\r\n                    : ParticipantConnectionStatus.RESTORING;\r\n            }\r\n\r\n            return ParticipantConnectionStatus.INACTIVE;\r\n        }\r\n\r\n        // Because this browser is incapable of detecting frozen video we must\r\n        // rely on the lastN value\r\n        return isInLastN\r\n            ? ParticipantConnectionStatus.ACTIVE\r\n            : ParticipantConnectionStatus.INACTIVE;\r\n    }\r\n\r\n    /* eslint-enable max-params*/\r\n\r\n    /**\r\n     * In P2P mode we don't care about any values coming from the JVB and\r\n     * the connection status can be only active or interrupted.\r\n     * @param {boolean} isVideoMuted the user if video muted\r\n     * @param {boolean} isVideoTrackFrozen true if the video track for\r\n     * the remote user is currently frozen. If the current browser does not\r\n     * support video frozen detection then it's always false.\r\n     * @return {ParticipantConnectionStatus}\r\n     * @private\r\n     */\r\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\r\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\r\n            // There's no way to detect problems in P2P when there's no video\r\n            // track frozen detection...\r\n            return ParticipantConnectionStatus.ACTIVE;\r\n        }\r\n\r\n        return isVideoMuted || !isVideoTrackFrozen\r\n            ? ParticipantConnectionStatus.ACTIVE\r\n            : ParticipantConnectionStatus.INTERRUPTED;\r\n    }\r\n\r\n    /**\r\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\r\n     *\r\n     * @constructor\r\n     * @param {RTC} rtc the RTC service instance\r\n     * @param {JitsiConference} conference parent conference instance\r\n     * @param {Object} options\r\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\r\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\r\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\r\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\r\n     */\r\n    constructor(rtc, conference, options) {\r\n        this.rtc = rtc;\r\n        this.conference = conference;\r\n\r\n        /**\r\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\r\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\r\n         * window.setTimeout.\r\n         * @type {Object.<string, number>}\r\n         */\r\n        this.trackTimers = {};\r\n\r\n        /**\r\n         * This map holds the endpoint connection status received from the JVB\r\n         * (as it might be different than the one stored in JitsiParticipant).\r\n         * Required for getting back in sync when remote video track is removed.\r\n         * @type {Object.<string, boolean>}\r\n         */\r\n        this.connStatusFromJvb = { };\r\n\r\n        /**\r\n         * If video track frozen detection through RTC mute event is supported,\r\n         * we wait some time until video track is considered frozen. But because\r\n         * when the user falls out of last N it is expected for the video to\r\n         * freeze this timeout must be significantly reduced in \"out of last N\"\r\n         * case.\r\n         *\r\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\r\n         * user is not in last N.\r\n         * @type {number}\r\n         */\r\n        this.outOfLastNTimeout\r\n            = typeof options.outOfLastNTimeout === 'number'\r\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\r\n\r\n        /**\r\n         * How long we're going to wait after the RTC video track muted event\r\n         * for the corresponding signalling mute event, before the connection\r\n         * interrupted is fired. The default value is\r\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\r\n         *\r\n         * @type {number} amount of time in milliseconds\r\n         */\r\n        this.rtcMuteTimeout\r\n            = typeof options.rtcMuteTimeout === 'number'\r\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\r\n\r\n        /**\r\n         * This map holds a timestamp indicating  when participant's video track\r\n         * was RTC muted (it is assumed that each participant can have only 1\r\n         * video track at a time). The purpose of storing the timestamp is to\r\n         * avoid the transition to disconnected status in case of legitimate\r\n         * video mute operation where the signalling video muted event can\r\n         * arrive shortly after RTC muted event.\r\n         *\r\n         * The key is participant's ID which is the same as endpoint id in\r\n         * the Colibri conference allocated on the JVB.\r\n         *\r\n         * The value is a timestamp measured in milliseconds obtained with\r\n         * <tt>Date.now()</tt>.\r\n         *\r\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\r\n         *       implemented in JitsiLocalTrack by extending the event to\r\n         *       the remote track and allowing to set different timeout for\r\n         *       local and remote tracks.\r\n         *\r\n         * @type {Object.<string, number>}\r\n         */\r\n        this.rtcMutedTimestamp = { };\r\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\r\n\r\n        /**\r\n         * This map holds the timestamps indicating when participant's video\r\n         * entered lastN set. Participants entering lastN will have connection\r\n         * status restoring and when we start receiving video will become\r\n         * active, but if video is not received for certain time\r\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\r\n         * will become interrupted.\r\n         *\r\n         * @type {Map<string, number>}\r\n         */\r\n        this.enteredLastNTimestamp = new Map();\r\n\r\n        /**\r\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\r\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\r\n         * scheduled using window.setTimeout.\r\n         *\r\n         * @type {Map<string, number>}\r\n         */\r\n        this.restoringTimers = new Map();\r\n\r\n        /**\r\n         * A map that holds the current connection status (along with all the internal events that happen\r\n         * while in that state).\r\n         *\r\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\r\n         */\r\n        this.connectionStatusMap = new Map();\r\n    }\r\n\r\n    /**\r\n     * Gets the video frozen timeout for given user.\r\n     * @param {string} id endpoint/participant ID\r\n     * @return {number} how long are we going to wait since RTC video muted\r\n     * even, before a video track is considered frozen.\r\n     * @private\r\n     */\r\n    _getVideoFrozenTimeout(id) {\r\n        return this.rtc.isInLastN(id)\r\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\r\n    }\r\n\r\n    /**\r\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\r\n     * listeners.\r\n     */\r\n    init() {\r\n\r\n        this._onEndpointConnStatusChanged\r\n            = this.onEndpointConnStatusChanged.bind(this);\r\n\r\n        this.rtc.addListener(\r\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n            this._onEndpointConnStatusChanged);\r\n\r\n        // Handles P2P status changes\r\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\r\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\r\n\r\n        // Used to send analytics events for the participant that left the call.\r\n        this._onUserLeft = this.onUserLeft.bind(this);\r\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\r\n        // events for video type tracks when they stop receiving data which is\r\n        // often a sign that remote user is having connectivity issues\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n\r\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\r\n            this.rtc.addListener(\r\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\r\n\r\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\r\n            this.rtc.addListener(\r\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\r\n\r\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\r\n            // event handlers\r\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\r\n            this.conference.on(\r\n                JitsiConferenceEvents.TRACK_ADDED,\r\n                this._onRemoteTrackAdded);\r\n\r\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\r\n            this.conference.on(\r\n                JitsiConferenceEvents.TRACK_REMOVED,\r\n                this._onRemoteTrackRemoved);\r\n\r\n            // Listened which will be bound to JitsiRemoteTrack to listen for\r\n            // signalling mute/unmute events.\r\n            this._onSignallingMuteChanged\r\n                = this.onSignallingMuteChanged.bind(this);\r\n\r\n            // Used to send an analytics event when the video type changes.\r\n            this._onTrackVideoTypeChanged\r\n                = this.onTrackVideoTypeChanged.bind(this);\r\n        }\r\n\r\n        this._onLastNChanged = this._onLastNChanged.bind(this);\r\n        this.conference.on(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            this._onLastNChanged);\r\n\r\n        this._onLastNValueChanged\r\n            = this.refreshConnectionStatusForAll.bind(this);\r\n        this.rtc.on(\r\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\r\n    }\r\n\r\n    /**\r\n     * Removes all event listeners and disposes of all resources held by this\r\n     * instance.\r\n     */\r\n    dispose() {\r\n\r\n        this.rtc.removeListener(\r\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n            this._onEndpointConnStatusChanged);\r\n\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n            this.rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_MUTE,\r\n                this._onTrackRtcMuted);\r\n            this.rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_UNMUTE,\r\n                this._onTrackRtcUnmuted);\r\n\r\n            this.conference.off(\r\n                JitsiConferenceEvents.TRACK_ADDED,\r\n                this._onRemoteTrackAdded);\r\n            this.conference.off(\r\n                JitsiConferenceEvents.TRACK_REMOVED,\r\n                this._onRemoteTrackRemoved);\r\n        }\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            this._onLastNChanged);\r\n\r\n        this.rtc.removeListener(\r\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n        const participantIds = Object.keys(this.trackTimers);\r\n\r\n        for (const participantId of participantIds) {\r\n            this.clearTimeout(participantId);\r\n            this.clearRtcMutedTimestamp(participantId);\r\n        }\r\n\r\n        for (const id in this.connectionStatusMap) {\r\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\r\n                this.onUserLeft(id);\r\n            }\r\n        }\r\n\r\n        // Clear RTC connection status cache\r\n        this.connStatusFromJvb = {};\r\n    }\r\n\r\n    /**\r\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\r\n     * notification over the data channel from the bridge about endpoint's\r\n     * connection status update.\r\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\r\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\r\n     */\r\n    onEndpointConnStatusChanged(endpointId, isActive) {\r\n\r\n        logger.debug(\r\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\r\n                endpointId}: ${isActive}`);\r\n\r\n        // Filter out events for the local JID for now\r\n        if (endpointId !== this.conference.myUserId()) {\r\n            // Store the status received over the data channels\r\n            this.connStatusFromJvb[endpointId] = isActive;\r\n            this.figureOutConnectionStatus(endpointId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes connection status.\r\n     * @param {JitsiParticipant} participant\r\n     * @param newStatus\r\n     */\r\n    _changeConnectionStatus(participant, newStatus) {\r\n        if (participant.getConnectionStatus() !== newStatus) {\r\n\r\n            const endpointId = participant.getId();\r\n\r\n            participant._setConnectionStatus(newStatus);\r\n\r\n            logger.debug(\r\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\r\n                    newStatus}`);\r\n\r\n            // Log the event on CallStats\r\n            Statistics.sendLog(\r\n                JSON.stringify({\r\n                    id: 'peer.conn.status',\r\n                    participant: endpointId,\r\n                    status: newStatus\r\n                }));\r\n\r\n\r\n            this.conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\r\n                endpointId, newStatus);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the postponed \"connection interrupted\" event which was previously\r\n     * scheduled as a timeout on RTC 'onmute' event.\r\n     *\r\n     * @param {string} participantId - The participant for which the \"connection\r\n     * interrupted\" timeout was scheduled.\r\n     */\r\n    clearTimeout(participantId) {\r\n        if (this.trackTimers[participantId]) {\r\n            window.clearTimeout(this.trackTimers[participantId]);\r\n            this.trackTimers[participantId] = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the timestamp of the RTC muted event for participant's video track\r\n     * @param {string} participantId the id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     */\r\n    clearRtcMutedTimestamp(participantId) {\r\n        this.rtcMutedTimestamp[participantId] = null;\r\n    }\r\n\r\n    /**\r\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\r\n     * a new one is added to the conference.\r\n     *\r\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\r\n     * the conference.\r\n     */\r\n    onRemoteTrackAdded(remoteTrack) {\r\n        if (!remoteTrack.isLocal()\r\n                && remoteTrack.getType() === MediaType.VIDEO) {\r\n\r\n            logger.debug(\r\n                `Detector on remote track added for: ${\r\n                    remoteTrack.getParticipantId()}`);\r\n\r\n            remoteTrack.on(\r\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n                this._onSignallingMuteChanged);\r\n            remoteTrack.on(\r\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\r\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all event listeners bound to the remote video track and clears\r\n     * any related timeouts.\r\n     *\r\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\r\n     * removed from the conference.\r\n     */\r\n    onRemoteTrackRemoved(remoteTrack) {\r\n        if (!remoteTrack.isLocal()\r\n                && remoteTrack.getType() === MediaType.VIDEO) {\r\n\r\n            const endpointId = remoteTrack.getParticipantId();\r\n\r\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\r\n\r\n            remoteTrack.off(\r\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n                this._onSignallingMuteChanged);\r\n\r\n            this.clearTimeout(endpointId);\r\n            this.clearRtcMutedTimestamp(endpointId);\r\n\r\n            this.figureOutConnectionStatus(endpointId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if given participant's video is considered frozen.\r\n     * @param {JitsiParticipant} participant - The participant.\r\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\r\n     * participant or <tt>false</tt> when it's either not considered frozen\r\n     * (yet) or if freeze detection is not supported by the current browser.\r\n     *\r\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\r\n     *       implemented in JitsiLocalTrack by extending the event to\r\n     *       the remote track and allowing to set different timeout for\r\n     *       local and remote tracks.\r\n     *\r\n     */\r\n    isVideoTrackFrozen(participant) {\r\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\r\n            return false;\r\n        }\r\n\r\n        const id = participant.getId();\r\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\r\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\r\n        const timeout = this._getVideoFrozenTimeout(id);\r\n\r\n        return hasAnyVideoRTCMuted\r\n            && typeof rtcMutedTimestamp === 'number'\r\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\r\n    }\r\n\r\n    /**\r\n     * Goes over every participant and updates connectivity status.\r\n     * Should be called when a parameter which affects all of the participants\r\n     * is changed (P2P for example).\r\n     */\r\n    refreshConnectionStatusForAll() {\r\n        const participants = this.conference.getParticipants();\r\n\r\n        for (const participant of participants) {\r\n            this.figureOutConnectionStatus(participant.getId());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Figures out (and updates) the current connectivity status for\r\n     * the participant identified by the given id.\r\n     *\r\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\r\n     */\r\n    figureOutConnectionStatus(id) {\r\n        const participant = this.conference.getParticipantById(id);\r\n\r\n        if (!participant) {\r\n            // Probably the participant is no longer in the conference\r\n            // (at the time of writing this code, participant is\r\n            // detached from the conference and TRACK_REMOVED events are\r\n            // fired),\r\n            // so we don't care, but let's print a log message for debugging purposes.\r\n            logger.debug(`figure out conn status - no participant for: ${id}`);\r\n\r\n            return;\r\n        }\r\n\r\n        const inP2PMode = this.conference.isP2PActive();\r\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\r\n        const audioOnlyMode = this.rtc.getLastN() === 0;\r\n\r\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\r\n        // any detection based on video playback or the last N.\r\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\r\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\r\n        const isInLastN = this.rtc.isInLastN(id);\r\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\r\n\r\n        if (typeof isConnActiveByJvb !== 'boolean') {\r\n            // If no status was received from the JVB it means that it's active\r\n            // (the bridge does not send notification unless there is a problem)\r\n            logger.debug('Assuming connection active by JVB - no notification');\r\n            isConnActiveByJvb = true;\r\n        }\r\n\r\n        const newState\r\n            = inP2PMode\r\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\r\n                    isVideoMuted,\r\n                    isVideoTrackFrozen)\r\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\r\n                    isConnActiveByJvb,\r\n                    isInLastN,\r\n                    isRestoringTimedOut,\r\n                    isVideoMuted,\r\n                    isVideoTrackFrozen);\r\n\r\n        // if the new state is not restoring clear timers and timestamps\r\n        // that we use to track the restoring state\r\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\r\n            this._clearRestoringTimer(id);\r\n        }\r\n\r\n        logger.debug(\r\n            `Figure out conn status for ${id}, is video muted: ${\r\n                isVideoMuted} is active(jvb): ${\r\n                isConnActiveByJvb} video track frozen: ${\r\n                isVideoTrackFrozen} p2p mode: ${\r\n                inP2PMode} is in last N: ${\r\n                isInLastN} currentStatus => newStatus: ${\r\n                participant.getConnectionStatus()} => ${newState}`);\r\n\r\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\r\n\r\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\r\n        // since the last time this code block run).\r\n        if (!('p2p' in oldConnectionStatus)\r\n            || !('connectionStatus' in oldConnectionStatus)\r\n            || oldConnectionStatus.p2p !== inP2PMode\r\n            || oldConnectionStatus.connectionStatus !== newState) {\r\n\r\n            const nowMs = Date.now();\r\n\r\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\r\n\r\n            this.connectionStatusMap[id] = {\r\n                ...oldConnectionStatus,\r\n                connectionStatus: newState,\r\n                p2p: inP2PMode,\r\n                startedMs: nowMs\r\n            };\r\n\r\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\r\n            // video type is not in oldConnectionStatus.\r\n            if (!('videoType' in this.connectionStatusMap[id])) {\r\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n\r\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\r\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\r\n                }\r\n            }\r\n        }\r\n        this._changeConnectionStatus(participant, newState);\r\n    }\r\n\r\n    /**\r\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\r\n     * in the INTERRUPTED state) and sends a participant connection status event.\r\n     * @param {string} id - The jid of the participant.\r\n     * @param {Number} nowMs - The current time (in millis).\r\n     * @returns {void}\r\n     */\r\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\r\n        const participantConnectionStatus = this.connectionStatusMap[id];\r\n\r\n        if (participantConnectionStatus\r\n            && 'startedMs' in participantConnectionStatus\r\n            && 'videoType' in participantConnectionStatus\r\n            && 'connectionStatus' in participantConnectionStatus\r\n            && 'p2p' in participantConnectionStatus) {\r\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\r\n            Statistics.sendAnalytics(\r\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On change in Last N set check all leaving and entering participants to\r\n     * change their corresponding statuses.\r\n     *\r\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\r\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\r\n     * @private\r\n     */\r\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\r\n        const now = Date.now();\r\n\r\n        logger.debug(\r\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\r\n\r\n        for (const id of leavingLastN) {\r\n            this.enteredLastNTimestamp.delete(id);\r\n            this._clearRestoringTimer(id);\r\n            this.figureOutConnectionStatus(id);\r\n        }\r\n        for (const id of enteringLastN) {\r\n            // store the timestamp this id is entering lastN\r\n            this.enteredLastNTimestamp.set(id, now);\r\n            this.figureOutConnectionStatus(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the restoring timer for participant's video track and the\r\n     * timestamp for entering lastN.\r\n     *\r\n     * @param {string} participantId - The id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     */\r\n    _clearRestoringTimer(participantId) {\r\n        const rTimer = this.restoringTimers.get(participantId);\r\n\r\n        if (rTimer) {\r\n            clearTimeout(rTimer);\r\n            this.restoringTimers.delete(participantId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a track had stayed enough in restoring state, compares\r\n     * current time and the time the track entered in lastN. If it hasn't\r\n     * timedout and there is no timer added, add new timer in order to give it\r\n     * more time to become active or mark it as interrupted on next check.\r\n     *\r\n     * @param {string} participantId - The id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\r\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\r\n     * set its status to interrupted.\r\n     * @private\r\n     */\r\n    _isRestoringTimedout(participantId) {\r\n        const enteredLastNTimestamp\r\n            = this.enteredLastNTimestamp.get(participantId);\r\n\r\n        if (enteredLastNTimestamp\r\n            && (Date.now() - enteredLastNTimestamp)\r\n                >= DEFAULT_RESTORING_TIMEOUT) {\r\n            return true;\r\n        }\r\n\r\n        // still haven't reached timeout, if there is no timer scheduled,\r\n        // schedule one so we can track the restoring state and change it after\r\n        // reaching the timeout\r\n        const rTimer = this.restoringTimers.get(participantId);\r\n\r\n        if (!rTimer) {\r\n            this.restoringTimers.set(participantId, setTimeout(\r\n                () => this.figureOutConnectionStatus(participantId),\r\n                DEFAULT_RESTORING_TIMEOUT));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sends a last/final participant connection status event for the participant that left the conference.\r\n     * @param {string} id - The id of the participant that left the conference.\r\n     * @returns {void}\r\n     */\r\n    onUserLeft(id) {\r\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\r\n        delete this.connectionStatusMap[id];\r\n    }\r\n\r\n    /**\r\n     * Handles RTC 'onmute' event for the video track.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\r\n     * will be processed.\r\n     */\r\n    onTrackRtcMuted(track) {\r\n        const participantId = track.getParticipantId();\r\n        const participant = this.conference.getParticipantById(participantId);\r\n\r\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\r\n        if (!participant) {\r\n            logger.error(`No participant for id: ${participantId}`);\r\n\r\n            return;\r\n        }\r\n        this.rtcMutedTimestamp[participantId] = Date.now();\r\n        if (!participant.isVideoMuted()) {\r\n            // If the user is not muted according to the signalling we'll give\r\n            // it some time, before the connection interrupted event is\r\n            // triggered.\r\n            this.clearTimeout(participantId);\r\n\r\n            // The timeout is reduced when user is not in the last N\r\n            const timeout = this._getVideoFrozenTimeout(participantId);\r\n\r\n            this.trackTimers[participantId] = window.setTimeout(() => {\r\n                logger.debug(\r\n                    `Set RTC mute timeout for: ${participantId}\\\r\n                     of ${timeout} ms`);\r\n                this.clearTimeout(participantId);\r\n                this.figureOutConnectionStatus(participantId);\r\n            }, timeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles RTC 'onunmute' event for the video track.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\r\n     * event will be processed.\r\n     */\r\n    onTrackRtcUnmuted(track) {\r\n        const participantId = track.getParticipantId();\r\n\r\n        logger.debug(\r\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\r\n\r\n        this.clearTimeout(participantId);\r\n        this.clearRtcMutedTimestamp(participantId);\r\n\r\n        this.figureOutConnectionStatus(participantId);\r\n    }\r\n\r\n    /**\r\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The remote video track for which\r\n     * the signalling mute/unmute event will be processed.\r\n     */\r\n    onSignallingMuteChanged(track) {\r\n        const participantId = track.getParticipantId();\r\n\r\n        logger.debug(\r\n            `Detector on track signalling mute changed: ${participantId}`,\r\n            track.isMuted());\r\n\r\n        this.figureOutConnectionStatus(participantId);\r\n    }\r\n\r\n    /**\r\n     * Sends a participant connection status event as a result of the video type\r\n     * changing.\r\n     * @param {JitsiRemoteTrack} track - The track.\r\n     * @param {VideoType} type - The video type.\r\n     * @returns {void}\r\n     */\r\n    onTrackVideoTypeChanged(track, type) {\r\n        const id = track.getParticipantId();\r\n        const nowMs = Date.now();\r\n\r\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\r\n\r\n        this.connectionStatusMap[id] = {\r\n            ...this.connectionStatusMap[id] || {},\r\n            videoType: type,\r\n            startedMs: nowMs\r\n        };\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Module provides information about the current status of the internet\r\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\r\n * online/offline, but rather it relies on the information supplied by the app\r\n * that uses it. By default the online state is assumed and the lib acts as if\r\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\r\n */\r\nexport class NetworkInfo extends Listenable {\r\n    /**\r\n     * Creates new {@link NetworkInfo} instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._current = {\r\n            isOnline: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Updates the network info state.\r\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\r\n     */\r\n    updateNetworkInfo({ isOnline }) {\r\n        logger.debug('updateNetworkInfo', { isOnline });\r\n        this._current = {\r\n            isOnline: isOnline === true\r\n        };\r\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\r\n    }\r\n\r\n    /**\r\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\r\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\r\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\r\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\r\n     * @returns {boolean}\r\n     */\r\n    isOnline() {\r\n        return this._current.isOnline === true;\r\n    }\r\n}\r\n\r\nconst networkInfo = new NetworkInfo();\r\n\r\nexport default networkInfo;\r\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES paramters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(parts) {\n      return parts.attribute === 'cname';\n    });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(function(line) {\n      var parts = line.substr(17).split(' ');\n      return parts.map(function(part) {\n        return parseInt(part, 10);\n      });\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(obj) {\n      return obj.attribute === 'cname';\n    })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(msidParts) {\n      return msidParts.attribute === 'msid';\n    });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n'\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n    transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n    transceiver.dtlsTransport.getLocalParameters(),\n    type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","/**\r\n * A collection of utility functions for taking in XML and parsing it to return\r\n * certain values.\r\n */\r\nexport default {\r\n    /**\r\n     * Parses the presence update of the focus and returns an object with the\r\n     * statuses related to recording.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {Object} The current presence values related to recording.\r\n     */\r\n    getFocusRecordingUpdate(presence) {\r\n        const jibriStatus = presence\r\n            && presence.getElementsByTagName('jibri-recording-status')[0];\r\n\r\n        if (!jibriStatus) {\r\n            return;\r\n        }\r\n\r\n        return {\r\n            error: jibriStatus.getAttribute('failure_reason'),\r\n            initiator: jibriStatus.getAttribute('initiator'),\r\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\r\n            sessionID: jibriStatus.getAttribute('session_id'),\r\n            status: jibriStatus.getAttribute('status')\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Parses the presence update from a hidden domain participant and returns\r\n     * an object with the statuses related to recording.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {Object} The current presence values related to recording.\r\n     */\r\n    getHiddenDomainUpdate(presence) {\r\n        const liveStreamViewURLContainer\r\n            = presence.getElementsByTagName('live-stream-view-url')[0];\r\n        const liveStreamViewURL = liveStreamViewURLContainer\r\n            && liveStreamViewURLContainer.textContent;\r\n        const modeContainer\r\n            = presence.getElementsByTagName('mode')[0];\r\n        const mode = modeContainer\r\n            && modeContainer.textContent\r\n            && modeContainer.textContent.toLowerCase();\r\n        const sessionIDContainer\r\n            = presence.getElementsByTagName('session_id')[0];\r\n        const sessionID\r\n            = sessionIDContainer && sessionIDContainer.textContent;\r\n\r\n        return {\r\n            liveStreamViewURL,\r\n            mode,\r\n            sessionID\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Returns the recording session ID from a successful IQ.\r\n     *\r\n     * @param {Node} response - The response from the IQ.\r\n     * @returns {string} The session ID of the recording session.\r\n     */\r\n    getSessionIdFromIq(response) {\r\n        const jibri = response && response.getElementsByTagName('jibri')[0];\r\n\r\n        return jibri && jibri.getAttribute('session_id');\r\n    },\r\n\r\n    /**\r\n     * Returns the recording session ID from a presence, if it exists.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {string|undefined} The session ID of the recording session.\r\n     */\r\n    getSessionId(presence) {\r\n        const sessionIdContainer\r\n            = presence.getElementsByTagName('session_id')[0];\r\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\r\n\r\n        return sessionId;\r\n    },\r\n\r\n    /**\r\n     * Returns whether or not a presence is from the focus.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {boolean} True if the presence is from the focus.\r\n     */\r\n    isFromFocus(presence) {\r\n        return presence.getAttribute('from').includes('focus');\r\n    }\r\n};\r\n","/* global __filename, Olm */\r\n\r\nimport base64js from 'base64-js';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport Deferred from '../util/Deferred';\r\nimport Listenable from '../util/Listenable';\r\nimport { JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nconst REQ_TIMEOUT = 5 * 1000;\r\nconst OLM_MESSAGE_TYPE = 'olm';\r\nconst OLM_MESSAGE_TYPES = {\r\n    ERROR: 'error',\r\n    KEY_INFO: 'key-info',\r\n    KEY_INFO_ACK: 'key-info-ack',\r\n    SESSION_ACK: 'session-ack',\r\n    SESSION_INIT: 'session-init'\r\n};\r\n\r\nconst kOlmData = Symbol('OlmData');\r\n\r\nconst OlmAdapterEvents = {\r\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\r\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\r\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\r\n};\r\n\r\n/**\r\n * This class implements an End-to-End Encrypted communication channel between every two peers\r\n * in the conference. This channel uses libolm to achieve E2EE.\r\n *\r\n * The created channel is then used to exchange the secret key that each participant will use\r\n * to encrypt the actual media (see {@link E2EEContext}).\r\n *\r\n * A simple JSON message based protocol is implemented, which follows a request - response model:\r\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\r\n *                 by the participant who just joined, to everyone else.\r\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\r\n *                encrypted data, more specifically the sender's current key.\r\n * - key-info: Includes the sender's most up to date key information.\r\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\r\n *                 the sender's key information, if available.\r\n * - error: Indicates a request processing error has occurred.\r\n *\r\n * These requessts and responses are transport independent. Currently they are sent using XMPP\r\n * MUC private messages.\r\n */\r\nexport class OlmAdapter extends Listenable {\r\n    /**\r\n     * Creates an adapter instance for the given conference.\r\n     */\r\n    constructor(conference) {\r\n        super();\r\n\r\n        this._conf = conference;\r\n        this._init = new Deferred();\r\n        this._key = undefined;\r\n        this._keyIndex = -1;\r\n        this._reqs = new Map();\r\n\r\n        if (OlmAdapter.isSupported()) {\r\n            this._bootstrapOlm();\r\n\r\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_JOINED, this._onConferenceJoined.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\r\n        } else {\r\n            this._init.reject(new Error('Olm not supported'));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates if olm is supported on the current platform.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    static isSupported() {\r\n        return typeof window.Olm !== 'undefined';\r\n    }\r\n\r\n    /**\r\n     * Updates the current participant key and distributes it to all participants in the conference\r\n     * by sending a key-info message.\r\n     *\r\n     * @param {Uint8Array|boolean} key - The new key.\r\n     * @returns {number}\r\n     */\r\n    async updateCurrentKey(key) {\r\n        this._key = key;\r\n\r\n        return this._keyIndex;\r\n    }\r\n\r\n    /**\r\n     * Updates the current participant key and distributes it to all participants in the conference\r\n     * by sending a key-info message.\r\n     *\r\n     * @param {Uint8Array|boolean} key - The new key.\r\n     * @retrns {Promise<Number>}\r\n     */\r\n    async updateKey(key) {\r\n        // Store it locally for new sessions.\r\n        this._key = key;\r\n        this._keyIndex++;\r\n\r\n        // Broadcast it.\r\n        const promises = [];\r\n\r\n        for (const participant of this._conf.getParticipants()) {\r\n            const pId = participant.getId();\r\n            const olmData = this._getParticipantOlmData(participant);\r\n\r\n            // TODO: skip those who don't support E2EE.\r\n\r\n            if (!olmData.session) {\r\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\r\n\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            const uuid = uuidv4();\r\n            const data = {\r\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                olm: {\r\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\r\n                    data: {\r\n                        ciphertext: this._encryptKeyInfo(olmData.session),\r\n                        uuid\r\n                    }\r\n                }\r\n            };\r\n            const d = new Deferred();\r\n\r\n            d.setRejectTimeout(REQ_TIMEOUT);\r\n            d.catch(() => {\r\n                this._reqs.delete(uuid);\r\n            });\r\n            this._reqs.set(uuid, d);\r\n            promises.push(d);\r\n\r\n            this._sendMessage(data, pId);\r\n        }\r\n\r\n        await Promise.allSettled(promises);\r\n\r\n        // TODO: retry failed ones?\r\n\r\n        return this._keyIndex;\r\n    }\r\n\r\n    /**\r\n     * Internal helper to bootstrap the olm library.\r\n     *\r\n     * @returns {Promise<void>}\r\n     * @private\r\n     */\r\n    async _bootstrapOlm() {\r\n        logger.debug('Initializing Olm...');\r\n\r\n        try {\r\n            await Olm.init();\r\n\r\n            this._olmAccount = new Olm.Account();\r\n            this._olmAccount.create();\r\n\r\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\r\n\r\n            this._idKey = idKeys.curve25519;\r\n\r\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\r\n            this._init.resolve();\r\n            this.eventEmitter.emit(OlmAdapterEvents.OLM_ID_KEY_READY, this._idKey);\r\n        } catch (e) {\r\n            logger.error('Failed to initialize Olm', e);\r\n            this._init.reject(e);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Internal helper for encrypting the current key information for a given participant.\r\n     *\r\n     * @param {Olm.Session} session - Participant's session.\r\n     * @returns {string} - The encrypted text with the key information.\r\n     * @private\r\n     */\r\n    _encryptKeyInfo(session) {\r\n        const keyInfo = {};\r\n\r\n        if (this._key !== undefined) {\r\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\r\n            keyInfo.keyIndex = this._keyIndex;\r\n        }\r\n\r\n        return session.encrypt(JSON.stringify(keyInfo));\r\n    }\r\n\r\n    /**\r\n     * Internal helper for getting the olm related data associated with a participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\r\n     * @returns {Object}\r\n     * @private\r\n     */\r\n    _getParticipantOlmData(participant) {\r\n        participant[kOlmData] = participant[kOlmData] || {};\r\n\r\n        return participant[kOlmData];\r\n    }\r\n\r\n    /**\r\n     * Handles the conference joined event. Upon joining a conference, the participant\r\n     * who just joined will start new olm sessions with every other participant.\r\n     *\r\n     * @private\r\n     */\r\n    async _onConferenceJoined() {\r\n        logger.debug('Conference joined');\r\n\r\n        await this._init;\r\n\r\n        const promises = [];\r\n\r\n        // Establish a 1-to-1 Olm session with every participant in the conference.\r\n        // We are forcing the last user to join the conference to start the exchange\r\n        // so we can send some pre-established secrets in the ACK.\r\n        for (const participant of this._conf.getParticipants()) {\r\n            promises.push(this._sendSessionInit(participant));\r\n        }\r\n\r\n        await Promise.allSettled(promises);\r\n\r\n        // TODO: retry failed ones.\r\n        // TODO: skip participants which don't support E2EE.\r\n    }\r\n\r\n    /**\r\n     * Handles leaving the conference, cleaning up olm sessions.\r\n     *\r\n     * @private\r\n     */\r\n    async _onConferenceLeft() {\r\n        logger.debug('Conference left');\r\n\r\n        await this._init;\r\n\r\n        for (const participant of this._conf.getParticipants()) {\r\n            this._onParticipantLeft(participant.getId(), participant);\r\n        }\r\n\r\n        if (this._olmAccount) {\r\n            this._olmAccount.free();\r\n            this._olmAccount = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Main message handler. Handles 1-to-1 messages received from other participants\r\n     * and send the appropriate replies.\r\n     *\r\n     * @private\r\n     */\r\n    async _onEndpointMessageReceived(participant, payload) {\r\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\r\n            return;\r\n        }\r\n\r\n        if (!payload.olm) {\r\n            logger.warn('Incorrectly formatted message');\r\n\r\n            return;\r\n        }\r\n\r\n        await this._init;\r\n\r\n        const msg = payload.olm;\r\n        const pId = participant.getId();\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        switch (msg.type) {\r\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\r\n            if (olmData.session) {\r\n                logger.warn(`Participant ${pId} already has a session`);\r\n\r\n                this._sendError(participant, 'Session already established');\r\n            } else {\r\n                // Create a session for communicating with this participant.\r\n\r\n                const session = new Olm.Session();\r\n\r\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\r\n                olmData.session = session;\r\n\r\n                // Send ACK\r\n                const ack = {\r\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                    olm: {\r\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\r\n                        data: {\r\n                            ciphertext: this._encryptKeyInfo(session),\r\n                            uuid: msg.data.uuid\r\n                        }\r\n                    }\r\n                };\r\n\r\n                this._sendMessage(ack, pId);\r\n\r\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\r\n            if (olmData.session) {\r\n                logger.warn(`Participant ${pId} already has a session`);\r\n\r\n                this._sendError(participant, 'No session found');\r\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\r\n                const { ciphertext } = msg.data;\r\n                const d = this._reqs.get(msg.data.uuid);\r\n                const session = new Olm.Session();\r\n\r\n                session.create_inbound(this._olmAccount, ciphertext.body);\r\n\r\n                // Remove OT keys that have been used to setup this session.\r\n                this._olmAccount.remove_one_time_keys(session);\r\n\r\n                // Decrypt first message.\r\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\r\n\r\n                olmData.session = session;\r\n                olmData.pendingSessionUuid = undefined;\r\n\r\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\r\n\r\n                this._reqs.delete(msg.data.uuid);\r\n                d.resolve();\r\n\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key) {\r\n                    const key = base64js.toByteArray(json.key);\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    olmData.lastKey = key;\r\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                }\r\n            } else {\r\n                logger.warn('Received ACK with the wrong UUID');\r\n\r\n                this._sendError(participant, 'Invalid UUID');\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.ERROR: {\r\n            logger.error(msg.data.error);\r\n\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\r\n            if (olmData.session) {\r\n                const { ciphertext } = msg.data;\r\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key !== undefined && json.keyIndex !== undefined) {\r\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    if (!isEqual(olmData.lastKey, key)) {\r\n                        olmData.lastKey = key;\r\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                    }\r\n\r\n                    // Send ACK.\r\n                    const ack = {\r\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                        olm: {\r\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\r\n                            data: {\r\n                                ciphertext: this._encryptKeyInfo(olmData.session),\r\n                                uuid: msg.data.uuid\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    this._sendMessage(ack, pId);\r\n                }\r\n            } else {\r\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\r\n\r\n                this._sendError(participant, 'No session found while processing key-info');\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\r\n            if (olmData.session) {\r\n                const { ciphertext } = msg.data;\r\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key !== undefined && json.keyIndex !== undefined) {\r\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    if (!isEqual(olmData.lastKey, key)) {\r\n                        olmData.lastKey = key;\r\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                    }\r\n                }\r\n\r\n                const d = this._reqs.get(msg.data.uuid);\r\n\r\n                this._reqs.delete(msg.data.uuid);\r\n                d.resolve();\r\n            } else {\r\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\r\n\r\n                this._sendError(participant, 'No session found while processing key-info-ack');\r\n            }\r\n            break;\r\n        }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\r\n     *\r\n     * @private\r\n     */\r\n    _onParticipantLeft(id, participant) {\r\n        logger.debug(`Participant ${id} left`);\r\n\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        if (olmData.session) {\r\n            olmData.session.free();\r\n            olmData.session = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds and sends an error message to the target participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - The target participant.\r\n     * @param {string} error - The error message.\r\n     * @returns {void}\r\n     */\r\n    _sendError(participant, error) {\r\n        const pId = participant.getId();\r\n        const err = {\r\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n            olm: {\r\n                type: OLM_MESSAGE_TYPES.ERROR,\r\n                data: {\r\n                    error\r\n                }\r\n            }\r\n        };\r\n\r\n        this._sendMessage(err, pId);\r\n    }\r\n\r\n    /**\r\n     * Internal helper to send the given object to the given participant ID.\r\n     * This function merely exists so the transport can be easily swapped.\r\n     * Currently messages are transmitted via XMPP MUC private messages.\r\n     *\r\n     * @param {object} data - The data that will be sent to the target participant.\r\n     * @param {string} participantId - ID of the target participant.\r\n     */\r\n    _sendMessage(data, participantId) {\r\n        this._conf.sendMessage(data, participantId);\r\n    }\r\n\r\n    /**\r\n     * Builds and sends the session-init request to the target participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\r\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\r\n     * @private\r\n     */\r\n    _sendSessionInit(participant) {\r\n        const pId = participant.getId();\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        if (olmData.session) {\r\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\r\n\r\n            return Promise.reject();\r\n        }\r\n\r\n        if (olmData.pendingSessionUuid !== undefined) {\r\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\r\n\r\n            return Promise.reject();\r\n        }\r\n\r\n        // Generate a One Time Key.\r\n        this._olmAccount.generate_one_time_keys(1);\r\n\r\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\r\n        const otKey = Object.values(otKeys.curve25519)[0];\r\n\r\n        if (!otKey) {\r\n            return Promise.reject(new Error('No one-time-keys generated'));\r\n        }\r\n\r\n        // Mark the OT keys (one really) as published so they are not reused.\r\n        this._olmAccount.mark_keys_as_published();\r\n\r\n        const uuid = uuidv4();\r\n        const init = {\r\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n            olm: {\r\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\r\n                data: {\r\n                    idKey: this._idKey,\r\n                    otKey,\r\n                    uuid\r\n                }\r\n            }\r\n        };\r\n\r\n        const d = new Deferred();\r\n\r\n        d.setRejectTimeout(REQ_TIMEOUT);\r\n        d.catch(() => {\r\n            this._reqs.delete(uuid);\r\n            olmData.pendingSessionUuid = undefined;\r\n        });\r\n        this._reqs.set(uuid, d);\r\n\r\n        this._sendMessage(init, pId);\r\n\r\n        // Store the UUID for matching with the ACK.\r\n        olmData.pendingSessionUuid = uuid;\r\n\r\n        return d;\r\n    }\r\n}\r\n\r\nOlmAdapter.events = OlmAdapterEvents;\r\n\r\n/**\r\n * Helper to ensure JSON parsing always returns an object.\r\n *\r\n * @param {string} data - The data that needs to be parsed.\r\n * @returns {object} - Parsed data or empty object in case of failure.\r\n */\r\nfunction safeJsonParse(data) {\r\n    try {\r\n        return JSON.parse(data);\r\n    } catch (e) {\r\n        return {};\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport browser from '../browser';\r\n\r\nimport E2EEContext from './E2EEContext';\r\nimport { OlmAdapter } from './OlmAdapter';\r\nimport { importKey, ratchet } from './crypto-utils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Period which we'll wait before updating / rotating our keys when a participant\r\n// joins or leaves.\r\nconst DEBOUNCE_PERIOD = 5000;\r\n\r\n// We use ECDSA with Curve P-521 for the long-term signing keys. See\r\n//   https://developer.mozilla.org/en-US/docs/Web/API/EcKeyGenParams\r\nconst SIGNATURE_OPTIONS = {\r\n    name: 'ECDSA',\r\n    namedCurve: 'P-521'\r\n};\r\n\r\n/**\r\n * This module integrates {@link E2EEContext} with {@link JitsiConference} in order to enable E2E encryption.\r\n */\r\nexport class E2EEncryption {\r\n    /**\r\n     * A constructor.\r\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n\r\n        this._conferenceJoined = false;\r\n        this._enabled = false;\r\n        this._initialized = false;\r\n        this._key = undefined;\r\n        this._signatureKeyPair = undefined;\r\n\r\n        this._e2eeCtx = new E2EEContext();\r\n        this._olmAdapter = new OlmAdapter(conference);\r\n\r\n        // Debounce key rotation / ratcheting to avoid a storm of messages.\r\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\r\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\r\n\r\n        // Participant join / leave operations. Used for key advancement / rotation.\r\n        //\r\n\r\n        this.conference.on(\r\n            JitsiConferenceEvents.CONFERENCE_JOINED,\r\n            () => {\r\n                this._conferenceJoined = true;\r\n            });\r\n        this.conference.on(\r\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\r\n            this._onParticipantPropertyChanged.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this._onParticipantJoined.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this._onParticipantLeft.bind(this));\r\n\r\n        // Conference media events in order to attach the encryptor / decryptor.\r\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\r\n        // added instead of shenanigans around conference track events and track muted.\r\n        //\r\n\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n            this._onMediaSessionStarted.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.TRACK_ADDED,\r\n            track => track.isLocal() && this._onLocalTrackAdded(track));\r\n        this.conference.rtc.on(\r\n            RTCEvents.REMOTE_TRACK_ADDED,\r\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\r\n            this._trackMuteChanged.bind(this));\r\n\r\n        // Olm signalling events.\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.OLM_ID_KEY_READY,\r\n            this._onOlmIdKeyReady.bind(this));\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.PARTICIPANT_E2EE_CHANNEL_READY,\r\n            this._onParticipantE2EEChannelReady.bind(this));\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\r\n            this._onParticipantKeyUpdated.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Indicates if E2EE is supported in the current platform.\r\n     *\r\n     * @param {object} config - Global configuration.\r\n     * @returns {boolean}\r\n     */\r\n    static isSupported(config) {\r\n        return browser.supportsInsertableStreams()\r\n            && OlmAdapter.isSupported()\r\n            && !(config.testing && config.testing.disableE2EE);\r\n    }\r\n\r\n    /**\r\n     * Indicates whether E2EE is currently enabled or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isEnabled() {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * Enables / disables End-To-End encryption.\r\n     *\r\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\r\n     * @returns {void}\r\n     */\r\n    async setEnabled(enabled) {\r\n        if (enabled === this._enabled) {\r\n            return;\r\n        }\r\n\r\n        this._enabled = enabled;\r\n\r\n        if (!this._initialized && enabled) {\r\n            // Generate a frame signing key pair. Per session currently.\r\n            this._signatureKeyPair = await crypto.subtle.generateKey(SIGNATURE_OPTIONS,\r\n                true, [ 'sign', 'verify' ]);\r\n            this._e2eeCtx.setSignatureKey(this.conference.myUserId(), this._signatureKeyPair.privateKey);\r\n\r\n            // Serialize the JWK of the signing key. Using JSON, might be easy to xml-ify.\r\n            const serializedSigningKey = await crypto.subtle.exportKey('jwk', this._signatureKeyPair.publicKey);\r\n\r\n            // TODO: sign this with the OLM account key.\r\n            this.conference.setLocalParticipantProperty('e2ee.signatureKey', JSON.stringify(serializedSigningKey));\r\n\r\n            // Need to re-create the peerconnections in order to apply the insertable streams constraint.\r\n            // TODO: this was necessary due to some audio issues when indertable streams are used\r\n            // even though encryption is not performed. This should be fixed in the browser eventually.\r\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1103280\r\n            this.conference._restartMediaSessions();\r\n\r\n            this._initialized = true;\r\n        }\r\n\r\n        // Generate a random key in case we are enabling.\r\n        this._key = enabled ? this._generateKey() : false;\r\n\r\n        // Send it to others using the E2EE olm channel.\r\n        this._olmAdapter.updateKey(this._key).then(index => {\r\n            // Set our key so we begin encrypting.\r\n            this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates a new 256 bit random key.\r\n     *\r\n     * @returns {Uint8Array}\r\n     * @private\r\n     */\r\n    _generateKey() {\r\n        return window.crypto.getRandomValues(new Uint8Array(32));\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\r\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\r\n     * @private\r\n     */\r\n    _onLocalTrackAdded(track) {\r\n        for (const session of this.conference._getMediaSessions()) {\r\n            this._setupSenderE2EEForTrack(session, track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setups E2E encryption for the new session.\r\n     * @param {JingleSessionPC} session - the new media session.\r\n     * @private\r\n     */\r\n    _onMediaSessionStarted(session) {\r\n        const localTracks = this.conference.getLocalTracks();\r\n\r\n        for (const track of localTracks) {\r\n            this._setupSenderE2EEForTrack(session, track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Publushes our own Olmn id key in presence.\r\n     * @private\r\n     */\r\n    _onOlmIdKeyReady(idKey) {\r\n        logger.debug(`Olm id key ready: ${idKey}`);\r\n\r\n        // Publish it in presence.\r\n        this.conference.setLocalParticipantProperty('e2ee.idKey', idKey);\r\n    }\r\n\r\n    /**\r\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\r\n     * @private\r\n     */\r\n    _onParticipantJoined(id) {\r\n        logger.debug(`Participant ${id} joined`);\r\n\r\n        if (this._conferenceJoined && this._enabled) {\r\n            this._ratchetKey();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rotates the current key when a participant leaves the conference.\r\n     * @private\r\n     */\r\n    _onParticipantLeft(id) {\r\n        logger.debug(`Participant ${id} left`);\r\n\r\n        this._e2eeCtx.cleanup(id);\r\n\r\n        if (this._enabled) {\r\n            this._rotateKey();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event posted when the E2EE signalling channel has been established with the given participant.\r\n     * @private\r\n     */\r\n    _onParticipantE2EEChannelReady(id) {\r\n        logger.debug(`E2EE channel with participant ${id} is ready`);\r\n    }\r\n\r\n    /**\r\n     * Handles an update in a participant's key.\r\n     *\r\n     * @param {string} id - The participant ID.\r\n     * @param {Uint8Array | boolean} key - The new key for the participant.\r\n     * @param {Number} index - The new key's index.\r\n     * @private\r\n     */\r\n    _onParticipantKeyUpdated(id, key, index) {\r\n        logger.debug(`Participant ${id} updated their key`);\r\n\r\n        this._e2eeCtx.setKey(id, key, index);\r\n    }\r\n\r\n    /**\r\n     * Handles an update in a participant's presence property.\r\n     *\r\n     * @param {JitsiParticipant} participant - The participant.\r\n     * @param {string} name - The name of the property that changed.\r\n     * @param {*} oldValue - The property's previous value.\r\n     * @param {*} newValue - The property's new value.\r\n     * @private\r\n     */\r\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\r\n        switch (name) {\r\n        case 'e2ee.idKey':\r\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\r\n            break;\r\n        case 'e2ee.signatureKey':\r\n            logger.debug(`Participant ${participant.getId()} updated their signature key: ${newValue}`);\r\n            if (newValue) {\r\n                const parsed = JSON.parse(newValue);\r\n\r\n                const importedKey = await crypto.subtle.importKey('jwk', parsed, { name: 'ECDSA',\r\n                    namedCurve: parsed.crv }, true, parsed.key_ops);\r\n\r\n                this._e2eeCtx.setSignatureKey(participant.getId(), importedKey);\r\n            } else {\r\n                logger.warn(`e2ee signatureKey for ${participant.getId()} could not be updated with empty value.`);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Advances the current key by using ratcheting.\r\n     *\r\n     * @private\r\n     */\r\n    async _ratchetKeyImpl() {\r\n        logger.debug('Ratchetting key');\r\n\r\n        const material = await importKey(this._key);\r\n        const newKey = await ratchet(material);\r\n\r\n        this._key = new Uint8Array(newKey);\r\n\r\n        const index = await this._olmAdapter.updateCurrentKey(this._key);\r\n\r\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n    }\r\n\r\n    /**\r\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\r\n     * to all participants and once they all received it, start using it.\r\n     *\r\n     * @private\r\n     */\r\n    async _rotateKeyImpl() {\r\n        logger.debug('Rotating key');\r\n\r\n        this._key = this._generateKey();\r\n        const index = await this._olmAdapter.updateKey(this._key);\r\n\r\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE for the receiving side.\r\n     *\r\n     * @private\r\n     */\r\n    _setupReceiverE2EEForTrack(tpc, track) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        const receiver = tpc.findReceiverForTrack(track.track);\r\n\r\n        if (receiver) {\r\n            this._e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\r\n        } else {\r\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE for the sending side.\r\n     *\r\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\r\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\r\n     * @private\r\n     */\r\n    _setupSenderE2EEForTrack(session, track) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        const pc = session.peerconnection;\r\n        const sender = pc && pc.findSenderForTrack(track.track);\r\n\r\n        if (sender) {\r\n            this._e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\r\n        } else {\r\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE on the sender that is created for the unmuted local video track.\r\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\r\n     * @private\r\n     */\r\n    _trackMuteChanged(track) {\r\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\r\n            for (const session of this.conference._getMediaSessions()) {\r\n                this._setupSenderE2EEForTrack(session, track);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* global __filename, $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport {\r\n    ICE_DURATION,\r\n    ICE_STATE_CHANGED\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport AsyncQueue from '../util/AsyncQueue';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport { integerHash } from '../util/StringUtils';\r\n\r\nimport browser from './../browser';\r\nimport JingleSession from './JingleSession';\r\nimport * as JingleSessionState from './JingleSessionState';\r\nimport MediaSessionEvents from './MediaSessionEvents';\r\nimport SDP from './SDP';\r\nimport SDPDiffer from './SDPDiffer';\r\nimport SDPUtil from './SDPUtil';\r\nimport SignalingLayerImpl from './SignalingLayerImpl';\r\nimport XmppConnection from './XmppConnection';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Constant tells how long we're going to wait for IQ response, before timeout\r\n * error is  triggered.\r\n * @type {number}\r\n */\r\nconst IQ_TIMEOUT = 10000;\r\n\r\n/*\r\n * The default number of samples (per stat) to keep when webrtc stats gathering\r\n * is enabled in TraceablePeerConnection.\r\n */\r\nconst DEFAULT_MAX_STATS = 300;\r\n\r\n/**\r\n * @typedef {Object} JingleSessionPCOptions\r\n * @property {Object} abTesting - A/B testing related options (ask George).\r\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\r\n * video test ?(ask George).\r\n * @property {boolean} disableH264 - Described in the config.js[1].\r\n * @property {boolean} disableRtx - Described in the config.js[1].\r\n * @property {boolean} disableSimulcast - Described in the config.js[1].\r\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\r\n * on the PeerConnection.\r\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\r\n * @property {boolean} failICE - it's an option used in the tests. Set to\r\n * <tt>true</tt> to block any real candidates and make the ICE fail.\r\n * @property {boolean} gatherStats - Described in the config.js[1].\r\n * @property {object} p2p - Peer to peer related options (FIXME those could be\r\n * fetched from config.p2p on the upper level).\r\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\r\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\r\n * @property {boolean} preferH264 - Described in the config.js[1].\r\n * @property {Object} testing - Testing and/or experimental options.\r\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\r\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\r\n *\r\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\r\n */\r\n/**\r\n *\r\n */\r\nexport default class JingleSessionPC extends JingleSession {\r\n    /**\r\n     * Parses 'senders' attribute of the video content.\r\n     * @param {jQuery} jingleContents\r\n     * @return {string|null} one of the values of content \"senders\" attribute\r\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\r\n     * invalid then <tt>null</tt> will be returned.\r\n     * @private\r\n     */\r\n    static parseVideoSenders(jingleContents) {\r\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\r\n\r\n        if (videoContents.length) {\r\n            const senders = videoContents[0].getAttribute('senders');\r\n\r\n            if (senders === 'both'\r\n                || senders === 'initiator'\r\n                || senders === 'responder'\r\n                || senders === 'none') {\r\n                return senders;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses the video max frame height value out of the 'content-modify' IQ.\r\n     *\r\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\r\n     * @returns {Number|null}\r\n     */\r\n    static parseMaxFrameHeight(jingleContents) {\r\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\r\n\r\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>JingleSessionPC</tt>\r\n     * @param {string} sid the Jingle Session ID - random string which\r\n     * identifies the session\r\n     * @param {string} localJid our JID\r\n     * @param {string} remoteJid remote peer JID\r\n     * @param {XmppConnection} connection - The XMPP connection instance.\r\n     * @param mediaConstraints the media constraints object passed to\r\n     * createOffer/Answer, as defined by the WebRTC standard\r\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\r\n     * standard.\r\n     * @param {boolean} isP2P indicates whether this instance is\r\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\r\n     * if it's a JVB connection.\r\n     * @param {boolean} isInitiator indicates if it will be the side which\r\n     * initiates the session.\r\n     * @constructor\r\n     *\r\n     * @implements {SignalingLayer}\r\n     */\r\n    constructor(\r\n            sid,\r\n            localJid,\r\n            remoteJid,\r\n            connection,\r\n            mediaConstraints,\r\n            iceConfig,\r\n            isP2P,\r\n            isInitiator) {\r\n        super(\r\n            sid,\r\n            localJid,\r\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\r\n\r\n        /**\r\n         * The bridge session's identifier. One Jingle session can during\r\n         * it's lifetime participate in multiple bridge sessions managed by\r\n         * Jicofo. A new bridge session is started whenever Jicofo sends\r\n         * 'session-initiate' or 'transport-replace'.\r\n         *\r\n         * @type {?string}\r\n         * @private\r\n         */\r\n        this._bridgeSessionId = null;\r\n\r\n        /**\r\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\r\n         * used to update Jicofo once the XMPP connection goes back online.\r\n         * @type {SDP|undefined}\r\n         * @private\r\n         */\r\n        this._cachedOldLocalSdp = undefined;\r\n\r\n        /**\r\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\r\n         * used to update Jicofo once the XMPP connection goes back online.\r\n         * @type {SDP|undefined}\r\n         * @private\r\n         */\r\n        this._cachedNewLocalSdp = undefined;\r\n\r\n        /**\r\n         * Stores result of {@link window.performance.now()} at the time when\r\n         * ICE enters 'checking' state.\r\n         * @type {number|null} null if no value has been stored yet\r\n         * @private\r\n         */\r\n        this._iceCheckingStartedTimestamp = null;\r\n\r\n        /**\r\n         * Stores result of {@link window.performance.now()} at the time when\r\n         * first ICE candidate is spawned by the peerconnection to mark when\r\n         * ICE gathering started. That's, because ICE gathering state changed\r\n         * events are not supported by most of the browsers, so we try something\r\n         * that will work everywhere. It may not be as accurate, but given that\r\n         * 'host' candidate usually comes first, the delay should be minimal.\r\n         * @type {number|null} null if no value has been stored yet\r\n         * @private\r\n         */\r\n        this._gatheringStartedTimestamp = null;\r\n\r\n        /**\r\n         * Local preference for the receive video max frame height.\r\n         *\r\n         * @type {Number|undefined}\r\n         */\r\n        this.localRecvMaxFrameHeight = undefined;\r\n\r\n        /**\r\n         * Indicates whether or not this session is willing to send/receive\r\n         * video media. When set to <tt>false</tt> the underlying peer\r\n         * connection will disable local video transfer and the remote peer will\r\n         * be will be asked to stop sending video via 'content-modify' IQ\r\n         * (the senders attribute of video contents will be adjusted\r\n         * accordingly). Note that this notification is sent only in P2P\r\n         * session, because Jicofo does not support it yet. Obviously when\r\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\r\n         * notification will be sent to resume video transfer on the remote\r\n         * side.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._localVideoActive = true;\r\n\r\n        /**\r\n         * Indicates whether or not the remote peer has video transfer active.\r\n         * When set to <tt>true</tt> it means that remote peer is neither\r\n         * sending nor willing to receive video. In such case we'll ask\r\n         * our peerconnection to stop sending video by calling\r\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\r\n         * <tt>false</tt>.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._remoteVideoActive = true;\r\n\r\n        /**\r\n         * Marks that ICE gathering duration has been reported already. That\r\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\r\n         * conference migration/ICE restart).\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._gatheringReported = false;\r\n\r\n        this.lasticecandidate = false;\r\n        this.closed = false;\r\n\r\n        /**\r\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\r\n         * a peer to peer type of session.\r\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\r\n         * session or <tt>false</tt> if it's a JVB session\r\n         */\r\n        this.isP2P = isP2P;\r\n\r\n        /**\r\n         * Remote preference for the receive video max frame height.\r\n         *\r\n         * @type {Number|undefined}\r\n         */\r\n        this.remoteRecvMaxFrameHeight = undefined;\r\n\r\n        /**\r\n         * The signaling layer implementation.\r\n         * @type {SignalingLayerImpl}\r\n         */\r\n        this.signalingLayer = new SignalingLayerImpl();\r\n\r\n        /**\r\n         * The queue used to serialize operations done on the peerconnection.\r\n         *\r\n         * @type {AsyncQueue}\r\n         */\r\n        this.modificationQueue = new AsyncQueue();\r\n\r\n        /**\r\n         * Flag used to guarantee that the connection established event is\r\n         * triggered just once.\r\n         * @type {boolean}\r\n         */\r\n        this.wasConnected = false;\r\n\r\n        /**\r\n         * Keeps track of how long (in ms) it took from ICE start to ICE\r\n         * connect.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.establishmentDuration = undefined;\r\n\r\n        this._xmppListeners = [];\r\n        this._xmppListeners.push(\r\n            connection.addEventListener(\r\n                XmppConnection.Events.CONN_STATUS_CHANGED,\r\n                this.onXmppStatusChanged.bind(this))\r\n        );\r\n\r\n        this._removeSenderVideoConstraintsChangeListener = undefined;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Checks whether or not this session instance is still operational.\r\n     * @private\r\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\r\n     */\r\n    _assertNotEnded() {\r\n        return this.state !== JingleSessionState.ENDED;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @param {JingleSessionPCOptions} options  - a set of config options.\r\n     */\r\n    doInitialize(options) {\r\n        this.failICE = Boolean(options.failICE);\r\n        this.lasticecandidate = false;\r\n        this.options = options;\r\n\r\n        /**\r\n         * {@code true} if reconnect is in progress.\r\n         * @type {boolean}\r\n         */\r\n        this.isReconnect = false;\r\n\r\n        /**\r\n         * Set to {@code true} if the connection was ever stable\r\n         * @type {boolean}\r\n         */\r\n        this.wasstable = false;\r\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\r\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\r\n\r\n        const pcOptions = { disableRtx: options.disableRtx };\r\n\r\n        if (options.gatherStats) {\r\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\r\n        }\r\n        pcOptions.capScreenshareBitrate = false;\r\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\r\n        pcOptions.videoQuality = options.videoQuality;\r\n\r\n        // codec preference options for jvb connection.\r\n        if (pcOptions.videoQuality) {\r\n            pcOptions.disabledCodec = pcOptions.videoQuality.disabledCodec;\r\n            pcOptions.preferredCodec = pcOptions.videoQuality.preferredCodec;\r\n        }\r\n\r\n        if (this.isP2P) {\r\n            // simulcast needs to be disabled for P2P (121) calls\r\n            pcOptions.disableSimulcast = true;\r\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\r\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\r\n\r\n            // codec preference options for p2p.\r\n            if (options.p2p) {\r\n                // Do not negotiate H246 codec when insertable streams is used because of issues like this -\r\n                // https://bugs.chromium.org/p/webrtc/issues/detail?id=11886\r\n                pcOptions.disabledCodec = options.enableInsertableStreams\r\n                    ? CodecMimeType.H264\r\n                    : options.p2p.disabledCodec;\r\n                pcOptions.preferredCodec = options.p2p.preferredCodec;\r\n            }\r\n\r\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\r\n\r\n            if (typeof abtestSuspendVideo !== 'undefined') {\r\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\r\n            }\r\n        } else {\r\n            // H264 does not support simulcast, so it needs to be disabled.\r\n            pcOptions.disableSimulcast\r\n                = options.disableSimulcast\r\n                    || (options.preferH264 && !options.disableH264);\r\n            pcOptions.preferH264 = options.preferH264;\r\n\r\n            // disable simulcast for screenshare and set the max bitrate to\r\n            // 500Kbps if the testing flag is present in config.js.\r\n            if (options.testing\r\n                && options.testing.capScreenshareBitrate\r\n                && typeof options.testing.capScreenshareBitrate === 'number') {\r\n                pcOptions.capScreenshareBitrate\r\n                    = Math.random()\r\n                    < options.testing.capScreenshareBitrate;\r\n\r\n                // add the capScreenshareBitrate to the permanent properties so\r\n                // that it's included with every event that we send to the\r\n                // analytics backend.\r\n                Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\r\n            }\r\n        }\r\n\r\n        if (options.startSilent) {\r\n            pcOptions.startSilent = true;\r\n        }\r\n\r\n        this.peerconnection\r\n            = this.rtc.createPeerConnection(\r\n                    this.signalingLayer,\r\n                    this.iceConfig,\r\n                    this.isP2P,\r\n                    pcOptions);\r\n\r\n        this.peerconnection.onicecandidate = ev => {\r\n            if (!ev) {\r\n                // There was an incomplete check for ev before which left\r\n                // the last line of the function unprotected from a potential\r\n                // throw of an exception. Consequently, it may be argued that\r\n                // the check is unnecessary. Anyway, I'm leaving it and making\r\n                // the check complete.\r\n                return;\r\n            }\r\n\r\n            // XXX this is broken, candidate is not parsed.\r\n            const candidate = ev.candidate;\r\n            const now = window.performance.now();\r\n\r\n            if (candidate) {\r\n                if (this._gatheringStartedTimestamp === null) {\r\n                    this._gatheringStartedTimestamp = now;\r\n                }\r\n\r\n                // Discard candidates of disabled protocols.\r\n                let protocol = candidate.protocol;\r\n\r\n                if (typeof protocol === 'string') {\r\n                    protocol = protocol.toLowerCase();\r\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\r\n                        if (this.webrtcIceTcpDisable) {\r\n                            return;\r\n                        }\r\n                    } else if (protocol === 'udp') {\r\n                        if (this.webrtcIceUdpDisable) {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (!this._gatheringReported) {\r\n                // End of gathering\r\n                Statistics.sendAnalytics(\r\n                    ICE_DURATION,\r\n                    {\r\n                        phase: 'gathering',\r\n                        value: now - this._gatheringStartedTimestamp,\r\n                        p2p: this.isP2P,\r\n                        initiator: this.isInitiator\r\n                    });\r\n                this._gatheringReported = true;\r\n            }\r\n            this.sendIceCandidate(candidate);\r\n        };\r\n\r\n        // Note there is a change in the spec about closed:\r\n        // This value moved into the RTCPeerConnectionState enum in\r\n        // the May 13, 2016 draft of the specification, as it reflects the state\r\n        // of the RTCPeerConnection, not the signaling connection. You now\r\n        // detect a closed connection by checking for connectionState to be\r\n        // \"closed\" instead.\r\n        // I suppose at some point this will be moved to onconnectionstatechange\r\n        this.peerconnection.onsignalingstatechange = () => {\r\n            if (this.peerconnection.signalingState === 'stable') {\r\n                this.wasstable = true;\r\n            } else if (this.peerconnection.signalingState === 'closed'\r\n                || this.peerconnection.connectionState === 'closed') {\r\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * The oniceconnectionstatechange event handler contains the code to\r\n         * execute when the iceconnectionstatechange event, of type Event,\r\n         * is received by this RTCPeerConnection. Such an event is sent when\r\n         * the value of RTCPeerConnection.iceConnectionState changes.\r\n         */\r\n        this.peerconnection.oniceconnectionstatechange = () => {\r\n            const now = window.performance.now();\r\n\r\n            if (!this.isP2P) {\r\n                this.room.connectionTimes[\r\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\r\n                    = now;\r\n            }\r\n            logger.log(\r\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\r\n                    + ` P2P? ${this.isP2P}:\\t`,\r\n                now);\r\n\r\n            Statistics.sendAnalytics(\r\n                ICE_STATE_CHANGED,\r\n                {\r\n                    p2p: this.isP2P,\r\n                    state: this.peerconnection.iceConnectionState,\r\n                    'signaling_state': this.peerconnection.signalingState,\r\n                    reconnect: this.isReconnect,\r\n                    value: now\r\n                });\r\n\r\n            this.room.eventEmitter.emit(\r\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\r\n                this,\r\n                this.peerconnection.iceConnectionState);\r\n            switch (this.peerconnection.iceConnectionState) {\r\n            case 'checking':\r\n                this._iceCheckingStartedTimestamp = now;\r\n                break;\r\n            case 'connected':\r\n                // Informs interested parties that the connection has been\r\n                // restored.\r\n                if (this.peerconnection.signalingState === 'stable') {\r\n                    if (this.isReconnect) {\r\n                        this.room.eventEmitter.emit(\r\n                            XMPPEvents.CONNECTION_RESTORED, this);\r\n                    }\r\n                }\r\n\r\n                if (!this.wasConnected && this.wasstable) {\r\n\r\n                    Statistics.sendAnalytics(\r\n                        ICE_DURATION,\r\n                        {\r\n                            phase: 'checking',\r\n                            value: now - this._iceCheckingStartedTimestamp,\r\n                            p2p: this.isP2P,\r\n                            initiator: this.isInitiator\r\n                        });\r\n\r\n                    // Switch between ICE gathering and ICE checking whichever\r\n                    // started first (scenarios are different for initiator\r\n                    // vs responder)\r\n                    const iceStarted\r\n                        = Math.min(\r\n                            this._iceCheckingStartedTimestamp,\r\n                            this._gatheringStartedTimestamp);\r\n\r\n                    this.establishmentDuration = now - iceStarted;\r\n\r\n                    Statistics.sendAnalytics(\r\n                        ICE_DURATION,\r\n                        {\r\n                            phase: 'establishment',\r\n                            value: this.establishmentDuration,\r\n                            p2p: this.isP2P,\r\n                            initiator: this.isInitiator\r\n                        });\r\n\r\n                    this.wasConnected = true;\r\n                    this.room.eventEmitter.emit(\r\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\r\n                }\r\n                this.isReconnect = false;\r\n                break;\r\n            case 'disconnected':\r\n                this.isReconnect = true;\r\n\r\n                // Informs interested parties that the connection has been\r\n                // interrupted.\r\n                if (this.wasstable) {\r\n                    this.room.eventEmitter.emit(\r\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\r\n                }\r\n                break;\r\n            case 'failed':\r\n                this.room.eventEmitter.emit(\r\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\r\n                break;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * The negotiationneeded event is fired whenever we shake the media on the\r\n         * RTCPeerConnection object.\r\n         */\r\n        this.peerconnection.onnegotiationneeded = () => {\r\n            const state = this.peerconnection.signalingState;\r\n            const remoteDescription = this.peerconnection.remoteDescription;\r\n\r\n            if (browser.usesUnifiedPlan() && state === 'stable'\r\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\r\n                logger.debug(`onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\r\n                const workFunction = finishedCallback => {\r\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                    this._renegotiate()\r\n                        .then(() => {\r\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\r\n                            finishedCallback();\r\n                        },\r\n                        finishedCallback /* will be called with en error */);\r\n                };\r\n\r\n                this.modificationQueue.push(\r\n                    workFunction,\r\n                    error => {\r\n                        if (error) {\r\n                            logger.error('onnegotiationneeded error', error);\r\n                        } else {\r\n                            logger.debug('onnegotiationneeded executed - OK');\r\n                        }\r\n                    });\r\n            }\r\n        };\r\n\r\n        // The signaling layer will bind it's listeners at this point\r\n        this.signalingLayer.setChatRoom(this.room);\r\n\r\n        if (!this.isP2P && options.enableLayerSuspension) {\r\n            // If this is the bridge session, we'll listen for\r\n            // SENDER_VIDEO_CONSTRAINTS_CHANGED events and notify the peer connection\r\n            this._removeSenderVideoConstraintsChangeListener = this.rtc.addListener(\r\n                RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, () => {\r\n                    this.eventEmitter.emit(\r\n                        MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remote preference for receive video max frame height.\r\n     *\r\n     * @returns {Number|undefined}\r\n     */\r\n    getRemoteRecvMaxFrameHeight() {\r\n        if (this.isP2P) {\r\n            return this.remoteRecvMaxFrameHeight;\r\n        }\r\n\r\n        return this.options.enableLayerSuspension ? this.rtc.getSenderVideoConstraints().idealHeight : undefined;\r\n    }\r\n\r\n    /**\r\n     * Sends given candidate in Jingle 'transport-info' message.\r\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\r\n     * @private\r\n     */\r\n    sendIceCandidate(candidate) {\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\r\n            const ice\r\n                = SDPUtil.iceparams(\r\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\r\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\r\n\r\n            if (!(ice && jcand)) {\r\n                const errorMesssage = 'failed to get ice && jcand';\r\n\r\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\r\n                logger.error(errorMesssage);\r\n\r\n                return;\r\n            }\r\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n\r\n            if (this.usedrip) {\r\n                if (this.dripContainer.length === 0) {\r\n                    // start 20ms callout\r\n                    setTimeout(() => {\r\n                        if (this.dripContainer.length === 0) {\r\n                            return;\r\n                        }\r\n                        this.sendIceCandidates(this.dripContainer);\r\n                        this.dripContainer = [];\r\n                    }, 20);\r\n                }\r\n                this.dripContainer.push(candidate);\r\n            } else {\r\n                this.sendIceCandidates([ candidate ]);\r\n            }\r\n        } else {\r\n            logger.log('sendIceCandidate: last candidate.');\r\n\r\n            // FIXME: remember to re-think in ICE-restart\r\n            this.lasticecandidate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends given candidates in Jingle 'transport-info' message.\r\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\r\n     * candidate instances\r\n     * @private\r\n     */\r\n    sendIceCandidates(candidates) {\r\n        if (!this._assertNotEnded('sendIceCandidates')) {\r\n\r\n            return;\r\n        }\r\n\r\n        logger.log('sendIceCandidates', candidates);\r\n        const cand = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-info',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid });\r\n\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\r\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\r\n            const mline\r\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\r\n\r\n            if (cands.length > 0) {\r\n                const ice\r\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\r\n\r\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n                cand.c('content', {\r\n                    creator: this.initiatorJid === this.localJid\r\n                        ? 'initiator' : 'responder',\r\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\r\n                }).c('transport', ice);\r\n                for (let i = 0; i < cands.length; i++) {\r\n                    const candidate\r\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\r\n\r\n                    // Mangle ICE candidate if 'failICE' test option is enabled\r\n\r\n                    if (this.failICE) {\r\n                        candidate.ip = '1.1.1.1';\r\n                    }\r\n                    cand.c('candidate', candidate).up();\r\n                }\r\n\r\n                // add fingerprint\r\n                const fingerprintLine\r\n                    = SDPUtil.findLine(\r\n                        localSDP.media[mid],\r\n                        'a=fingerprint:', localSDP.session);\r\n\r\n                if (fingerprintLine) {\r\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\r\n\r\n                    tmp.required = true;\r\n                    cand.c(\r\n                        'fingerprint',\r\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\r\n                        .t(tmp.fingerprint);\r\n                    delete tmp.fingerprint;\r\n                    cand.attrs(tmp);\r\n                    cand.up();\r\n                }\r\n                cand.up(); // transport\r\n                cand.up(); // content\r\n            }\r\n        }\r\n\r\n        // might merge last-candidate notification into this, but it is called\r\n        // a lot later. See webrtc issue #2340\r\n        // logger.log('was this the last candidate', this.lasticecandidate);\r\n        this.connection.sendIQ(\r\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\r\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\r\n     * that the ICE connection has entered the failed state. It can then\r\n     * choose to re-create JVB channels and send 'transport-replace' to\r\n     * retry the connection.\r\n     */\r\n    sendIceFailedNotification() {\r\n        const sessionInfo\r\n            = $iq({\r\n                to: this.remoteJid,\r\n                type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'session-info',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid })\r\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\r\n            .t('failed')\r\n            .up();\r\n\r\n        this._bridgeSessionId\r\n            && sessionInfo.c(\r\n                'bridge-session', {\r\n                    xmlns: 'http://jitsi.org/protocol/focus',\r\n                    id: this._bridgeSessionId\r\n                });\r\n\r\n        this.connection.sendIQ2(\r\n            sessionInfo, {\r\n                /*\r\n                 * This message will be often sent when there are connectivity\r\n                 * issues, so make it slightly longer than Prosody's default BOSH\r\n                 * inactivity timeout of 60 seconds.\r\n                 */\r\n                timeout: 65\r\n            })\r\n            .catch(this.newJingleErrorHandler(sessionInfo));\r\n    }\r\n\r\n    /**\r\n     * {@inheritDoc}\r\n     */\r\n    addIceCandidates(elem) {\r\n        if (this.peerconnection.signalingState === 'closed') {\r\n            logger.warn('Ignored add ICE candidate when in closed state');\r\n\r\n            return;\r\n        }\r\n\r\n        const iceCandidates = [];\r\n\r\n        elem.find('>content>transport>candidate')\r\n            .each((idx, candidate) => {\r\n                let line = SDPUtil.candidateFromJingle(candidate);\r\n\r\n                line = line.replace('\\r\\n', '').replace('a=', '');\r\n\r\n                // FIXME this code does not care to handle\r\n                // non-bundle transport\r\n                const rtcCandidate = new RTCIceCandidate({\r\n                    sdpMLineIndex: 0,\r\n\r\n                    // FF comes up with more complex names like audio-23423,\r\n                    // Given that it works on both Chrome and FF without\r\n                    // providing it, let's leave it like this for the time\r\n                    // being...\r\n                    // sdpMid: 'audio',\r\n                    sdpMid: '',\r\n                    candidate: line\r\n                });\r\n\r\n                iceCandidates.push(rtcCandidate);\r\n            });\r\n\r\n        if (!iceCandidates.length) {\r\n            logger.error(\r\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\r\n\r\n            return;\r\n        }\r\n\r\n        // We want to have this task queued, so that we know it is executed,\r\n        // after the initial sRD/sLD offer/answer cycle was done (based on\r\n        // the assumption that candidates are spawned after the offer/answer\r\n        // and XMPP preserves order).\r\n        const workFunction = finishedCallback => {\r\n            for (const iceCandidate of iceCandidates) {\r\n                this.peerconnection.addIceCandidate(iceCandidate)\r\n                    .then(\r\n                        () => logger.debug('addIceCandidate ok!'),\r\n                        err => logger.error('addIceCandidate failed!', err));\r\n            }\r\n\r\n            finishedCallback();\r\n        };\r\n\r\n        logger.debug(\r\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\r\n        this.modificationQueue.push(workFunction);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param contents\r\n     */\r\n    readSsrcInfo(contents) {\r\n        const ssrcs\r\n            = $(contents).find(\r\n                '>description>'\r\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n        ssrcs.each((i, ssrcElement) => {\r\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\r\n\r\n            if (this.isP2P) {\r\n                // In P2P all SSRCs are owner by the remote peer\r\n                this.signalingLayer.setSSRCOwner(\r\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\r\n            } else {\r\n                $(ssrcElement)\r\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\r\n                    .each((i3, ssrcInfoElement) => {\r\n                        const owner = ssrcInfoElement.getAttribute('owner');\r\n\r\n                        if (owner && owner.length) {\r\n                            if (isNaN(ssrc) || ssrc < 0) {\r\n                                logger.warn(\r\n                                    `Invalid SSRC ${ssrc} value received`\r\n                                        + ` for ${owner}`);\r\n                            } else {\r\n                                this.signalingLayer.setSSRCOwner(\r\n                                    ssrc,\r\n                                    Strophe.getResourceFromJid(owner));\r\n                            }\r\n                        }\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\r\n     * the recvonly video stream.\r\n     * @deprecated\r\n     */\r\n    generateRecvonlySsrc() {\r\n        if (this.peerconnection) {\r\n            this.peerconnection.generateRecvonlySsrc();\r\n        } else {\r\n            logger.error(\r\n                'Unable to generate recvonly SSRC - no peerconnection');\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Accepts incoming Jingle 'session-initiate' and should send\r\n     * 'session-accept' in result.\r\n     * @param jingleOffer jQuery selector pointing to the jingle element of\r\n     * the offer IQ\r\n     * @param success callback called when we accept incoming session\r\n     * successfully and receive RESULT packet to 'session-accept' sent.\r\n     * @param failure function(error) called if for any reason we fail to accept\r\n     * the incoming offer. 'error' argument can be used to log some details\r\n     * about the error.\r\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\r\n     * the local tracks that will be added, before the offer/answer cycle\r\n     * executes. We allow the localTracks to optionally be passed in so that\r\n     * the addition of the local tracks and the processing of the initial offer\r\n     * can all be done atomically. We want to make sure that any other\r\n     * operations which originate in the XMPP Jingle messages related with\r\n     * this session to be executed with an assumption that the initial\r\n     * offer/answer cycle has been executed already.\r\n     */\r\n    acceptOffer(jingleOffer, success, failure, localTracks) {\r\n        this.setOfferAnswerCycle(\r\n            jingleOffer,\r\n            () => {\r\n                // FIXME we may not care about RESULT packet for session-accept\r\n                // then we should either call 'success' here immediately or\r\n                // modify sendSessionAccept method to do that\r\n                this.sendSessionAccept(success, failure);\r\n            },\r\n            failure,\r\n            localTracks);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\r\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\r\n     * added, before the offer/answer cycle executes (for the local track\r\n     * addition to be an atomic operation together with the offer/answer).\r\n     */\r\n    invite(localTracks = []) {\r\n        if (!this.isInitiator) {\r\n            throw new Error('Trying to invite from the responder session');\r\n        }\r\n        const workFunction = finishedCallback => {\r\n            const addTracks = [];\r\n\r\n            for (const localTrack of localTracks) {\r\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\r\n            }\r\n\r\n            Promise.all(addTracks)\r\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\r\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\r\n                .then(() => {\r\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\r\n                    // the transformation chain.\r\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error('invite error', error);\r\n                } else {\r\n                    logger.debug('invite executed - OK');\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sends 'session-initiate' to the remote peer.\r\n     *\r\n     * NOTE this method is synchronous and we're not waiting for the RESULT\r\n     * response which would delay the startup process.\r\n     *\r\n     * @param {string} offerSdp  - The local session description which will be\r\n     * used to generate an offer.\r\n     * @private\r\n     */\r\n    sendSessionInitiate(offerSdp) {\r\n        let init = $iq({\r\n            to: this.remoteJid,\r\n            type: 'set'\r\n        }).c('jingle', {\r\n            xmlns: 'urn:xmpp:jingle:1',\r\n            action: 'session-initiate',\r\n            initiator: this.initiatorJid,\r\n            sid: this.sid\r\n        });\r\n\r\n        new SDP(offerSdp).toJingle(\r\n            init,\r\n            this.isInitiator ? 'initiator' : 'responder');\r\n        init = init.tree();\r\n        logger.info('Session-initiate: ', init);\r\n        this.connection.sendIQ(init,\r\n            () => {\r\n                logger.info('Got RESULT for \"session-initiate\"');\r\n            },\r\n            error => {\r\n                logger.error('\"session-initiate\" error', error);\r\n            },\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sets the answer received from the remote peer.\r\n     * @param jingleAnswer\r\n     */\r\n    setAnswer(jingleAnswer) {\r\n        if (!this.isInitiator) {\r\n            throw new Error('Trying to set an answer on the responder session');\r\n        }\r\n        this.setOfferAnswerCycle(\r\n            jingleAnswer,\r\n            () => {\r\n                logger.info('setAnswer - succeeded');\r\n            },\r\n            error => {\r\n                logger.error('setAnswer failed: ', error);\r\n            });\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\r\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\r\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\r\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\r\n     *        of the offer (or answer) IQ\r\n     * @param success callback called when sRD/sLD cycle finishes successfully.\r\n     * @param failure callback called with an error object as an argument if we\r\n     *        fail at any point during setRD, createAnswer, setLD.\r\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\r\n     * the local tracks that will be added, before the offer/answer cycle\r\n     * executes (for the local track addition to be an atomic operation together\r\n     * with the offer/answer).\r\n     */\r\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\r\n        const workFunction = finishedCallback => {\r\n            const addTracks = [];\r\n\r\n            for (const track of localTracks) {\r\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\r\n            }\r\n\r\n            const newRemoteSdp\r\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\r\n            const oldLocalSdp\r\n                = this.peerconnection.localDescription.sdp;\r\n\r\n            const bridgeSession\r\n                = $(jingleOfferAnswerIq)\r\n                    .find('>bridge-session['\r\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\r\n            const bridgeSessionId = bridgeSession.attr('id');\r\n\r\n            if (bridgeSessionId !== this._bridgeSessionId) {\r\n                this._bridgeSessionId = bridgeSessionId;\r\n            }\r\n\r\n            Promise.all(addTracks)\r\n                .then(() => this._renegotiate(newRemoteSdp.raw))\r\n                .then(() => {\r\n                    if (this.state === JingleSessionState.PENDING) {\r\n                        this.state = JingleSessionState.ACTIVE;\r\n\r\n                        // #1 Sync up video transfer active/inactive only after\r\n                        // the initial O/A cycle. We want to adjust the video\r\n                        // media direction only in the local SDP and the Jingle\r\n                        // contents direction included in the initial\r\n                        // offer/answer is mapped to the remote SDP. Jingle\r\n                        // 'content-modify' IQ is processed in a way that it\r\n                        // will only modify local SDP when remote peer is no\r\n                        // longer interested in receiving video content.\r\n                        // Changing media direction in the remote SDP will mess\r\n                        // up our SDP translation chain (simulcast, video mute,\r\n                        // RTX etc.)\r\n                        //\r\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\r\n                        if (this.isP2P\r\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\r\n                            this.sendContentModify();\r\n                        }\r\n                    }\r\n\r\n                    // Old local SDP will be available when we're setting answer\r\n                    // for the first time, but not when offer and it's fine\r\n                    // since we're generating an answer now it will contain all\r\n                    // our SSRCs\r\n                    if (oldLocalSdp) {\r\n                        const newLocalSdp\r\n                            = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.notifyMySSRCUpdate(\r\n                            new SDP(oldLocalSdp), newLocalSdp);\r\n                    }\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                error ? failure(error) : success();\r\n            });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Although it states \"replace transport\" it does accept full Jingle offer\r\n     * which should contain new ICE transport details.\r\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\r\n     *        transport info.\r\n     * @param success callback called when we succeed to accept new offer.\r\n     * @param failure function(error) called when we fail to accept new offer.\r\n     */\r\n    replaceTransport(jingleOfferElem, success, failure) {\r\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\r\n\r\n        // We need to first reject the 'data' section to have the SCTP stack\r\n        // cleaned up to signal the known data channel is now invalid. After\r\n        // that the original offer is set to have the SCTP connection\r\n        // established with the new bridge.\r\n        const originalOffer = jingleOfferElem.clone();\r\n\r\n        jingleOfferElem\r\n            .find('>content[name=\\'data\\']')\r\n            .attr('senders', 'rejected');\r\n\r\n        // Remove all remote sources in order to reset the client's state\r\n        // for the remote MediaStreams. When a conference is moved to\r\n        // another bridge it will start streaming with a sequence number\r\n        // that is not in sync with the most recently seen by the client.\r\n        // The symptoms include frozen or black video and lots of \"failed to\r\n        // unprotect SRTP packets\" in Chrome logs.\r\n        jingleOfferElem\r\n            .find('>content>description>source')\r\n            .remove();\r\n        jingleOfferElem\r\n            .find('>content>description>ssrc-group')\r\n            .remove();\r\n\r\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\r\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\r\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\r\n        // fingerprint has changed by setting an all zeros key.\r\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\r\n\r\n        newFingerprint.attr('hash', 'sha-1');\r\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\r\n\r\n        // First set an offer with a rejected 'data' section\r\n        this.setOfferAnswerCycle(\r\n            jingleOfferElem,\r\n            () => {\r\n                // Now set the original offer(with the 'data' section)\r\n                this.setOfferAnswerCycle(\r\n                    originalOffer,\r\n                    () => {\r\n                        const localSDP\r\n                            = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.sendTransportAccept(localSDP, success, failure);\r\n\r\n                        this.room.eventEmitter.emit(\r\n                            XMPPEvents.ICE_RESTART_SUCCESS,\r\n                            this,\r\n                            originalOffer);\r\n                    },\r\n                    failure);\r\n            },\r\n            failure\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'session-accept' message.\r\n     * @param {function()} success callback called when we receive 'RESULT'\r\n     *        packet for the 'session-accept'\r\n     * @param {function(error)} failure called when we receive an error response\r\n     *        or when the request has timed out.\r\n     * @private\r\n     */\r\n    sendSessionAccept(success, failure) {\r\n        // NOTE: since we're just reading from it, we don't need to be within\r\n        //  the modification queue to access the local description\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n        let accept = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'session-accept',\r\n                initiator: this.initiatorJid,\r\n                responder: this.responderJid,\r\n                sid: this.sid });\r\n\r\n        if (this.webrtcIceTcpDisable) {\r\n            localSDP.removeTcpCandidates = true;\r\n        }\r\n        if (this.webrtcIceUdpDisable) {\r\n            localSDP.removeUdpCandidates = true;\r\n        }\r\n        if (this.failICE) {\r\n            localSDP.failICE = true;\r\n        }\r\n        localSDP.toJingle(\r\n            accept,\r\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\r\n            null);\r\n\r\n        // Calling tree() to print something useful\r\n        accept = accept.tree();\r\n        logger.info('Sending session-accept', accept);\r\n        this.connection.sendIQ(accept,\r\n            success,\r\n            this.newJingleErrorHandler(accept, error => {\r\n                failure(error);\r\n\r\n                // 'session-accept' is a critical timeout and we'll\r\n                // have to restart\r\n                this.room.eventEmitter.emit(\r\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\r\n            }),\r\n            IQ_TIMEOUT);\r\n\r\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\r\n        // fingerprint and setup) ASAP in order to start the connection\r\n        // establishment.\r\n        //\r\n        // FIXME Flushing the connection at this point triggers an issue with\r\n        // BOSH request handling in Prosody on slow connections.\r\n        //\r\n        // The problem is that this request will be quite large and it may take\r\n        // time before it reaches Prosody. In the meantime Strophe may decide\r\n        // to send the next one. And it was observed that a small request with\r\n        // 'transport-info' usually follows this one. It does reach Prosody\r\n        // before the previous one was completely received. 'rid' on the server\r\n        // is increased and Prosody ignores the request with 'session-accept'.\r\n        // It will never reach Jicofo and everything in the request table is\r\n        // lost. Removing the flush does not guarantee it will never happen, but\r\n        // makes it much less likely('transport-info' is bundled with\r\n        // 'session-accept' and any immediate requests).\r\n        //\r\n        // this.connection.flush();\r\n    }\r\n\r\n    /**\r\n     * Will send 'content-modify' IQ in order to ask the remote peer to\r\n     * either stop or resume sending video media or to adjust sender's video constraints.\r\n     * @private\r\n     */\r\n    sendContentModify() {\r\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\r\n        const senders = this._localVideoActive ? 'both' : 'none';\r\n\r\n        let sessionModify\r\n            = $iq({\r\n                to: this.remoteJid,\r\n                type: 'set'\r\n            })\r\n                .c('jingle', {\r\n                    xmlns: 'urn:xmpp:jingle:1',\r\n                    action: 'content-modify',\r\n                    initiator: this.initiatorJid,\r\n                    sid: this.sid\r\n                })\r\n                .c('content', {\r\n                    name: 'video',\r\n                    senders\r\n                });\r\n\r\n        if (typeof maxFrameHeight !== 'undefined') {\r\n            sessionModify = sessionModify\r\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\r\n                .t(maxFrameHeight);\r\n        }\r\n\r\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\r\n\r\n        this.connection.sendIQ(\r\n            sessionModify,\r\n            null,\r\n            this.newJingleErrorHandler(sessionModify),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\r\n     * the remote party.\r\n     *\r\n     * @param {Number} maxFrameHeight - the new value to set.\r\n     */\r\n    setReceiverVideoConstraint(maxFrameHeight) {\r\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\r\n\r\n        this.localRecvMaxFrameHeight = maxFrameHeight;\r\n\r\n        if (this.isP2P) {\r\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\r\n            // be synced after offer/answer.\r\n            if (this.state === JingleSessionState.ACTIVE) {\r\n                this.sendContentModify();\r\n            }\r\n        } else {\r\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'transport-accept' message which is a response to\r\n     * 'transport-replace'.\r\n     * @param localSDP the 'SDP' object with local session description\r\n     * @param success callback called when we receive 'RESULT' packet for\r\n     *        'transport-replace'\r\n     * @param failure function(error) called when we receive an error response\r\n     *        or when the request has timed out.\r\n     * @private\r\n     */\r\n    sendTransportAccept(localSDP, success, failure) {\r\n        let transportAccept = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-accept',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            });\r\n\r\n        localSDP.media.forEach((medialines, idx) => {\r\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\r\n\r\n            transportAccept.c('content',\r\n                {\r\n                    creator:\r\n                        this.initiatorJid === this.localJid\r\n                            ? 'initiator'\r\n                            : 'responder',\r\n                    name: mline.media\r\n                }\r\n            );\r\n            localSDP.transportToJingle(idx, transportAccept);\r\n            transportAccept.up();\r\n        });\r\n\r\n        // Calling tree() to print something useful to the logger\r\n        transportAccept = transportAccept.tree();\r\n        logger.info('Sending transport-accept: ', transportAccept);\r\n\r\n        this.connection.sendIQ(transportAccept,\r\n            success,\r\n            this.newJingleErrorHandler(transportAccept, failure),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'transport-reject' message which is a response to\r\n     * 'transport-replace'.\r\n     * @param success callback called when we receive 'RESULT' packet for\r\n     *        'transport-replace'\r\n     * @param failure function(error) called when we receive an error response\r\n     *        or when the request has timed out.\r\n     *\r\n     * FIXME method should be marked as private, but there's some spaghetti that\r\n     *       needs to be fixed prior doing that\r\n     */\r\n    sendTransportReject(success, failure) {\r\n        // Send 'transport-reject', so that the focus will\r\n        // know that we've failed\r\n        let transportReject = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-reject',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            });\r\n\r\n        transportReject = transportReject.tree();\r\n        logger.info('Sending \\'transport-reject', transportReject);\r\n\r\n        this.connection.sendIQ(transportReject,\r\n            success,\r\n            this.newJingleErrorHandler(transportReject, failure),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum bitrates on the local video track. Bitrate values from\r\n     * videoQuality settings in config.js will be used for configuring the sender.\r\n     * @returns {Promise<void>} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderMaxBitrates() {\r\n        if (this._assertNotEnded()) {\r\n            return this.peerconnection.setMaxBitRate();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Sets the resolution constraint on the local camera track.\r\n     * @param {number} maxFrameHeight - The user preferred max frame height.\r\n     * @returns {Promise} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderVideoConstraint(maxFrameHeight) {\r\n        if (this._assertNotEnded()) {\r\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\r\n\r\n            return this.peerconnection.setSenderVideoConstraint(maxFrameHeight);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Sets the degradation preference on the video sender. This setting determines if\r\n     * resolution or framerate will be preferred when bandwidth or cpu is constrained.\r\n     * @returns {Promise<void>} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderVideoDegradationPreference() {\r\n        if (this._assertNotEnded()) {\r\n            return this.peerconnection.setSenderVideoDegradationPreference();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    terminate(success, failure, options) {\r\n        if (this.state === JingleSessionState.ENDED) {\r\n            return;\r\n        }\r\n\r\n        if (!options || Boolean(options.sendSessionTerminate)) {\r\n            let sessionTerminate\r\n                = $iq({\r\n                    to: this.remoteJid,\r\n                    type: 'set'\r\n                })\r\n                    .c('jingle', {\r\n                        xmlns: 'urn:xmpp:jingle:1',\r\n                        action: 'session-terminate',\r\n                        initiator: this.initiatorJid,\r\n                        sid: this.sid\r\n                    })\r\n                    .c('reason')\r\n                    .c((options && options.reason) || 'success')\r\n                    .up();\r\n\r\n            if (options && options.reasonDescription) {\r\n                sessionTerminate\r\n                    .c('text')\r\n                    .t(options.reasonDescription)\r\n                    .up()\r\n                    .up();\r\n            } else {\r\n                sessionTerminate.up();\r\n            }\r\n\r\n            this._bridgeSessionId\r\n                && sessionTerminate.c(\r\n                    'bridge-session', {\r\n                        xmlns: 'http://jitsi.org/protocol/focus',\r\n                        id: this._bridgeSessionId,\r\n                        restart: options && options.requestRestart === true\r\n                    }).up();\r\n\r\n            // Calling tree() to print something useful\r\n            sessionTerminate = sessionTerminate.tree();\r\n            logger.info('Sending session-terminate', sessionTerminate);\r\n            this.connection.sendIQ(\r\n                sessionTerminate,\r\n                success,\r\n                this.newJingleErrorHandler(sessionTerminate, failure),\r\n                IQ_TIMEOUT);\r\n        } else {\r\n            logger.info(`Skipped sending session-terminate for ${this}`);\r\n        }\r\n\r\n        // this should result in 'onTerminated' being called by strope.jingle.js\r\n        this.connection.jingle.terminate(this.sid);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param reasonCondition\r\n     * @param reasonText\r\n     */\r\n    onTerminated(reasonCondition, reasonText) {\r\n        // Do something with reason and reasonCondition when we start to care\r\n        // this.reasonCondition = reasonCondition;\r\n        // this.reasonText = reasonText;\r\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\r\n\r\n        this._xmppListeners.forEach(removeListener => removeListener());\r\n        this._xmppListeners = [];\r\n\r\n        if (this._removeSenderVideoConstraintsChangeListener) {\r\n            this._removeSenderVideoConstraintsChangeListener();\r\n        }\r\n\r\n        this.close();\r\n    }\r\n\r\n    /**\r\n     * Handles XMPP connection state changes.\r\n     *\r\n     * @param {XmppConnection.Status} status - The new status.\r\n     */\r\n    onXmppStatusChanged(status) {\r\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\r\n            logger.info('Sending SSRC update on reconnect');\r\n            this.notifyMySSRCUpdate(\r\n                this._cachedOldLocalSdp,\r\n                this._cachedNewLocalSdp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse the information from the xml sourceAddElem and translate it\r\n     *  into sdp lines\r\n     * @param {jquery xml element} sourceAddElem the source-add\r\n     *  element from jingle\r\n     * @param {SDP object} currentRemoteSdp the current remote\r\n     *  sdp (as of this new source-add)\r\n     * @returns {list} a list of SDP line strings that should\r\n     *  be added to the remote SDP\r\n     */\r\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\r\n        const addSsrcInfo = [];\r\n\r\n        $(sourceAddElem).each((i1, content) => {\r\n            const name = $(content).attr('name');\r\n            let lines = '';\r\n\r\n            $(content)\r\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n                .each(function() {\r\n                    // eslint-disable-next-line no-invalid-this\r\n                    const semantics = this.getAttribute('semantics');\r\n                    const ssrcs\r\n                        = $(this) // eslint-disable-line no-invalid-this\r\n                            .find('>source')\r\n                            .map(function() {\r\n                                // eslint-disable-next-line no-invalid-this\r\n                                return this.getAttribute('ssrc');\r\n                            })\r\n                            .get();\r\n\r\n                    if (ssrcs.length) {\r\n                        lines\r\n                            += `a=ssrc-group:${semantics} ${\r\n                                ssrcs.join(' ')}\\r\\n`;\r\n                    }\r\n                });\r\n\r\n            // handles both >source and >description>source\r\n            const tmp\r\n                = $(content).find(\r\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n            /* eslint-disable no-invalid-this */\r\n            tmp.each(function() {\r\n                const ssrc = $(this).attr('ssrc');\r\n\r\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\r\n                    logger.warn(\r\n                        `Source-add request for existing SSRC: ${ssrc}`);\r\n\r\n                    return;\r\n                }\r\n\r\n                // eslint-disable-next-line newline-per-chained-call\r\n                $(this).find('>parameter').each(function() {\r\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\r\n                    if ($(this).attr('value') && $(this).attr('value').length) {\r\n                        lines += `:${$(this).attr('value')}`;\r\n                    }\r\n                    lines += '\\r\\n';\r\n                });\r\n            });\r\n\r\n            /* eslint-enable no-invalid-this */\r\n            currentRemoteSdp.media.forEach((media, i2) => {\r\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\r\n                    return;\r\n                }\r\n                if (!addSsrcInfo[i2]) {\r\n                    addSsrcInfo[i2] = '';\r\n                }\r\n                addSsrcInfo[i2] += lines;\r\n            });\r\n        });\r\n\r\n        return addSsrcInfo;\r\n    }\r\n\r\n    /**\r\n     * Handles a Jingle source-add message for this Jingle session.\r\n     * @param elem An array of Jingle \"content\" elements.\r\n     */\r\n    addRemoteStream(elem) {\r\n        this._addOrRemoveRemoteStream(true /* add */, elem);\r\n    }\r\n\r\n    /**\r\n     * Handles a Jingle source-remove message for this Jingle session.\r\n     * @param elem An array of Jingle \"content\" elements.\r\n     */\r\n    removeRemoteStream(elem) {\r\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\r\n    }\r\n\r\n    /**\r\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\r\n     * Jingle session.\r\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\r\n     * otherwise.\r\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\r\n     * @private\r\n     */\r\n    _addOrRemoveRemoteStream(isAdd, elem) {\r\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\r\n\r\n        if (isAdd) {\r\n            this.readSsrcInfo(elem);\r\n        }\r\n\r\n        const workFunction = finishedCallback => {\r\n            if (!this.peerconnection.localDescription\r\n                || !this.peerconnection.localDescription.sdp) {\r\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\r\n\r\n                logger.error(errMsg);\r\n                finishedCallback(errMsg);\r\n\r\n                return;\r\n            }\r\n\r\n            logger.log(`Processing ${logPrefix}`);\r\n            logger.log(\r\n                'ICE connection state: ',\r\n                this.peerconnection.iceConnectionState);\r\n\r\n            const oldLocalSdp\r\n                = new SDP(this.peerconnection.localDescription.sdp);\r\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\r\n            const addOrRemoveSsrcInfo\r\n                = isAdd\r\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\r\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\r\n            const newRemoteSdp\r\n                = isAdd\r\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\r\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\r\n\r\n            this._renegotiate(newRemoteSdp.raw)\r\n                .then(() => {\r\n                    const newLocalSdp\r\n                        = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                    logger.log(\r\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\r\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\r\n                    finishedCallback();\r\n                }, error => {\r\n                    logger.error(`${logPrefix} failed:`, error);\r\n                    finishedCallback(error);\r\n                });\r\n        };\r\n\r\n        // Queue and execute\r\n        this.modificationQueue.push(workFunction);\r\n    }\r\n\r\n    /**\r\n     * Takes in a jingle offer iq, returns the new sdp offer\r\n     * @param {jquery xml element} offerIq the incoming offer\r\n     * @returns {SDP object} the jingle offer translated to SDP\r\n     */\r\n    _processNewJingleOfferIq(offerIq) {\r\n        const remoteSdp = new SDP('');\r\n\r\n        if (this.webrtcIceTcpDisable) {\r\n            remoteSdp.removeTcpCandidates = true;\r\n        }\r\n        if (this.webrtcIceUdpDisable) {\r\n            remoteSdp.removeUdpCandidates = true;\r\n        }\r\n        if (this.failICE) {\r\n            remoteSdp.failICE = true;\r\n        }\r\n\r\n        remoteSdp.fromJingle(offerIq);\r\n        this.readSsrcInfo($(offerIq).find('>content'));\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Remove the given ssrc lines from the current remote sdp\r\n     * @param {list} removeSsrcInfo a list of SDP line strings that\r\n     *  should be removed from the remote SDP\r\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\r\n     *  in removeSsrcInfo\r\n     */\r\n    _processRemoteRemoveSource(removeSsrcInfo) {\r\n        const remoteSdp = browser.usesPlanB()\r\n            ? new SDP(this.peerconnection.remoteDescription.sdp)\r\n            : new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\r\n\r\n        removeSsrcInfo.forEach((lines, idx) => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            lines = lines.split('\\r\\n');\r\n            lines.pop(); // remove empty last element;\r\n            if (browser.usesPlanB()) {\r\n                lines.forEach(line => {\r\n                    remoteSdp.media[idx]\r\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\r\n                });\r\n            } else {\r\n                lines.forEach(line => {\r\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\r\n\r\n                    if (mid > -1) {\r\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\r\n\r\n                        // Change the direction to \"inactive\" only on Firefox. Audio fails on\r\n                        // Safari (possibly Chrome in unified plan mode) when we try to re-use inactive\r\n                        // m-lines due to a webkit bug.\r\n                        // https://bugs.webkit.org/show_bug.cgi?id=211181\r\n                        if (browser.isFirefox()) {\r\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace('a=sendonly', 'a=inactive');\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Add the given ssrc lines to the current remote sdp\r\n     * @param {list} addSsrcInfo a list of SDP line strings that\r\n     *  should be added to the remote SDP\r\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\r\n     *  in removeSsrcInfo\r\n     */\r\n    _processRemoteAddSource(addSsrcInfo) {\r\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\r\n\r\n        addSsrcInfo.forEach((lines, idx) => {\r\n            remoteSdp.media[idx] += lines;\r\n        });\r\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Do a new o/a flow using the existing remote description\r\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\r\n     *  to use.  If not provided, the remote sdp from the\r\n     *  peerconnection will be used\r\n     * @returns {Promise} promise which resolves when the\r\n     *  o/a flow is complete with no arguments or\r\n     *  rejects with an error {string}\r\n     */\r\n    _renegotiate(optionalRemoteSdp) {\r\n        if (this.peerconnection.signalingState === 'closed') {\r\n            const error = new Error('Attempted to renegotiate in state closed');\r\n\r\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        const remoteSdp\r\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\r\n\r\n        if (!remoteSdp) {\r\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\r\n\r\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        const remoteDescription = new RTCSessionDescription({\r\n            type: this.isInitiator ? 'answer' : 'offer',\r\n            sdp: remoteSdp\r\n        });\r\n\r\n        if (this.isInitiator) {\r\n            return this._initiatorRenegotiate(remoteDescription);\r\n        }\r\n\r\n        return this._responderRenegotiate(remoteDescription);\r\n    }\r\n\r\n    /**\r\n     * Renegotiate cycle implementation for the responder case.\r\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\r\n     * which will be used as remote description in the cycle.\r\n     * @private\r\n     */\r\n    _responderRenegotiate(remoteDescription) {\r\n        logger.debug('Renegotiate: setting remote description');\r\n\r\n        return this.peerconnection.setRemoteDescription(remoteDescription)\r\n            .then(() => {\r\n                logger.debug('Renegotiate: creating answer');\r\n\r\n                return this.peerconnection.createAnswer(this.mediaConstraints)\r\n                    .then(answer => {\r\n                        logger.debug('Renegotiate: setting local description');\r\n\r\n                        return this.peerconnection.setLocalDescription(answer);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Renegotiate cycle implementation for the initiator's case.\r\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\r\n     * which will be used as remote description in the cycle.\r\n     * @private\r\n     */\r\n    _initiatorRenegotiate(remoteDescription) {\r\n        logger.debug('Renegotiate: creating offer');\r\n\r\n        return this.peerconnection.createOffer(this.mediaConstraints)\r\n            .then(offer => {\r\n                logger.debug('Renegotiate: setting local description');\r\n\r\n                return this.peerconnection.setLocalDescription(offer)\r\n                    .then(() => {\r\n                        logger.debug(\r\n                            'Renegotiate: setting remote description');\r\n\r\n                        // eslint-disable-next-line max-len\r\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\r\n     * offer/answer cycle after both operations are done. Either\r\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\r\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\r\n     * <tt>oldTrack</tt>\r\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\r\n     * replaced\r\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\r\n     * @returns {Promise} which resolves once the replacement is complete\r\n     *  with no arguments or rejects with an error {string}\r\n     */\r\n    replaceTrack(oldTrack, newTrack) {\r\n        const workFunction = finishedCallback => {\r\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\r\n\r\n            if (browser.usesPlanB()) {\r\n                // NOTE the code below assumes that no more than 1 video track\r\n                // can be added to the peer connection.\r\n                // Transition from camera to desktop share\r\n                // or transition from one camera source to another.\r\n                if (this.peerconnection.options.capScreenshareBitrate\r\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\r\n                    // Clearing current primary SSRC will make\r\n                    // the SdpConsistency generate a new one which will result\r\n                    // with:\r\n                    // 1. source-remove for the old video stream.\r\n                    // 2. source-add for the new video stream.\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n                }\r\n\r\n                // Transition from no video to video (unmute).\r\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\r\n                    // Clearing current primary SSRC will make\r\n                    // the SdpConsistency generate a new one which will result\r\n                    // with:\r\n                    // 1. source-remove for the recvonly\r\n                    // 2. source-add for the new video stream\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n\r\n                // Transition from video to no video\r\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\r\n                    // Clearing current primary SSRC and generating the recvonly\r\n                    // will result in:\r\n                    // 1. source-remove for the old video stream\r\n                    // 2. source-add for the recvonly stream\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n                    this.peerconnection.generateRecvonlySsrc();\r\n                }\r\n            }\r\n\r\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\r\n                .then(shouldRenegotiate => {\r\n                    let promise = Promise.resolve();\r\n\r\n                    if (shouldRenegotiate\r\n                        && (oldTrack || newTrack)\r\n                        && this.state === JingleSessionState.ACTIVE) {\r\n                        promise = this._renegotiate().then(() => {\r\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\r\n                        });\r\n                    }\r\n\r\n                    return promise.then(() => {\r\n                        if (newTrack && newTrack.isVideoTrack()) {\r\n                            // FIXME set all sender parameters in one go?\r\n                            // Set the degradation preference on the new video sender.\r\n                            return this.peerconnection.setSenderVideoDegradationPreference()\r\n\r\n                                // Apply the cached video constraints on the new video sender.\r\n                                .then(() => this.peerconnection.setSenderVideoConstraint())\r\n                                .then(() => this.peerconnection.setMaxBitRate());\r\n                        }\r\n                    });\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        logger.error('Replace track error:', error);\r\n                        reject(error);\r\n                    } else {\r\n                        logger.info('Replace track done!');\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parse the information from the xml sourceRemoveElem and translate it\r\n     *  into sdp lines\r\n     * @param {jquery xml element} sourceRemoveElem the source-remove\r\n     *  element from jingle\r\n     * @param {SDP object} currentRemoteSdp the current remote\r\n     *  sdp (as of this new source-remove)\r\n     * @returns {list} a list of SDP line strings that should\r\n     *  be removed from the remote SDP\r\n     */\r\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\r\n        const removeSsrcInfo = [];\r\n\r\n        $(sourceRemoveElem).each((i1, content) => {\r\n            const name = $(content).attr('name');\r\n            let lines = '';\r\n\r\n            $(content)\r\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n                .each(function() {\r\n                    /* eslint-disable no-invalid-this */\r\n                    const semantics = this.getAttribute('semantics');\r\n                    const ssrcs\r\n                        = $(this)\r\n                            .find('>source')\r\n                            .map(function() {\r\n                                return this.getAttribute('ssrc');\r\n                            })\r\n                            .get();\r\n\r\n                    if (ssrcs.length) {\r\n                        lines\r\n                            += `a=ssrc-group:${semantics} ${\r\n                                ssrcs.join(' ')}\\r\\n`;\r\n                    }\r\n\r\n                    /* eslint-enable no-invalid-this */\r\n                });\r\n            const ssrcs = [];\r\n\r\n            // handles both >source and >description>source versions\r\n            const tmp\r\n                = $(content).find(\r\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n            tmp.each(function() {\r\n                // eslint-disable-next-line no-invalid-this\r\n                const ssrc = $(this).attr('ssrc');\r\n\r\n                ssrcs.push(ssrc);\r\n            });\r\n            currentRemoteSdp.media.forEach((media, i2) => {\r\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\r\n                    return;\r\n                }\r\n                if (!removeSsrcInfo[i2]) {\r\n                    removeSsrcInfo[i2] = '';\r\n                }\r\n                ssrcs.forEach(ssrc => {\r\n                    const ssrcLines\r\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\r\n\r\n                    if (ssrcLines.length) {\r\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\r\n                    }\r\n                });\r\n                removeSsrcInfo[i2] += lines;\r\n            });\r\n        });\r\n\r\n        return removeSsrcInfo;\r\n    }\r\n\r\n    /**\r\n     * Will print an error if there is any difference, between the SSRCs given\r\n     * in the <tt>oldSDP</tt> and the ones currently described in\r\n     * the peerconnection's local description.\r\n     * @param {string} operationName the operation's name which will be printed\r\n     * in the error message.\r\n     * @param {SDP} oldSDP the old local SDP which will be compared with\r\n     * the current one.\r\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\r\n     * otherwise.\r\n     * @private\r\n     */\r\n    _verifyNoSSRCChanged(operationName, oldSDP) {\r\n        const currentLocalSDP\r\n            = new SDP(this.peerconnection.localDescription.sdp);\r\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\r\n        const addedMedia = sdpDiff.getNewMedia();\r\n\r\n        if (Object.keys(addedMedia).length) {\r\n            logger.error(\r\n                `${this} - some SSRC were added on ${operationName}`,\r\n                addedMedia);\r\n\r\n            return false;\r\n        }\r\n\r\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\r\n        const removedMedia = sdpDiff.getNewMedia();\r\n\r\n        if (Object.keys(removedMedia).length) {\r\n            logger.error(\r\n                `${this} - some SSRCs were removed on ${operationName}`,\r\n                removedMedia);\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Adds local track back to this session, as part of the unmute operation.\r\n     * @param {JitsiLocalTrack} track\r\n     * @return {Promise} a promise that will resolve once the local track is\r\n     * added back to this session and renegotiation succeeds. Will be rejected\r\n     * with a <tt>string</tt> that provides some error details in case something\r\n     * goes wrong.\r\n     */\r\n    addTrackAsUnmute(track) {\r\n        return this._addRemoveTrackAsMuteUnmute(\r\n            false /* add as unmute */, track)\r\n            .then(() => {\r\n                // Apply the video constraints, max bitrates and degradation preference on\r\n                // the video sender if needed.\r\n                if (track.isVideoTrack() && browser.doesVideoMuteByStreamRemove()) {\r\n                    return this.setSenderMaxBitrates()\r\n                        .then(() => this.setSenderVideoDegradationPreference())\r\n                        .then(() => this.setSenderVideoConstraint());\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Remove local track as part of the mute operation.\r\n     * @param {JitsiLocalTrack} track the local track to be removed\r\n     * @return {Promise} a promise which will be resolved once the local track\r\n     * is removed from this session and the renegotiation is performed.\r\n     * The promise will be rejected with a <tt>string</tt> that the describes\r\n     * the error if anything goes wrong.\r\n     */\r\n    removeTrackAsMute(track) {\r\n        return this._addRemoveTrackAsMuteUnmute(\r\n            true /* remove as mute */, track);\r\n    }\r\n\r\n    /**\r\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\r\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\r\n     * <tt>false</tt> for \"add as unmute\".\r\n     * @param {JitsiLocalTrack} track the track that will be added/removed\r\n     * @private\r\n     */\r\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\r\n        if (!track) {\r\n            return Promise.reject('invalid \"track\" argument value');\r\n        }\r\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\r\n        const workFunction = finishedCallback => {\r\n            const tpc = this.peerconnection;\r\n\r\n            if (!tpc) {\r\n                finishedCallback(\r\n                    `Error:  tried ${operationName} track with no active peer`\r\n                        + 'connection');\r\n\r\n                return;\r\n            }\r\n            const oldLocalSDP = tpc.localDescription.sdp;\r\n            const operationPromise\r\n                = isMute\r\n                    ? tpc.removeTrackMute(track)\r\n                    : tpc.addTrackUnmute(track);\r\n\r\n            operationPromise\r\n                .then(shouldRenegotiate => {\r\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\r\n                        this._renegotiate()\r\n                            .then(() => {\r\n                                // The results are ignored, as this check failure is not\r\n                                // enough to fail the whole operation. It will log\r\n                                // an error inside.\r\n                                this._verifyNoSSRCChanged(\r\n                                    operationName, new SDP(oldLocalSDP));\r\n                                finishedCallback();\r\n                            });\r\n                    } else {\r\n                        finishedCallback();\r\n                    }\r\n                },\r\n                finishedCallback /* will be called with an error */);\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Resumes or suspends media transfer over the underlying peer connection.\r\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\r\n     * transfer or <tt>false</tt> to suspend audio media transmission.\r\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\r\n     * transfer or <tt>false</tt> to suspend video media transmission.\r\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\r\n     * the operation is done. It will be rejected with an error description as\r\n     * a string in case anything goes wrong.\r\n     */\r\n    setMediaTransferActive(audioActive, videoActive) {\r\n        if (!this.peerconnection) {\r\n            return Promise.reject(\r\n                'Can not modify transfer active state,'\r\n                    + ' before \"initialize\" is called');\r\n        }\r\n\r\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\r\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\r\n\r\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\r\n\r\n        const workFunction = finishedCallback => {\r\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\r\n\r\n            // Because the value is modified on the queue it's impossible to\r\n            // check it's final value reliably prior to submitting the task.\r\n            // The rule here is that the last submitted state counts.\r\n            // Check the values here to avoid unnecessary renegotiation cycle.\r\n            const audioActiveChanged\r\n                = this.peerconnection.setAudioTransferActive(audioActive);\r\n\r\n            if (this._localVideoActive !== videoActive) {\r\n                this._localVideoActive = videoActive;\r\n\r\n                // Do only for P2P - Jicofo will reply with 'bad-request'\r\n                // We don't want to send 'content-modify', before the initial\r\n                // O/A (state === JingleSessionState.ACTIVE), because that will\r\n                // mess up video media direction in the remote SDP.\r\n                // 'content-modify' when processed only affects the media\r\n                // direction in the local SDP. We're doing that, because setting\r\n                // 'inactive' on video media in remote SDP will mess up our SDP\r\n                // translation chain (simulcast, RTX, video mute etc.).\r\n                if (this.isP2P && isSessionActive) {\r\n                    this.sendContentModify();\r\n                }\r\n            }\r\n\r\n            const pcVideoActiveChanged\r\n                = this.peerconnection.setVideoTransferActive(\r\n                    this._localVideoActive && this._remoteVideoActive);\r\n\r\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\r\n            // direction\r\n            if (isSessionActive\r\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\r\n                this._renegotiate()\r\n                    .then(\r\n                        finishedCallback,\r\n                        finishedCallback /* will be called with an error */);\r\n            } else {\r\n                finishedCallback();\r\n            }\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Will put and execute on the queue a session modify task. Currently it\r\n     * only checks the senders attribute of the video content in order to figure\r\n     * out if the remote peer has video in the inactive state (stored locally\r\n     * in {@link _remoteVideoActive} - see field description for more info).\r\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\r\n     * element of the session modify IQ.\r\n     * @see {@link _remoteVideoActive}\r\n     * @see {@link _localVideoActive}\r\n     */\r\n    modifyContents(jingleContents) {\r\n        const newVideoSenders\r\n            = JingleSessionPC.parseVideoSenders(jingleContents);\r\n        const newMaxFrameHeight\r\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\r\n\r\n        // frame height is optional in our content-modify protocol\r\n        if (newMaxFrameHeight) {\r\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\r\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\r\n            this.eventEmitter.emit(\r\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\r\n        }\r\n\r\n        if (newVideoSenders === null) {\r\n            logger.error(\r\n                `${this} - failed to parse video \"senders\" attribute in`\r\n                    + '\"content-modify\" action');\r\n\r\n            return;\r\n        }\r\n\r\n        const workFunction = finishedCallback => {\r\n            if (this._assertNotEnded('content-modify')\r\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\r\n                // Will do the sRD/sLD cycle to update SDPs and adjust\r\n                // the media direction\r\n                this._renegotiate()\r\n                    .then(finishedCallback, finishedCallback /* (error) */);\r\n            } else {\r\n                finishedCallback();\r\n            }\r\n        };\r\n\r\n        logger.debug(\r\n            `${this} queued \"content-modify\" task`\r\n                + `(video senders=\"${newVideoSenders}\")`);\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error('\"content-modify\" failed', error);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\r\n     * to apply it for {@link _remoteVideoActive}.\r\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\r\n     * Jingle video content element advertised by remote peer.\r\n     * @return {boolean} <tt>true</tt> if the change affected state of\r\n     * the underlying peerconnection and renegotiation is required for\r\n     * the changes to take effect.\r\n     * @private\r\n     */\r\n    _modifyRemoteVideoActive(remoteVideoSenders) {\r\n        const isRemoteVideoActive\r\n            = remoteVideoSenders === 'both'\r\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\r\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\r\n\r\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\r\n            logger.debug(\r\n                `${this} new remote video active: ${isRemoteVideoActive}`);\r\n            this._remoteVideoActive = isRemoteVideoActive;\r\n        }\r\n\r\n        return this.peerconnection.setVideoTransferActive(\r\n            this._localVideoActive && this._remoteVideoActive);\r\n    }\r\n\r\n    /**\r\n     * Figures out added/removed ssrcs and send update IQs.\r\n     * @param oldSDP SDP object for old description.\r\n     * @param newSDP SDP object for new description.\r\n     */\r\n    notifyMySSRCUpdate(oldSDP, newSDP) {\r\n\r\n        if (this.state !== JingleSessionState.ACTIVE) {\r\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\r\n\r\n            return;\r\n        }\r\n\r\n        if (!this.connection.connected) {\r\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\r\n            if (!this._cachedOldLocalSdp) {\r\n                this._cachedOldLocalSdp = oldSDP;\r\n            }\r\n            this._cachedNewLocalSdp = newSDP;\r\n            logger.warn('Not sending SSRC update while the signaling is disconnected');\r\n\r\n            return;\r\n        }\r\n\r\n        this._cachedOldLocalSdp = undefined;\r\n        this._cachedNewLocalSdp = undefined;\r\n\r\n        // send source-remove IQ.\r\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\r\n        const remove = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'source-remove',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            }\r\n            );\r\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\r\n\r\n        if (removedAnySSRCs) {\r\n            logger.info('Sending source-remove', remove.tree());\r\n            this.connection.sendIQ(\r\n                remove, null,\r\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\r\n        } else {\r\n            logger.log('removal not necessary');\r\n        }\r\n\r\n        // send source-add IQ.\r\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\r\n        const add = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'source-add',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            }\r\n            );\r\n\r\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\r\n\r\n        if (containsNewSSRCs) {\r\n            logger.info('Sending source-add', add.tree());\r\n            this.connection.sendIQ(\r\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\r\n        } else {\r\n            logger.log('addition not necessary');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method returns function(errorResponse) which is a callback to be passed\r\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\r\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\r\n     * structure is as follows:\r\n     * {\r\n     *  code: {XMPP error response code}\r\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\r\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\r\n     *  source: {request.tree() that provides original request}\r\n     *  session: {this JingleSessionPC.toString()}\r\n     * }\r\n     * @param request Strophe IQ instance which is the request to be dumped into\r\n     *        the error structure\r\n     * @param failureCb function(error) called when error response was returned\r\n     *        or when a timeout has occurred.\r\n     * @returns {function(this:JingleSessionPC)}\r\n     */\r\n    newJingleErrorHandler(request, failureCb) {\r\n        return errResponse => {\r\n\r\n            const error = {};\r\n\r\n            // Get XMPP error code and condition(reason)\r\n            const errorElSel = $(errResponse).find('error');\r\n\r\n            if (errorElSel.length) {\r\n                error.code = errorElSel.attr('code');\r\n                const errorReasonSel = $(errResponse).find('error :first');\r\n\r\n                if (errorReasonSel.length) {\r\n                    error.reason = errorReasonSel[0].tagName;\r\n                }\r\n\r\n                const errorMsgSel = errorElSel.find('>text');\r\n\r\n                if (errorMsgSel.length) {\r\n                    error.msg = errorMsgSel.text();\r\n                }\r\n            }\r\n\r\n            if (!errResponse) {\r\n                error.reason = 'timeout';\r\n            }\r\n\r\n            error.session = this.toString();\r\n\r\n            if (failureCb) {\r\n                failureCb(error);\r\n            } else if (this.state === JingleSessionState.ENDED\r\n                        && error.reason === 'item-not-found') {\r\n                // When remote peer decides to terminate the session, but it\r\n                // still have few messages on the queue for processing,\r\n                // it will first send us 'session-terminate' (we enter ENDED)\r\n                // and then follow with 'item-not-found' for the queued requests\r\n                // We don't want to have that logged on error level.\r\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\r\n            } else {\r\n                GlobalOnErrorHandler.callErrorHandler(\r\n                    new Error(\r\n                        `Jingle error: ${JSON.stringify(error)}`));\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the ice connection state for the peer connection.\r\n     * @returns the ice connection state for the peer connection.\r\n     */\r\n    getIceConnectionState() {\r\n        return this.peerconnection.getConnectionState();\r\n    }\r\n\r\n    /**\r\n     * Closes the peerconnection.\r\n     */\r\n    close() {\r\n        this.state = JingleSessionState.ENDED;\r\n        this.establishmentDuration = undefined;\r\n\r\n        if (this.peerconnection) {\r\n            this.peerconnection.onicecandidate = null;\r\n            this.peerconnection.oniceconnectionstatechange = null;\r\n            this.peerconnection.onnegotiationneeded = null;\r\n            this.peerconnection.onsignalingstatechange = null;\r\n        }\r\n\r\n        // Remove any pending tasks from the queue\r\n        this.modificationQueue.clear();\r\n\r\n        this.modificationQueue.push(finishCallback => {\r\n            // The signaling layer will remove it's listeners\r\n            this.signalingLayer.setChatRoom(null);\r\n\r\n            // do not try to close if already closed.\r\n            this.peerconnection && this.peerconnection.close();\r\n            finishCallback();\r\n        });\r\n\r\n        // No more tasks can go in after the close task\r\n        this.modificationQueue.shutdown();\r\n    }\r\n\r\n    /**\r\n     * Converts to string with minor summary.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `JingleSessionPC[p2p=${this.isP2P},`\r\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\r\n    }\r\n\r\n    /**\r\n     * If the A/B test for suspend video is disabled according to the room's\r\n     * configuration, returns undefined. Otherwise returns a boolean which\r\n     * indicates whether the suspend video option should be enabled or disabled.\r\n     * @param {JingleSessionPCOptions} options - The config options.\r\n     */\r\n    _abtestSuspendVideoEnabled({ abTesting }) {\r\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\r\n            return;\r\n        }\r\n\r\n        // We want the two participants in a P2P call to agree on the value of\r\n        // the \"suspend\" option. We use the JID of the initiator, because it is\r\n        // both randomly selected and agreed upon by both participants.\r\n        const jid = this._getInitiatorJid();\r\n\r\n        return integerHash(jid) % 2 === 0;\r\n    }\r\n}\r\n","export default {\r\n    /**\r\n     * Event triggered when the remote party signals it's receive video max frame height.\r\n     */\r\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\r\n};\r\n","/**\r\n * The events for the media devices.\r\n */\r\n\r\n/**\r\n * Indicates that the list of available media devices has been changed. The\r\n * event provides the following parameters to its listeners:\r\n *\r\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\r\n *  MediaDeviceInfo-like objects that are currently connected.\r\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\r\n */\r\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\r\n\r\n/**\r\n * Indicates that the environment is currently showing permission prompt to\r\n * access camera and/or microphone. The event provides the following\r\n * parameters to its listeners:\r\n *\r\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\r\n *  |'react-native'|'android'} environmentType - type of browser or\r\n *  other execution environment.\r\n */\r\nexport const PERMISSION_PROMPT_IS_SHOWN\r\n    = 'mediaDevices.permissionPromptIsShown';\r\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","import SDPUtil from './SDPUtil';\r\n\r\n// this could be useful in Array.prototype.\r\n/**\r\n *\r\n * @param array1\r\n * @param array2\r\n */\r\nfunction arrayEquals(array1, array2) {\r\n    // if the other array is a falsy value, return\r\n    if (!array2) {\r\n        return false;\r\n    }\r\n\r\n    // compare lengths - can save a lot of time\r\n    if (array1.length !== array2.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0, l = array1.length; i < l; i++) {\r\n        // Check if we have nested arrays\r\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\r\n            // recurse into the nested arrays\r\n            if (!array1[i].equals(array2[i])) {\r\n                return false;\r\n            }\r\n        } else if (array1[i] !== array2[i]) {\r\n            // Warning - two different object instances will never be\r\n            // equal: {x:20} != {x:20}\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n *\r\n * @param mySDP\r\n * @param otherSDP\r\n */\r\nexport default function SDPDiffer(mySDP, otherSDP) {\r\n    this.mySDP = mySDP;\r\n    this.otherSDP = otherSDP;\r\n    if (!mySDP) {\r\n        throw new Error('\"mySDP\" is undefined!');\r\n    } else if (!otherSDP) {\r\n        throw new Error('\"otherSDP\" is undefined!');\r\n    }\r\n}\r\n\r\n/**\r\n * Returns map of MediaChannel that contains media contained in\r\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\r\n */\r\nSDPDiffer.prototype.getNewMedia = function() {\r\n\r\n    const myMedias = this.mySDP.getMediaSsrcMap();\r\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\r\n    const newMedia = {};\r\n\r\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\r\n        const myMedia = myMedias[othersMediaIdx];\r\n        const othersMedia = othersMedias[othersMediaIdx];\r\n\r\n        if (!myMedia && othersMedia) {\r\n            // Add whole channel\r\n            newMedia[othersMediaIdx] = othersMedia;\r\n\r\n            return;\r\n        }\r\n\r\n        // Look for new ssrcs across the channel\r\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\r\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\r\n                // Allocate channel if we've found ssrc that doesn't exist in\r\n                // our channel\r\n                if (!newMedia[othersMediaIdx]) {\r\n                    newMedia[othersMediaIdx] = {\r\n                        mediaindex: othersMedia.mediaindex,\r\n                        mid: othersMedia.mid,\r\n                        ssrcs: {},\r\n                        ssrcGroups: []\r\n                    };\r\n                }\r\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\r\n            } else if (othersMedia.ssrcs[ssrc].lines\r\n                        && myMedia.ssrcs[ssrc].lines) {\r\n                // we want to detect just changes in adding/removing msid\r\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\r\n                    line => line.indexOf('msid') !== -1) !== undefined;\r\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\r\n                    line => line.indexOf('msid') !== -1) !== undefined;\r\n\r\n                if (myContainMsid !== newContainMsid) {\r\n                    if (!newMedia[othersMediaIdx]) {\r\n                        newMedia[othersMediaIdx] = {\r\n                            mediaindex: othersMedia.mediaindex,\r\n                            mid: othersMedia.mid,\r\n                            ssrcs: {},\r\n                            ssrcGroups: []\r\n                        };\r\n                    }\r\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\r\n                        = othersMedia.ssrcs[ssrc];\r\n                }\r\n            }\r\n        });\r\n\r\n        // Look for new ssrc groups across the channels\r\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\r\n\r\n            // try to match the other ssrc-group with an ssrc-group of ours\r\n            let matched = false;\r\n\r\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\r\n                const mySsrcGroup = myMedia.ssrcGroups[i];\r\n\r\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\r\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\r\n\r\n                    matched = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!matched) {\r\n                // Allocate channel if we've found an ssrc-group that doesn't\r\n                // exist in our channel\r\n\r\n                if (!newMedia[othersMediaIdx]) {\r\n                    newMedia[othersMediaIdx] = {\r\n                        mediaindex: othersMedia.mediaindex,\r\n                        mid: othersMedia.mid,\r\n                        ssrcs: {},\r\n                        ssrcGroups: []\r\n                    };\r\n                }\r\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\r\n            }\r\n        });\r\n    });\r\n\r\n    return newMedia;\r\n};\r\n\r\n/**\r\n * TODO: document!\r\n */\r\nSDPDiffer.prototype.toJingle = function(modify) {\r\n    const sdpMediaSsrcs = this.getNewMedia();\r\n\r\n    let modified = false;\r\n\r\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\r\n        modified = true;\r\n        const media = sdpMediaSsrcs[mediaindex];\r\n\r\n        modify.c('content', { name: media.mid });\r\n\r\n        modify.c('description',\r\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\r\n                media: media.mid });\r\n\r\n        // FIXME: not completely sure this operates on blocks and / or handles\r\n        // different ssrcs correctly\r\n        // generate sources from lines\r\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\r\n            const mediaSsrc = media.ssrcs[ssrcNum];\r\n\r\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\r\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\r\n\r\n            // iterate over ssrc lines\r\n            mediaSsrc.lines.forEach(line => {\r\n                const idx = line.indexOf(' ');\r\n                const kv = line.substr(idx + 1);\r\n\r\n                modify.c('parameter');\r\n                if (kv.indexOf(':') === -1) {\r\n                    modify.attrs({ name: kv });\r\n                } else {\r\n                    const nv = kv.split(':', 2);\r\n                    const name = nv[0];\r\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\r\n\r\n                    modify.attrs({ name });\r\n                    modify.attrs({ value });\r\n                }\r\n                modify.up(); // end of parameter\r\n            });\r\n            modify.up(); // end of source\r\n        });\r\n\r\n        // generate source groups from lines\r\n        media.ssrcGroups.forEach(ssrcGroup => {\r\n            if (ssrcGroup.ssrcs.length) {\r\n\r\n                modify.c('ssrc-group', {\r\n                    semantics: ssrcGroup.semantics,\r\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                });\r\n\r\n                ssrcGroup.ssrcs.forEach(ssrc => {\r\n                    modify.c('source', { ssrc })\r\n                        .up(); // end of source\r\n                });\r\n                modify.up(); // end of ssrc-group\r\n            }\r\n        });\r\n\r\n        modify.up(); // end of description\r\n        modify.up(); // end of content\r\n    });\r\n\r\n    return modified;\r\n};\r\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\r\n * Provides statistics for the local stream.\r\n */\r\n\r\n/**\r\n * Size of the webaudio analyzer buffer.\r\n * @type {number}\r\n */\r\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\r\n\r\n/**\r\n * Value of the webaudio analyzer smoothing time parameter.\r\n * @type {number}\r\n */\r\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\r\n\r\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\r\n\r\nlet context = null;\r\n\r\nif (window.AudioContext) {\r\n    context = new AudioContext();\r\n\r\n    // XXX Not all browsers define a suspend method on AudioContext. As the\r\n    // invocation is at the (ES6 module) global execution level, it breaks the\r\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\r\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\r\n    // example, Google Chrome 40 on Android does not define the method but we\r\n    // still want to be able to load the lib-jitsi-meet library there and\r\n    // display a page which notifies the user that the Web app is not supported\r\n    // there.\r\n    context.suspend && context.suspend();\r\n}\r\n\r\n/**\r\n * Converts time domain data array to audio level.\r\n * @param samples the time domain data array.\r\n * @returns {number} the audio level\r\n */\r\nfunction timeDomainDataToAudioLevel(samples) {\r\n\r\n    let maxVolume = 0;\r\n\r\n    const length = samples.length;\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        if (maxVolume < samples[i]) {\r\n            maxVolume = samples[i];\r\n        }\r\n    }\r\n\r\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\r\n}\r\n\r\n/**\r\n * Animates audio level change\r\n * @param newLevel the new audio level\r\n * @param lastLevel the last audio level\r\n * @returns {Number} the audio level to be set\r\n */\r\nfunction animateLevel(newLevel, lastLevel) {\r\n    let value = 0;\r\n    const diff = lastLevel - newLevel;\r\n\r\n    if (diff > 0.2) {\r\n        value = lastLevel - 0.2;\r\n    } else if (diff < -0.4) {\r\n        value = lastLevel + 0.4;\r\n    } else {\r\n        value = newLevel;\r\n    }\r\n\r\n    return parseFloat(value.toFixed(3));\r\n}\r\n\r\n\r\n/**\r\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\r\n *\r\n * @param stream the local stream\r\n * @param interval stats refresh interval given in ms.\r\n * @param callback function that receives the audio levels.\r\n * @constructor\r\n */\r\nexport default function LocalStatsCollector(stream, interval, callback) {\r\n    this.stream = stream;\r\n    this.intervalId = null;\r\n    this.intervalMilis = interval;\r\n    this.audioLevel = 0;\r\n    this.callback = callback;\r\n}\r\n\r\n/**\r\n * Starts the collecting the statistics.\r\n */\r\nLocalStatsCollector.prototype.start = function() {\r\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\r\n        return;\r\n    }\r\n    context.resume();\r\n    const analyser = context.createAnalyser();\r\n\r\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\r\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\r\n\r\n    const source = context.createMediaStreamSource(this.stream);\r\n\r\n    source.connect(analyser);\r\n\r\n    this.intervalId = setInterval(\r\n        () => {\r\n            const array = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n            analyser.getByteTimeDomainData(array);\r\n            const audioLevel = timeDomainDataToAudioLevel(array);\r\n\r\n            // Set the audio levels always as NoAudioSignalDetection now\r\n            // uses audio levels from LocalStatsCollector and waits for\r\n            // atleast 4 secs for a no audio signal before displaying the\r\n            // notification on the UI.\r\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\r\n            this.callback(this.audioLevel);\r\n        },\r\n        this.intervalMilis\r\n    );\r\n};\r\n\r\n/**\r\n * Stops collecting the statistics.\r\n */\r\nLocalStatsCollector.prototype.stop = function() {\r\n    if (this.intervalId) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Checks if the environment has the necessary conditions to support\r\n * collecting stats from local streams.\r\n *\r\n * @returns {boolean}\r\n */\r\nLocalStatsCollector.isLocalStatsSupported = function() {\r\n    return Boolean(context);\r\n};\r\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\r\n","/* global $ */\r\n\r\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Listenable from '../util/Listenable';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * The property\r\n */\r\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\r\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\r\nconst HASH = 'sha-1';\r\n\r\nexport const ERROR_FEATURE_VERSION_MISMATCH = 'Feature version mismatch';\r\n\r\n/**\r\n *\r\n * @param a\r\n * @param b\r\n */\r\nfunction compareIdentities(a, b) {\r\n    let res = 0;\r\n\r\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\r\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\r\n    );\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * Produces a sha-1 from provided identity and features values.\r\n *\r\n * @param {Array<Object>} identities - The identity objects.\r\n * @param {Array<string>} features - The features.\r\n * @returns {string}\r\n */\r\nfunction generateSha(identities, features) {\r\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\r\n        (accumulatedValue, identity) => `${\r\n            IDENTITY_PROPERTIES.reduce(\r\n                (tmp, key, idx) =>\r\n                    tmp\r\n                        + (idx === 0 ? '' : '/')\r\n                        + (identity[key] ? identity[key] : ''),\r\n                '')\r\n        }<`, '');\r\n    const sortedFeatures = features.sort().reduce(\r\n        (tmp, feature) => `${tmp + feature}<`, '');\r\n\r\n    return b64_sha1(sortedIdentities + sortedFeatures);\r\n}\r\n\r\n/**\r\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\r\n */\r\nexport default class Caps extends Listenable {\r\n    /**\r\n     * Constructs new Caps instance.\r\n     * @param {Strophe.Connection} connection the strophe connection object\r\n     * @param {String} node the value of the node attribute of the \"c\" xml node\r\n     * that will be sent to the other participants\r\n     */\r\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\r\n        super();\r\n        this.node = node;\r\n        this.disco = connection.disco;\r\n        if (!this.disco) {\r\n            throw new Error(\r\n                'Missing strophe-plugins '\r\n                + '(disco plugin is required)!');\r\n        }\r\n\r\n        this.versionToCapabilities = Object.create(null);\r\n        this.jidToVersion = Object.create(null);\r\n        this.version = '';\r\n        this.rooms = new Set();\r\n\r\n        const emuc = connection.emuc;\r\n\r\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\r\n            room => this._addChatRoom(room));\r\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\r\n            room => this._removeChatRoom(room));\r\n        Object.keys(emuc.rooms).forEach(jid => {\r\n            this._addChatRoom(emuc.rooms[jid]);\r\n        });\r\n\r\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\r\n        this.disco.addFeature(Strophe.NS.CAPS);\r\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\r\n\r\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Adds new feature to the list of supported features for the local\r\n     * participant\r\n     * @param {String} feature the name of the feature.\r\n     * @param {boolean} submit if true - new presence with updated \"c\" node\r\n     * will be sent.\r\n     */\r\n    addFeature(feature, submit = false) {\r\n        this.disco.addFeature(feature);\r\n        this._generateVersion();\r\n        if (submit) {\r\n            this.submit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a feature from the list of supported features for the local\r\n     * participant\r\n     * @param {String} feature the name of the feature.\r\n     * @param {boolean} submit if true - new presence with updated \"c\" node\r\n     * will be sent.\r\n     */\r\n    removeFeature(feature, submit = false) {\r\n        this.disco.removeFeature(feature);\r\n        this._generateVersion();\r\n        if (submit) {\r\n            this.submit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends new presence stanza for every room from the list of rooms.\r\n     */\r\n    submit() {\r\n        this.rooms.forEach(room => room.sendPresence());\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for a participant.\r\n     * @param {String} jid the jid of the participant\r\n     * @param {int} timeout the timeout in ms for reply from the participant.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeatures(jid, timeout = 5000) {\r\n        const user\r\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\r\n\r\n        if (!user || !(user.version in this.versionToCapabilities)) {\r\n            const node = user ? `${user.node}#${user.version}` : null;\r\n\r\n            return this._getDiscoInfo(jid, node, timeout)\r\n                .then(({ features, identities }) => {\r\n                    if (user) {\r\n                        const sha = generateSha(\r\n                            Array.from(identities),\r\n                            Array.from(features)\r\n                        );\r\n                        const receivedNode = `${user.node}#${sha}`;\r\n\r\n                        if (receivedNode === node) {\r\n                            this.versionToCapabilities[receivedNode] = features;\r\n\r\n                            return features;\r\n                        }\r\n\r\n                        // Check once if it has been cached asynchronously.\r\n                        if (this.versionToCapabilities[receivedNode]) {\r\n                            return this.versionToCapabilities[receivedNode];\r\n                        }\r\n\r\n                        logger.error(`Expected node ${node} but received ${\r\n                            receivedNode}`);\r\n\r\n                        return Promise.reject(ERROR_FEATURE_VERSION_MISMATCH);\r\n                    }\r\n\r\n                    return features;\r\n                });\r\n        }\r\n\r\n        return Promise.resolve(this.versionToCapabilities[user.version]);\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for a host.\r\n     * @param {String} jid the jid of the host\r\n     * @param {int} timeout the timeout in ms for reply from the host.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\r\n        return this._getDiscoInfo(jid, node, timeout);\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features and identities for a host.\r\n     * @param {String} jid the jid of the host\r\n     * @param {String|null} node the node to query\r\n     * @param {int} timeout the timeout in ms for reply from the host.\r\n     * @returns {Promise<Object>}\r\n     * @private\r\n     */\r\n    _getDiscoInfo(jid, node, timeout) {\r\n        return new Promise((resolve, reject) =>\r\n            this.disco.info(jid, node, response => {\r\n                const features = new Set();\r\n                const identities = new Set();\r\n\r\n                $(response)\r\n                    .find('>query>feature')\r\n                    .each(\r\n                        (_, el) => features.add(el.getAttribute('var')));\r\n                $(response)\r\n                    .find('>query>identity')\r\n                    .each(\r\n                        (_, el) => identities.add({\r\n                            type: el.getAttribute('type'),\r\n                            name: el.getAttribute('name'),\r\n                            category: el.getAttribute('category')\r\n                        }));\r\n                resolve({\r\n                    features,\r\n                    identities });\r\n            }, reject, timeout)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\r\n     * and adds \"c\" element to the presences of the room.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _addChatRoom(room) {\r\n        this.rooms.add(room);\r\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\r\n        this._fixChatRoomPresenceMap(room);\r\n    }\r\n\r\n    /**\r\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\r\n     * added from the Caps class.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _removeChatRoom(room) {\r\n        this.rooms.delete(room);\r\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\r\n    }\r\n\r\n    /**\r\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _fixChatRoomPresenceMap(room) {\r\n        room.addToPresence('c', {\r\n            attributes: {\r\n                xmlns: Strophe.NS.CAPS,\r\n                hash: HASH,\r\n                node: this.node,\r\n                ver: this.version\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles this.version changes.\r\n     */\r\n    _notifyVersionChanged() {\r\n        // update the version for all rooms\r\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\r\n    }\r\n\r\n    /**\r\n     * Generates the value for the \"ver\" attribute.\r\n     */\r\n    _generateVersion() {\r\n        this.version\r\n            = generateSha(this.disco._identities, this.disco._features);\r\n\r\n        this._notifyVersionChanged();\r\n    }\r\n\r\n    /**\r\n     * Parses the \"c\" xml node from presence.\r\n     * @param {DOMElement} stanza the presence packet\r\n     */\r\n    _handleCaps(stanza) {\r\n        const from = stanza.getAttribute('from');\r\n        const caps = stanza.querySelector('c');\r\n        const version = caps.getAttribute('ver');\r\n        const node = caps.getAttribute('node');\r\n        const oldVersion = this.jidToVersion[from];\r\n\r\n        this.jidToVersion[from] = { version,\r\n            node };\r\n        if (oldVersion && oldVersion.version !== version) {\r\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n                from);\r\n        }\r\n\r\n        // return true to not remove the handler from Strophe\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes entry from this.jidToVersion map.\r\n     * @param {String} jid the jid to be removed.\r\n     */\r\n    _removeJidToVersionEntry(jid) {\r\n        if (jid in this.jidToVersion) {\r\n            delete this.jidToVersion[jid];\r\n        }\r\n    }\r\n}\r\n","/**\r\n * The transciption is on.\r\n *\r\n * @type {String}\r\n */\r\nexport const ON = 'on';\r\n\r\n/**\r\n * The transciption is off.\r\n *\r\n * @type {String}\r\n */\r\nexport const OFF = 'off';\r\n","/* global __filename, module */\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport browser from '../browser';\r\n\r\nimport RTCUtils from './RTCUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Maps our handler types to MediaStreamTrack properties.\r\n */\r\nconst trackHandler2Prop = {\r\n    'track_mute': 'onmute', // Not supported on FF\r\n    'track_unmute': 'onunmute',\r\n    'track_ended': 'onended'\r\n};\r\n\r\n/**\r\n * Represents a single media track (either audio or video).\r\n */\r\nexport default class JitsiTrack extends EventEmitter {\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Represents a single media track (either audio or video).\r\n     * @constructor\r\n     * @param conference the rtc instance\r\n     * @param stream the WebRTC MediaStream instance\r\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\r\n     * the given <tt>stream</tt>.\r\n     * @param streamInactiveHandler the function that will handle\r\n     *        onended/oninactive events of the stream.\r\n     * @param trackMediaType the media type of the JitsiTrack\r\n     * @param videoType the VideoType for this track if any\r\n     */\r\n    constructor(\r\n            conference,\r\n            stream,\r\n            track,\r\n            streamInactiveHandler,\r\n            trackMediaType,\r\n            videoType) {\r\n        super();\r\n\r\n        // aliases for addListener/removeListener\r\n        this.addEventListener = this.addListener;\r\n        this.removeEventListener = this.off = this.removeListener;\r\n\r\n        /**\r\n         * Array with the HTML elements that are displaying the streams.\r\n         * @type {Array}\r\n         */\r\n        this.containers = [];\r\n        this.conference = conference;\r\n        this.audioLevel = -1;\r\n        this.type = trackMediaType;\r\n        this.track = track;\r\n        this.videoType = videoType;\r\n        this.handlers = new Map();\r\n\r\n        /**\r\n         * Indicates whether this JitsiTrack has been disposed. If true, this\r\n         * JitsiTrack is to be considered unusable and operations involving it\r\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\r\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\r\n         * @type {boolean}\r\n         */\r\n        this.disposed = false;\r\n\r\n        /**\r\n         * The inactive handler which will be triggered when the underlying\r\n         * <tt>MediaStream</tt> ends.\r\n         *\r\n         * @private\r\n         * @type {Function}\r\n         */\r\n        this._streamInactiveHandler = streamInactiveHandler;\r\n\r\n        this._setStream(stream);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\r\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\r\n     * a onended event on the MediaStreamTrack.\r\n     * @param {Function} handler the handler\r\n     */\r\n    _addMediaStreamInactiveHandler(handler) {\r\n        if (browser.isFirefox()) {\r\n            this.track.onended = handler;\r\n        } else {\r\n            this.stream.oninactive = handler;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\r\n     * depending on the passed type.\r\n     * @param {string} type the type of the handler that is going to be set\r\n     * @param {Function} handler the handler.\r\n     */\r\n    _setHandler(type, handler) {\r\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\r\n            logger.error(`Invalid handler type ${type}`);\r\n\r\n            return;\r\n        }\r\n        if (handler) {\r\n            this.handlers.set(type, handler);\r\n        } else {\r\n            this.handlers.delete(type);\r\n        }\r\n\r\n        if (this.stream) {\r\n            for (const track of this.stream.getTracks()) {\r\n                track[trackHandler2Prop[type]] = handler;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unregisters all event handlers bound to the underlying media stream/track\r\n     * @private\r\n     */\r\n    _unregisterHandlers() {\r\n        if (!this.stream) {\r\n            logger.warn(\r\n                `${this}: unable to unregister handlers - no stream object`);\r\n\r\n            return;\r\n        }\r\n\r\n        for (const type of this.handlers.keys()) {\r\n            // FIXME Why only video tracks?\r\n            for (const videoTrack of this.stream.getVideoTracks()) {\r\n                videoTrack[trackHandler2Prop[type]] = undefined;\r\n            }\r\n        }\r\n        if (this._streamInactiveHandler) {\r\n            this._addMediaStreamInactiveHandler(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the stream property of JitsiTrack object and sets all stored\r\n     * handlers to it.\r\n     *\r\n     * @param {MediaStream} stream the new stream.\r\n     * @protected\r\n     */\r\n    _setStream(stream) {\r\n        if (this.stream === stream) {\r\n            return;\r\n        }\r\n\r\n        this.stream = stream;\r\n\r\n        // TODO Practically, that's like the opposite of _unregisterHandlers\r\n        // i.e. may be abstracted into a function/method called\r\n        // _registerHandlers for clarity and easing the maintenance of the two\r\n        // pieces of source code.\r\n        if (this.stream) {\r\n            for (const type of this.handlers.keys()) {\r\n                this._setHandler(type, this.handlers.get(type));\r\n            }\r\n            if (this._streamInactiveHandler) {\r\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the type (audio or video) of this track.\r\n     */\r\n    getType() {\r\n        return this.type;\r\n    }\r\n\r\n    /**\r\n     * Check if this is an audio track.\r\n     */\r\n    isAudioTrack() {\r\n        return this.getType() === MediaType.AUDIO;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\r\n     * according to it's 'muted' field status.\r\n     * @return {boolean} <tt>true</tt> if the underlying\r\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\r\n     */\r\n    isWebRTCTrackMuted() {\r\n        return this.track && this.track.muted;\r\n    }\r\n\r\n    /**\r\n     * Check if this is a video track.\r\n     */\r\n    isVideoTrack() {\r\n        return this.getType() === MediaType.VIDEO;\r\n    }\r\n\r\n    /**\r\n     * Checks whether this is a local track.\r\n     * @abstract\r\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\r\n     */\r\n    isLocal() {\r\n        throw new Error('Not implemented by subclass');\r\n    }\r\n\r\n    /**\r\n     * Check whether this is a local audio track.\r\n     *\r\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\r\n     */\r\n    isLocalAudioTrack() {\r\n        return this.isAudioTrack() && this.isLocal();\r\n    }\r\n\r\n    /**\r\n     * Returns the WebRTC MediaStream instance.\r\n     */\r\n    getOriginalStream() {\r\n        return this.stream;\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\r\n     * @returns {String|null}\r\n     */\r\n    getStreamId() {\r\n        return this.stream ? this.stream.id : null;\r\n    }\r\n\r\n    /**\r\n     * Return the underlying WebRTC MediaStreamTrack\r\n     * @returns {MediaStreamTrack}\r\n     */\r\n    getTrack() {\r\n        return this.track;\r\n    }\r\n\r\n    /**\r\n     * Return the underlying WebRTC MediaStreamTrack label\r\n     * @returns {string}\r\n     */\r\n    getTrackLabel() {\r\n        return this.track.label;\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\r\n     * @returns {String|null}\r\n     */\r\n    getTrackId() {\r\n        return this.track ? this.track.id : null;\r\n    }\r\n\r\n    /**\r\n     * Return meaningful usage label for this track depending on it's media and\r\n     * eventual video type.\r\n     * @returns {string}\r\n     */\r\n    getUsageLabel() {\r\n        if (this.isAudioTrack()) {\r\n            return 'mic';\r\n        }\r\n\r\n        return this.videoType ? this.videoType : 'default';\r\n    }\r\n\r\n    /**\r\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\r\n     * @param container the video/audio container to which this stream is\r\n     *        attached and for which event will be fired.\r\n     * @private\r\n     */\r\n    _maybeFireTrackAttached(container) {\r\n        if (this.conference && container) {\r\n            this.conference._onTrackAttach(this, container);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attaches the MediaStream of this track to an HTML container.\r\n     * Adds the container to the list of containers that are displaying the\r\n     * track.\r\n     *\r\n     * @param container the HTML container which can be 'video' or 'audio'\r\n     * element.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    attach(container) {\r\n        if (this.stream) {\r\n            this._onTrackAttach(container);\r\n            RTCUtils.attachMediaStream(container, this.stream);\r\n        }\r\n        this.containers.push(container);\r\n        this._maybeFireTrackAttached(container);\r\n        this._attachTTFMTracker(container);\r\n    }\r\n\r\n    /**\r\n     * Removes this JitsiTrack from the passed HTML container.\r\n     *\r\n     * @param container the HTML container to detach from this JitsiTrack. If\r\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\r\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\r\n     * which this JitsiTrack is currently attached.\r\n     */\r\n    detach(container) {\r\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\r\n            const c = cs[i];\r\n\r\n            if (!container) {\r\n                this._onTrackDetach(c);\r\n                RTCUtils.attachMediaStream(c, null);\r\n            }\r\n            if (!container || c === container) {\r\n                cs.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        if (container) {\r\n            this._onTrackDetach(container);\r\n            RTCUtils.attachMediaStream(container, null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been attached to a new container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been detached from a container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Attach time to first media tracker only if there is conference and only\r\n     * for the first element.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Removes attached event listeners.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    dispose() {\r\n        this.removeAllListeners();\r\n\r\n        this.disposed = true;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Returns true if this is a video track and the source of the video is a\r\n     * screen capture as opposed to a camera.\r\n     */\r\n    isScreenSharing() {\r\n        // FIXME: Should be fixed or removed.\r\n    }\r\n\r\n    /**\r\n     * Returns id of the track.\r\n     * @returns {string|null} id of the track or null if this is fake track.\r\n     */\r\n    getId() {\r\n        if (this.stream) {\r\n            return RTCUtils.getStreamID(this.stream);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the MediaStream is active/not ended.\r\n     * When there is no check for active we don't have information and so\r\n     * will return that stream is active (in case of FF).\r\n     * @returns {boolean} whether MediaStream is active.\r\n     */\r\n    isActive() {\r\n        if (typeof this.stream.active !== 'undefined') {\r\n            return this.stream.active;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio level for the stream\r\n     * @param {number} audioLevel value between 0 and 1\r\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\r\n     * is source for the audio level. It can be <tt>undefined</tt> for\r\n     * a local track if the audio level was measured outside of the\r\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\r\n     */\r\n    setAudioLevel(audioLevel, tpc) {\r\n        let newAudioLevel = audioLevel;\r\n\r\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\r\n        // remote tracks, browser reports last known audio levels even when the remote user is\r\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\r\n        // Remote tracks have the tpc info present while local tracks do not.\r\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\r\n            newAudioLevel = 0;\r\n        }\r\n\r\n        if (this.audioLevel !== newAudioLevel) {\r\n            this.audioLevel = newAudioLevel;\r\n            this.emit(\r\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                newAudioLevel,\r\n                tpc);\r\n\r\n        // LocalStatsCollector reports a value of 0.008 for muted mics\r\n        // and a value of 0 when there is no audio input.\r\n        } else if (this.audioLevel === 0\r\n            && newAudioLevel === 0\r\n            && this.isLocal()\r\n            && !this.isWebRTCTrackMuted()) {\r\n            this.emit(\r\n                JitsiTrackEvents.NO_AUDIO_INPUT,\r\n                newAudioLevel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the msid of the stream attached to the JitsiTrack object or null\r\n     * if no stream is attached.\r\n     */\r\n    getMSID() {\r\n        const streamId = this.getStreamId();\r\n        const trackId = this.getTrackId();\r\n\r\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\r\n    }\r\n\r\n    /**\r\n     * Sets new audio output device for track's DOM elements. Video tracks are\r\n     * ignored.\r\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\r\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\r\n     * @returns {Promise}\r\n     */\r\n    setAudioOutput(audioOutputDeviceId) {\r\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\r\n            return Promise.reject(\r\n                new Error('Audio output device change is not supported'));\r\n        }\r\n\r\n        // All audio communication is done through audio tracks, so ignore\r\n        // changing audio output for video tracks at all.\r\n        if (this.isVideoTrack()) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return (\r\n            Promise.all(\r\n                this.containers.map(\r\n                    element =>\r\n                        element.setSinkId(audioOutputDeviceId)\r\n                            .catch(error => {\r\n                                logger.warn(\r\n                                    'Failed to change audio output device on'\r\n                                        + ' element. Default or previously set'\r\n                                        + ' audio output device will be used.',\r\n                                    element,\r\n                                    error);\r\n                                throw error;\r\n                            }))\r\n            )\r\n                .then(() => {\r\n                    this.emit(\r\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\r\n                        audioOutputDeviceId);\r\n                }));\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport RTC from '../RTC/RTC';\r\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\r\n\r\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\r\n\r\n/**\r\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\r\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\r\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\r\n * score is published to consumers via an EventEmitter.\r\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\r\n *\r\n * @fires VAD_SCORE_PUBLISHED\r\n */\r\nexport default class TrackVADEmitter extends EventEmitter {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\r\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\r\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\r\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\r\n     */\r\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\r\n        super();\r\n\r\n        /**\r\n         * Sample rate of the ScriptProcessorNode.\r\n         */\r\n        this._procNodeSampleRate = procNodeSampleRate;\r\n\r\n        /**\r\n         * VAD Processor that allows us to calculate VAD score for PCM samples\r\n         */\r\n        this._vadProcessor = vadProcessor;\r\n\r\n        /**\r\n         * The JitsiLocalTrack instance.\r\n         */\r\n        this._localTrack = jitsiLocalTrack;\r\n\r\n        /**\r\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\r\n         */\r\n        this._bufferResidue = new Float32Array([]);\r\n\r\n        /**\r\n         * The AudioContext instance with the preferred sample frequency.\r\n         */\r\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\r\n\r\n        /**\r\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\r\n         * saves a couple of function calls.\r\n         */\r\n        this._vadSampleSize = vadProcessor.getSampleLength();\r\n\r\n        /**\r\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\r\n         * sample rate.\r\n         */\r\n        this._onAudioProcess = this._onAudioProcess.bind(this);\r\n\r\n        this._initializeAudioContext();\r\n    }\r\n\r\n    /**\r\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\r\n     *\r\n     * @param {string} micDeviceId - Target microphone device id.\r\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\r\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\r\n     * The processor needs to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\r\n     */\r\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\r\n        return RTC.obtainAudioAndVideoPermissions({\r\n            devices: [ 'audio' ],\r\n            micDeviceId\r\n        }).then(localTrack => {\r\n            // We only expect one audio track when specifying a device id.\r\n            if (!localTrack[0]) {\r\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\r\n            }\r\n\r\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\r\n\r\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\r\n            // life cycle is handled by whoever created this instance.\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets up the audio graph in the AudioContext.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _initializeAudioContext() {\r\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\r\n\r\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\r\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\r\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\r\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\r\n        // with audio worklet when it's mature enough and has more browser support.\r\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\r\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\r\n    }\r\n\r\n    /**\r\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\r\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\r\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\r\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\r\n     *\r\n     *\r\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\r\n     * @returns {void}\r\n     * @fires VAD_SCORE_PUBLISHED\r\n     */\r\n    _onAudioProcess(audioEvent) {\r\n        // Prepend the residue PCM buffer from the previous process callback.\r\n        const inData = audioEvent.inputBuffer.getChannelData(0);\r\n        const completeInData = [ ...this._bufferResidue, ...inData ];\r\n        const sampleTimestamp = Date.now();\r\n\r\n        let i = 0;\r\n\r\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\r\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\r\n\r\n            // The VAD processor might change the values inside the array so we make a copy.\r\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\r\n\r\n            this.emit(VAD_SCORE_PUBLISHED, {\r\n                timestamp: sampleTimestamp,\r\n                score: vadScore,\r\n                pcmData: pcmSample,\r\n                deviceId: this._localTrack.getDeviceId()\r\n            });\r\n        }\r\n\r\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\r\n    }\r\n\r\n    /**\r\n     * Connects the nodes in the AudioContext to start the flow of audio data.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _connectAudioGraph() {\r\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\r\n        this._audioSource.connect(this._audioProcessingNode);\r\n        this._audioProcessingNode.connect(this._audioContext.destination);\r\n    }\r\n\r\n    /**\r\n     * Disconnects the nodes in the AudioContext.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _disconnectAudioGraph() {\r\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\r\n        // resulting in calls with and uninitialized context.\r\n        // eslint-disable-next-line no-empty-function\r\n        this._audioProcessingNode.onaudioprocess = () => {};\r\n        this._audioProcessingNode.disconnect();\r\n        this._audioSource.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Cleanup potentially acquired resources.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _cleanupResources() {\r\n        this._disconnectAudioGraph();\r\n        this._localTrack.stopStream();\r\n    }\r\n\r\n    /**\r\n     * Get the associated track device ID.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDeviceId() {\r\n        return this._localTrack.getDeviceId();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the associated track label.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getTrackLabel() {\r\n        return this._localTrack.getDeviceLabel();\r\n    }\r\n\r\n    /**\r\n     * Start the emitter by connecting the audio graph.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    start() {\r\n        this._connectAudioGraph();\r\n    }\r\n\r\n    /**\r\n     * Stops the emitter by disconnecting the audio graph.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        this._disconnectAudioGraph();\r\n        this._bufferResidue = [];\r\n    }\r\n\r\n    /**\r\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\r\n     *\r\n     * @returns {void}\r\n     */\r\n    destroy() {\r\n        if (this._destroyed) {\r\n            return;\r\n        }\r\n\r\n        this._cleanupResources();\r\n        this._destroyed = true;\r\n    }\r\n}\r\n","/**\r\n * Adapter that creates AudioContext objects depending on the browser.\r\n *\r\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\r\n */\r\nexport function createAudioContext(options) {\r\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\r\n\r\n    if (!AudioContextImpl) {\r\n        return undefined;\r\n    }\r\n\r\n    return new AudioContextImpl(options);\r\n}\r\n","/**\r\n * Indicates that the end-to-end round-trip-time for a participant has changed.\r\n */\r\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\r\n","\r\n/**\r\n * Promise-like object which can be passed around for resolving it later. It\r\n * implements the \"thenable\" interface, so it can be used wherever a Promise\r\n * could be used.\r\n *\r\n * In addition a \"reject on timeout\" functionality is provided.\r\n */\r\nexport default class Deferred {\r\n    /**\r\n     * Instantiates a Deferred object.\r\n     */\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = (...args) => {\r\n                this.clearRejectTimeout();\r\n                resolve(...args);\r\n            };\r\n            this.reject = (...args) => {\r\n                this.clearRejectTimeout();\r\n                reject(...args);\r\n            };\r\n        });\r\n        this.then = this.promise.then.bind(this.promise);\r\n        this.catch = this.promise.catch.bind(this.promise);\r\n    }\r\n\r\n    /**\r\n     * Clears the reject timeout.\r\n     */\r\n    clearRejectTimeout() {\r\n        clearTimeout(this._timeout);\r\n    }\r\n\r\n    /**\r\n     * Rejects the promise after the given timeout.\r\n     */\r\n    setRejectTimeout(ms) {\r\n        this._timeout = setTimeout(() => {\r\n            this.reject(new Error('timeout'));\r\n        }, ms);\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport transform from 'sdp-transform';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport browser from '../browser';\r\n\r\nconst logger = getLogger(__filename);\r\nconst SIM_LAYER_1_RID = '1';\r\nconst SIM_LAYER_2_RID = '2';\r\nconst SIM_LAYER_3_RID = '3';\r\n\r\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\r\n\r\n/**\r\n * Handles track related operations on TraceablePeerConnection when browser is\r\n * running in unified plan mode.\r\n */\r\nexport class TPCUtils {\r\n    /**\r\n     * Creates a new instance for a given TraceablePeerConnection\r\n     *\r\n     * @param peerconnection - the tpc instance for which we have utility functions.\r\n     * @param videoBitrates - the bitrates to be configured on the video senders for\r\n     * different resolutions both in unicast and simulcast mode.\r\n     */\r\n    constructor(peerconnection, videoBitrates) {\r\n        this.pc = peerconnection;\r\n        this.videoBitrates = videoBitrates;\r\n\r\n        /**\r\n         * The startup configuration for the stream encodings that are applicable to\r\n         * the video stream when a new sender is created on the peerconnection. The initial\r\n         * config takes into account the differences in browser's simulcast implementation.\r\n         *\r\n         * Encoding parameters:\r\n         * active - determine the on/off state of a particular encoding.\r\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\r\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\r\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\r\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\r\n         *  original resolution of the captured video.\r\n         */\r\n        this.localStreamEncodingsConfig = [\r\n            {\r\n                active: true,\r\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.high : this.videoBitrates.low,\r\n                rid: SIM_LAYER_1_RID,\r\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\r\n            },\r\n            {\r\n                active: true,\r\n                maxBitrate: this.videoBitrates.standard,\r\n                rid: SIM_LAYER_2_RID,\r\n                scaleResolutionDownBy: 2.0\r\n            },\r\n            {\r\n                active: true,\r\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.low : this.videoBitrates.high,\r\n                rid: SIM_LAYER_3_RID,\r\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\r\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\r\n     * plan since we have only one FID group per media description.\r\n     * @param {Object} description the webRTC session description instance for the remote\r\n     * description.\r\n     * @private\r\n     */\r\n    ensureCorrectOrderOfSsrcs(description) {\r\n        const parsedSdp = transform.parse(description.sdp);\r\n\r\n        parsedSdp.media.forEach(mLine => {\r\n            if (mLine.type === 'audio') {\r\n                return;\r\n            }\r\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\r\n                return;\r\n            }\r\n            let reorderedSsrcs = [];\r\n\r\n            mLine.ssrcGroups[0].ssrcs.split(' ').forEach(ssrc => {\r\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\r\n\r\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\r\n            });\r\n            mLine.ssrcs = reorderedSsrcs;\r\n        });\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: transform.write(parsedSdp)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Obtains stream encodings that need to be configured on the given track based\r\n     * on the track media type and the simulcast setting.\r\n     * @param {JitsiLocalTrack} localTrack\r\n     */\r\n    _getStreamEncodings(localTrack) {\r\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\r\n            return this.localStreamEncodingsConfig;\r\n        }\r\n\r\n        return localTrack.isVideoTrack()\r\n            ? [ {\r\n                active: true,\r\n                maxBitrate: this.videoBitrates.high\r\n            } ]\r\n            : [ { active: true } ];\r\n    }\r\n\r\n    /**\r\n     * Takes in a *unified plan* offer and inserts the appropriate\r\n     * parameters for adding simulcast receive support.\r\n     * @param {Object} desc - A session description object\r\n     * @param {String} desc.type - the type (offer/answer)\r\n     * @param {String} desc.sdp - the sdp content\r\n     *\r\n     * @return {Object} A session description (same format as above) object\r\n     * with its sdp field modified to advertise simulcast receive support\r\n     */\r\n    insertUnifiedPlanSimulcastReceive(desc) {\r\n        // a=simulcast line is not needed on browsers where\r\n        // we munge SDP for turning on simulcast. Remove this check\r\n        // when we move to RID/MID based simulcast on all browsers.\r\n        if (browser.usesSdpMungingForSimulcast()) {\r\n            return desc;\r\n        }\r\n        const sdp = transform.parse(desc.sdp);\r\n        const idx = sdp.media.findIndex(mline => mline.type === 'video');\r\n\r\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\r\n            // Make sure we don't have the simulcast recv line on video descriptions other than the\r\n            // the first video description.\r\n            sdp.media.forEach((mline, i) => {\r\n                if (mline.type === 'video' && i !== idx) {\r\n                    sdp.media[i].rids = undefined;\r\n                    sdp.media[i].simulcast = undefined;\r\n\r\n                    // eslint-disable-next-line camelcase\r\n                    sdp.media[i].simulcast_03 = undefined;\r\n                }\r\n            });\r\n\r\n            return new RTCSessionDescription({\r\n                type: desc.type,\r\n                sdp: transform.write(sdp)\r\n            });\r\n        }\r\n\r\n        // In order of highest to lowest spatial quality\r\n        sdp.media[idx].rids = [\r\n            {\r\n                id: SIM_LAYER_1_RID,\r\n                direction: 'recv'\r\n            },\r\n            {\r\n                id: SIM_LAYER_2_RID,\r\n                direction: 'recv'\r\n            },\r\n            {\r\n                id: SIM_LAYER_3_RID,\r\n                direction: 'recv'\r\n            }\r\n        ];\r\n\r\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\r\n        // eslint-disable-next-line max-len\r\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\r\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\r\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\r\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\r\n\r\n        // eslint-disable-next-line camelcase\r\n        sdp.media[idx].simulcast_03 = {\r\n            value: simulcastLine\r\n        };\r\n\r\n        return new RTCSessionDescription({\r\n            type: desc.type,\r\n            sdp: transform.write(sdp)\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\r\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\r\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer\r\n    * in a p2p connection.\r\n    * @returns {void}\r\n    */\r\n    addTrack(localTrack, isInitiator) {\r\n        const track = localTrack.getTrack();\r\n\r\n        if (isInitiator) {\r\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\r\n            // to the peerconnection before a session-initiate is sent over to the peer.\r\n            const transceiverInit = {\r\n                direction: 'sendrecv',\r\n                streams: [ localTrack.getOriginalStream() ],\r\n                sendEncodings: []\r\n            };\r\n\r\n            if (!browser.isFirefox()) {\r\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\r\n            }\r\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\r\n        } else {\r\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\r\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\r\n            // unused \"recv-only\" transceiver.\r\n            this.pc.peerconnection.addTrack(track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\r\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    addTrackUnmute(localTrack) {\r\n        const mediaType = localTrack.getType();\r\n        const track = localTrack.getTrack();\r\n\r\n        // The assumption here is that the first transceiver of the specified\r\n        // media type is that of the local track.\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\r\n\r\n        if (!transceiver) {\r\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\r\n        }\r\n        logger.debug(`Adding ${localTrack} on ${this.pc}`);\r\n\r\n        // If the client starts with audio/video muted setting, the transceiver direction\r\n        // will be set to 'recvonly'. Use addStream here so that a MSID is generated for the stream.\r\n        if (transceiver.direction === 'recvonly') {\r\n            const stream = localTrack.getOriginalStream();\r\n\r\n            if (stream) {\r\n                this.pc.peerconnection.addStream(localTrack.getOriginalStream());\r\n\r\n                return this.setEncodings(localTrack).then(() => {\r\n                    this.pc.localTracks.set(localTrack.rtcId, localTrack);\r\n                    transceiver.direction = 'sendrecv';\r\n                });\r\n            }\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return transceiver.sender.replaceTrack(track);\r\n    }\r\n\r\n    /**\r\n     * Obtains the current local video track's height constraints based on the\r\n     * initial stream encodings configuration on the sender and the resolution\r\n     * of the current local track added to the peerconnection.\r\n     * @param {MediaStreamTrack} localTrack local video track\r\n     * @returns {Array[number]} an array containing the resolution heights of\r\n     * simulcast streams configured on the video sender.\r\n     */\r\n    getLocalStreamHeightConstraints(localTrack) {\r\n        // React-native hasn't implemented MediaStreamTrack getSettings yet.\r\n        if (browser.isReactNative()) {\r\n            return null;\r\n        }\r\n\r\n        const localVideoHeightConstraints = [];\r\n        const height = localTrack.getSettings().height;\r\n\r\n        for (const encoding of this.localStreamEncodingsConfig) {\r\n            localVideoHeightConstraints.push(height / encoding.scaleResolutionDownBy);\r\n        }\r\n\r\n        return localVideoHeightConstraints;\r\n    }\r\n\r\n    /**\r\n     * Removes the track from the RTCRtpSender as part of the mute operation.\r\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    removeTrackMute(localTrack) {\r\n        const mediaType = localTrack.getType();\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.sender && t.sender.track && t.sender.track.id === localTrack.getTrackId());\r\n\r\n        if (!transceiver) {\r\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\r\n        }\r\n\r\n        logger.debug(`Removing ${localTrack} on ${this.pc}`);\r\n\r\n        return transceiver.sender.replaceTrack(null);\r\n    }\r\n\r\n    /**\r\n     * Replaces the existing track on a RTCRtpSender with the given track.\r\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\r\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    replaceTrack(oldTrack, newTrack) {\r\n        if (oldTrack && newTrack) {\r\n            const mediaType = newTrack.getType();\r\n            const stream = newTrack.getOriginalStream();\r\n\r\n            // Ignore cases when the track is replaced while the device is in a muted state,like\r\n            // replacing camera when video muted or replacing mic when audio muted. These JitsiLocalTracks\r\n            // do not have a mediastream attached. Replace track will be called again when the device is\r\n            // unmuted and the track will be replaced on the peerconnection then.\r\n            if (!stream) {\r\n                this.pc.localTracks.delete(oldTrack.rtcId);\r\n                this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n\r\n                return Promise.resolve();\r\n            }\r\n            const track = mediaType === MediaType.AUDIO\r\n                ? stream.getAudioTracks()[0]\r\n                : stream.getVideoTracks()[0];\r\n            const transceiver = this.pc.peerconnection.getTransceivers()\r\n                .find(t => t.receiver.track.kind === mediaType && !t.stopped);\r\n\r\n            if (!transceiver) {\r\n                return Promise.reject(new Error('replace track failed'));\r\n            }\r\n            logger.debug(`Replacing ${oldTrack} with ${newTrack} on ${this.pc}`);\r\n\r\n            return transceiver.sender.replaceTrack(track)\r\n                .then(() => {\r\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\r\n\r\n                    this.pc.localTracks.delete(oldTrack.rtcId);\r\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\r\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\r\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n\r\n                    this.pc._addedStreams.push(stream);\r\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\r\n                    this.pc.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\r\n                        newTrack,\r\n                        this.pc._extractPrimarySSRC(ssrc));\r\n                });\r\n        } else if (oldTrack && !newTrack) {\r\n            return this.removeTrackMute(oldTrack)\r\n                .then(() => {\r\n                    this.pc.localTracks.delete(oldTrack.rtcId);\r\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\r\n                });\r\n        } else if (newTrack && !oldTrack) {\r\n            const ssrc = this.pc.localSSRCs.get(newTrack.rtcId);\r\n\r\n            return this.addTrackUnmute(newTrack)\r\n                .then(() => {\r\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Enables/disables audio transmission on the peer connection. When\r\n    * disabled the audio transceiver direction will be set to 'inactive'\r\n    * which means that no data will be sent nor accepted, but\r\n    * the connection should be kept alive.\r\n    * @param {boolean} active - true to enable audio media transmission or\r\n    * false to disable.\r\n    * @returns {void}\r\n    */\r\n    setAudioTransferActive(active) {\r\n        this.setMediaTransferActive(MediaType.AUDIO, active);\r\n    }\r\n\r\n    /**\r\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\r\n     * @param {JitsiLocalTrack} track - the current track in use for which\r\n     * the encodings are to be set.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    setEncodings(track) {\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.sender && t.sender.track && t.sender.track.kind === track.getType());\r\n        const parameters = transceiver.sender.getParameters();\r\n\r\n        parameters.encodings = this._getStreamEncodings(track);\r\n\r\n        return transceiver.sender.setParameters(parameters);\r\n    }\r\n\r\n    /**\r\n     * Enables/disables media transmission on the peerconnection by changing the direction\r\n     * on the transceiver for the specified media type.\r\n     * @param {String} mediaType - 'audio' or 'video'\r\n     * @param {boolean} active - true to enable media transmission or false\r\n     * to disable.\r\n     * @returns {void}\r\n     */\r\n    setMediaTransferActive(mediaType, active) {\r\n        const transceivers = this.pc.peerconnection.getTransceivers()\r\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\r\n        const localTracks = this.pc.getLocalTracks(mediaType);\r\n\r\n        logger.info(`${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer on ${this.pc}`);\r\n        transceivers.forEach((transceiver, idx) => {\r\n            if (active) {\r\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\r\n                if (idx === 0 && localTracks.length) {\r\n                    transceiver.direction = 'sendrecv';\r\n                } else {\r\n                    transceiver.direction = 'recvonly';\r\n                }\r\n            } else {\r\n                transceiver.direction = 'inactive';\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Enables/disables video media transmission on the peer connection. When\r\n    * disabled the SDP video media direction in the local SDP will be adjusted to\r\n    * 'inactive' which means that no data will be sent nor accepted, but\r\n    * the connection should be kept alive.\r\n    * @param {boolean} active - true to enable video media transmission or\r\n    * false to disable.\r\n    * @returns {void}\r\n    */\r\n    setVideoTransferActive(active) {\r\n        this.setMediaTransferActive(MediaType.VIDEO, active);\r\n    }\r\n}\r\n","/**\r\n * A model for keeping track of each user's total\r\n * time as a dominant speaker. The model also\r\n * keeps track of the user's last known name\r\n * in case the user has left the meeting,\r\n * which is also tracked.\r\n */\r\nclass SpeakerStats {\r\n    /**\r\n     * Initializes a new SpeakerStats instance.\r\n     *\r\n     * @constructor\r\n     * @param {string} userId - The id of the user being tracked.\r\n     * @param {string} displayName - The name of the user being tracked.\r\n     * @param {boolean} isLocalStats - True if the stats model tracks\r\n     * the local user.\r\n     * @returns {void}\r\n     */\r\n    constructor(userId, displayName, isLocalStats) {\r\n        this._userId = userId;\r\n        this.setDisplayName(displayName);\r\n        this._isLocalStats = isLocalStats || false;\r\n        this.setDominantSpeaker(false);\r\n        this.totalDominantSpeakerTime = 0;\r\n        this._dominantSpeakerStart = 0;\r\n        this._hasLeft = false;\r\n    }\r\n\r\n    /**\r\n     * Get the user id being tracked.\r\n     *\r\n     * @returns {string} The user id.\r\n     */\r\n    getUserId() {\r\n        return this._userId;\r\n    }\r\n\r\n    /**\r\n     * Get the name of the user being tracked.\r\n     *\r\n     * @returns {string} The user name.\r\n     */\r\n    getDisplayName() {\r\n        return this.displayName;\r\n    }\r\n\r\n    /**\r\n     * Updates the last known name of the user being tracked.\r\n     *\r\n     * @param {string} - The user name.\r\n     * @returns {void}\r\n     */\r\n    setDisplayName(newName) {\r\n        this.displayName = newName;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the stats are tracking the local user.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isLocalStats() {\r\n        return this._isLocalStats;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tracked user is currently a dominant speaker.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isDominantSpeaker() {\r\n        return this._dominantSpeakerStart > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tracked user is currently a dominant speaker.\r\n     *\r\n     * @param {boolean} - If true, the user will being accumulating time\r\n     * as dominant speaker. If false, the user will not accumulate time\r\n     * and will record any time accumulated since starting as dominant speaker.\r\n     * @returns {void}\r\n     */\r\n    setDominantSpeaker(isNowDominantSpeaker) {\r\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\r\n            this._dominantSpeakerStart = Date.now();\r\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\r\n            const now = Date.now();\r\n            const timeElapsed = now - this._dominantSpeakerStart;\r\n\r\n            this.totalDominantSpeakerTime += timeElapsed;\r\n            this._dominantSpeakerStart = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get how long the tracked user has been dominant speaker.\r\n     *\r\n     * @returns {number} - The speaker time in milliseconds.\r\n     */\r\n    getTotalDominantSpeakerTime() {\r\n        let total = this.totalDominantSpeakerTime;\r\n\r\n        if (this.isDominantSpeaker()) {\r\n            total += Date.now() - this._dominantSpeakerStart;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * Get whether or not the user is still in the meeting.\r\n     *\r\n     * @returns {boolean} True if the user is no longer in the meeting.\r\n     */\r\n    hasLeft() {\r\n        return this._hasLeft;\r\n    }\r\n\r\n    /**\r\n     * Set the user as having left the meeting.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    markAsHasLeft() {\r\n        this._hasLeft = true;\r\n        this.setDominantSpeaker(false);\r\n    }\r\n}\r\n\r\nmodule.exports = SpeakerStats;\r\n","const AuthenticationEvents = {\r\n    /**\r\n     * Event callback arguments:\r\n     * function(authenticationEnabled, userIdentity)\r\n     * authenticationEnabled - indicates whether authentication has been enabled\r\n     *                         in this session\r\n     * userIdentity - if user has been logged in then it contains user name. If\r\n     *                contains 'null' or 'undefined' then user is not logged in.\r\n     */\r\n    IDENTITY_UPDATED: 'authentication.identity_updated'\r\n};\r\n\r\nmodule.exports = AuthenticationEvents;\r\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/**\r\n * Derives a set of keys from the master key.\r\n * @param {CryptoKey} material - master key to derive from\r\n *\r\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\r\n */\r\nexport async function deriveKeys(material) {\r\n    const info = new ArrayBuffer();\r\n    const textEncoder = new TextEncoder();\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\r\n    const encryptionKey = await crypto.subtle.deriveKey({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameEncryptionKey'),\r\n        hash: 'SHA-256',\r\n        info\r\n    }, material, {\r\n        name: 'AES-CTR',\r\n        length: 128\r\n    }, false, [ 'encrypt', 'decrypt' ]);\r\n    const authenticationKey = await crypto.subtle.deriveKey({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameAuthenticationKey'),\r\n        hash: 'SHA-256',\r\n        info\r\n    }, material, {\r\n        name: 'HMAC',\r\n        hash: 'SHA-256'\r\n    }, false, [ 'sign' ]);\r\n    const saltKey = await crypto.subtle.deriveBits({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameSaltKey'),\r\n        hash: 'SHA-256',\r\n        info\r\n    }, material, 128);\r\n\r\n    return {\r\n        material,\r\n        encryptionKey,\r\n        authenticationKey,\r\n        saltKey\r\n    };\r\n}\r\n\r\n/**\r\n * Ratchets a key. See\r\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\r\n * @param {CryptoKey} material - base key material\r\n * @returns {ArrayBuffer} - ratcheted key material\r\n */\r\nexport async function ratchet(material) {\r\n    const textEncoder = new TextEncoder();\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\r\n    return crypto.subtle.deriveBits({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameRatchetKey'),\r\n        hash: 'SHA-256',\r\n        info: new ArrayBuffer()\r\n    }, material, 256);\r\n}\r\n\r\n/**\r\n * Converts a raw key into a WebCrypto key object with default options\r\n * suitable for our usage.\r\n * @param {ArrayBuffer} keyBytes - raw key\r\n * @param {Array} keyUsages - key usages, see importKey documentation\r\n * @returns {CryptoKey} - the WebCrypto key.\r\n */\r\nexport async function importKey(keyBytes) {\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\r\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\r\n}\r\n","/* global __filename, Promise */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport {\r\n    TRACK_IS_DISPOSED,\r\n    TRACK_NO_STREAM_FOUND\r\n} from '../../JitsiTrackErrors';\r\nimport {\r\n    LOCAL_TRACK_STOPPED,\r\n    NO_DATA_FROM_SOURCE,\r\n    TRACK_MUTE_CHANGED\r\n} from '../../JitsiTrackEvents';\r\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport {\r\n    NO_BYTES_SENT,\r\n    TRACK_UNMUTED,\r\n    createNoDataFromSourceEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nimport JitsiTrack from './JitsiTrack';\r\nimport RTCUtils from './RTCUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Represents a single media track(either audio or video).\r\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\r\n */\r\nexport default class JitsiLocalTrack extends JitsiTrack {\r\n    /**\r\n     * Constructs new JitsiLocalTrack instance.\r\n     *\r\n     * @constructor\r\n     * @param {Object} trackInfo\r\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\r\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\r\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\r\n     * JitsiRemoteTrack\r\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\r\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\r\n     * @param trackInfo.effects the effects array contains the effect instance to use\r\n     * @param trackInfo.resolution the video resolution if it's a video track\r\n     * @param trackInfo.deviceId the ID of the local device for this track\r\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\r\n     * call\r\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\r\n     * source. NOTE: defined for desktop sharing tracks only.\r\n     */\r\n    constructor({\r\n        deviceId,\r\n        facingMode,\r\n        mediaType,\r\n        resolution,\r\n        rtcId,\r\n        sourceId,\r\n        sourceType,\r\n        stream,\r\n        track,\r\n        videoType,\r\n        effects = []\r\n    }) {\r\n        super(\r\n            /* conference */ null,\r\n            stream,\r\n            track,\r\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\r\n            mediaType,\r\n            videoType);\r\n\r\n        this._setEffectInProgress = false;\r\n        const effect = effects.find(e => e.isEnabled(this));\r\n\r\n        if (effect) {\r\n            this._startStreamEffect(effect);\r\n        }\r\n\r\n        /**\r\n         * The ID assigned by the RTC module on instance creation.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.rtcId = rtcId;\r\n        this.sourceId = sourceId;\r\n        this.sourceType = sourceType;\r\n\r\n        if (browser.usesNewGumFlow()) {\r\n            // Get the resolution from the track itself because it cannot be\r\n            // certain which resolution webrtc has fallen back to using.\r\n            this.resolution = track.getSettings().height;\r\n            this.maxEnabledResolution = resolution;\r\n\r\n            // Cache the constraints of the track in case of any this track\r\n            // model needs to call getUserMedia again, such as when unmuting.\r\n            this._constraints = track.getConstraints();\r\n\r\n            // Safari returns an empty constraints object, construct the constraints using getSettings.\r\n            if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\r\n                this._constraints = {\r\n                    height: track.getSettings().height,\r\n                    width: track.getSettings().width\r\n                };\r\n            }\r\n        } else {\r\n            // FIXME Currently, Firefox is ignoring our constraints about\r\n            // resolutions so we do not store it, to avoid wrong reporting of\r\n            // local track resolution.\r\n            this.resolution = browser.isFirefox() ? null : resolution;\r\n            this.maxEnabledResolution = this.resolution;\r\n        }\r\n\r\n        this.deviceId = deviceId;\r\n\r\n        /**\r\n         * The <tt>Promise</tt> which represents the progress of a previously\r\n         * queued/scheduled {@link _setMuted} (from the point of view of\r\n         * {@link _queueSetMuted}).\r\n         *\r\n         * @private\r\n         * @type {Promise}\r\n         */\r\n        this._prevSetMuted = Promise.resolve();\r\n\r\n        /**\r\n         * The facing mode of the camera from which this JitsiLocalTrack\r\n         * instance was obtained.\r\n         *\r\n         * @private\r\n         * @type {CameraFacingMode|undefined}\r\n         */\r\n        this._facingMode = facingMode;\r\n\r\n        // Currently there is no way to know the MediaStreamTrack ended due to\r\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\r\n        // Instead we will compare current track's label with device labels from\r\n        // enumerateDevices() list.\r\n        this._trackEnded = false;\r\n\r\n        /**\r\n         * Indicates whether data has been sent or not.\r\n         */\r\n        this._hasSentData = false;\r\n\r\n        /**\r\n         * Used only for detection of audio problems. We want to check only once\r\n         * whether the track is sending data ot not. This flag is set to false\r\n         * after the check.\r\n         */\r\n        this._testDataSent = true;\r\n\r\n        // Currently there is no way to determine with what device track was\r\n        // created (until getConstraints() support), however we can associate\r\n        // tracks with real devices obtained from enumerateDevices() call as\r\n        // soon as it's called.\r\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\r\n        // correspond to the id of a matching device from the available device list.\r\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\r\n\r\n        this._trackMutedTS = 0;\r\n\r\n        this._onDeviceListWillChange = devices => {\r\n            const oldRealDeviceId = this._realDeviceId;\r\n\r\n            this._setRealDeviceIdFromDeviceList(devices);\r\n\r\n            if (\r\n                // Mark track as ended for those browsers that do not support\r\n                // \"readyState\" property. We do not touch tracks created with\r\n                // default device ID \"\".\r\n                (typeof this.getTrack().readyState === 'undefined'\r\n                    && typeof this._realDeviceId !== 'undefined'\r\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\r\n\r\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\r\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\r\n                // addition on some Chrome versions the readyState property is set after the device change event is\r\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\r\n                // detect that the old one was removed.\r\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\r\n            ) {\r\n                this._trackEnded = true;\r\n            }\r\n        };\r\n\r\n        // Subscribe each created local audio track to\r\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\r\n        // handling this event for remote tracks (which are handled in RTC.js),\r\n        // because there might be local tracks not attached to a conference.\r\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\r\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\r\n            RTCUtils.addListener(\r\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._onAudioOutputDeviceChanged);\r\n        }\r\n\r\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\r\n\r\n        this._initNoDataFromSourceHandlers();\r\n    }\r\n\r\n    /**\r\n     * Returns if associated MediaStreamTrack is in the 'ended' state\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isEnded() {\r\n        if (this.isVideoTrack() && this.isMuted()) {\r\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\r\n            // _trackEnded flag.\r\n            return this._trackEnded;\r\n        }\r\n\r\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\r\n    }\r\n\r\n    /**\r\n     * Sets handlers to the MediaStreamTrack object that will detect camera\r\n     * issues.\r\n     */\r\n    _initNoDataFromSourceHandlers() {\r\n        if (!this._isNoDataFromSourceEventsEnabled()) {\r\n            return;\r\n        }\r\n\r\n        this._setHandler('track_mute', () => {\r\n            this._trackMutedTS = window.performance.now();\r\n            this._fireNoDataFromSourceEvent();\r\n        });\r\n\r\n        this._setHandler('track_unmute', () => {\r\n            this._fireNoDataFromSourceEvent();\r\n            Statistics.sendAnalyticsAndLog(\r\n                TRACK_UNMUTED,\r\n                {\r\n                    'media_type': this.getType(),\r\n                    'track_type': 'local',\r\n                    value: window.performance.now() - this._trackMutedTS\r\n                });\r\n        });\r\n\r\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\r\n            this._setHandler('track_ended', () => {\r\n                if (!this.isReceivingData()) {\r\n                    this._fireNoDataFromSourceEvent();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\r\n     *\r\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\r\n     */\r\n    _isNoDataFromSourceEventsEnabled() {\r\n        // Disable the events for screen sharing.\r\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\r\n    }\r\n\r\n    /**\r\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\r\n     */\r\n    _fireNoDataFromSourceEvent() {\r\n        const value = !this.isReceivingData();\r\n\r\n        this.emit(NO_DATA_FROM_SOURCE, value);\r\n\r\n        // FIXME: Should we report all of those events\r\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\r\n        Statistics.sendLog(JSON.stringify({\r\n            name: NO_DATA_FROM_SOURCE,\r\n            log: value\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Sets real device ID by comparing track information with device\r\n     * information. This is temporary solution until getConstraints() method\r\n     * will be implemented in browsers.\r\n     *\r\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\r\n     * enumerateDevices() call\r\n     */\r\n    _setRealDeviceIdFromDeviceList(devices) {\r\n        const track = this.getTrack();\r\n        const kind = `${track.kind}input`;\r\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\r\n\r\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\r\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\r\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\r\n            // why in order to match it we need to remove the 'Default - ' part.\r\n            const label = (track.label || '').replace('Default - ', '');\r\n\r\n            device = devices.find(d => d.kind === kind && d.label === label);\r\n        }\r\n\r\n        if (device) {\r\n            this._realDeviceId = device.deviceId;\r\n        } else {\r\n            this._realDeviceId = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\r\n     * handlers to it.\r\n     *\r\n     * @param {MediaStream} stream the new stream.\r\n     * @protected\r\n     */\r\n    _setStream(stream) {\r\n        super._setStream(stream);\r\n\r\n        if (stream) {\r\n            // Store the MSID for video mute/unmute purposes.\r\n            this.storedMSID = this.getMSID();\r\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\r\n        } else {\r\n            logger.debug(`Setting 'null' stream on ${this}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the effect process and returns the modified stream.\r\n     *\r\n     * @private\r\n     * @param {*} effect - Represents effect instance\r\n     * @returns {void}\r\n     */\r\n    _startStreamEffect(effect) {\r\n        this._streamEffect = effect;\r\n        this._originalStream = this.stream;\r\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\r\n        this.track = this.stream.getTracks()[0];\r\n    }\r\n\r\n    /**\r\n     * Stops the effect process and returns the original stream.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _stopStreamEffect() {\r\n        if (this._streamEffect) {\r\n            this._streamEffect.stopEffect();\r\n            this._setStream(this._originalStream);\r\n            this._originalStream = null;\r\n            this.track = this.stream.getTracks()[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\r\n     *\r\n     * @param {Object|undefined} effect - The new effect to be set.\r\n     */\r\n    _switchStreamEffect(effect) {\r\n        if (this._streamEffect) {\r\n            this._stopStreamEffect();\r\n            this._streamEffect = undefined;\r\n        }\r\n        if (effect) {\r\n            this._startStreamEffect(effect);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the effect and switches between the modified stream and original one.\r\n     *\r\n     * @param {Object} effect - Represents the effect instance to be used.\r\n     * @returns {Promise}\r\n     */\r\n    setEffect(effect) {\r\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\r\n            return Promise.reject(new Error('Incompatible effect instance!'));\r\n        }\r\n\r\n        if (this._setEffectInProgress === true) {\r\n            return Promise.reject(new Error('setEffect already in progress!'));\r\n        }\r\n\r\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\r\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\r\n        if (this.isMuted() && !this.isAudioTrack()) {\r\n            this._streamEffect = effect;\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const conference = this.conference;\r\n\r\n        if (!conference) {\r\n            this._switchStreamEffect(effect);\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._setEffectInProgress = true;\r\n\r\n        if (browser.usesUnifiedPlan()) {\r\n            this._switchStreamEffect(effect);\r\n            if (this.isVideoTrack()) {\r\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n            }\r\n\r\n            return conference.replaceTrack(this, this)\r\n                .then(() => {\r\n                    this._setEffectInProgress = false;\r\n                })\r\n                .catch(error => {\r\n                    this._setEffectInProgress = false;\r\n                    this._switchStreamEffect();\r\n                    logger.error('Failed to switch to the new stream!', error);\r\n                    throw error;\r\n                });\r\n        }\r\n\r\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\r\n        return conference.removeTrack(this)\r\n            .then(() => {\r\n                this._switchStreamEffect(effect);\r\n                if (this.isVideoTrack()) {\r\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n                }\r\n\r\n                return conference.addTrack(this);\r\n            })\r\n            .then(() => {\r\n                this._setEffectInProgress = false;\r\n            })\r\n            .catch(error => {\r\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\r\n                // everyhting related to the effect functionality.\r\n                this._setEffectInProgress = false;\r\n                this._switchStreamEffect();\r\n                logger.error('Failed to switch to the new stream!', error);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Asynchronously mutes this track.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    mute() {\r\n        return this._queueSetMuted(true);\r\n    }\r\n\r\n    /**\r\n     * Asynchronously unmutes this track.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    unmute() {\r\n        return this._queueSetMuted(false);\r\n    }\r\n\r\n    /**\r\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\r\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\r\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\r\n     * serialized fashion.\r\n     *\r\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\r\n     * @returns {Promise}\r\n     */\r\n    _queueSetMuted(muted) {\r\n        const setMuted = this._setMuted.bind(this, muted);\r\n\r\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\r\n\r\n        return this._prevSetMuted;\r\n    }\r\n\r\n    /**\r\n     * Mutes / unmutes this track.\r\n     *\r\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\r\n     * otherwise, this track will be unmuted.\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _setMuted(muted) {\r\n        if (this.isMuted() === muted) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.disposed) {\r\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\r\n        }\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        // A function that will print info about muted status transition\r\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\r\n\r\n        if (this.isAudioTrack()\r\n                || this.videoType === VideoType.DESKTOP\r\n                || !browser.doesVideoMuteByStreamRemove()) {\r\n            logMuteInfo();\r\n            if (this.track) {\r\n                this.track.enabled = !muted;\r\n            }\r\n        } else if (muted) {\r\n            promise = new Promise((resolve, reject) => {\r\n                logMuteInfo();\r\n                this._removeStreamFromConferenceAsMute(\r\n                    () => {\r\n                        if (this._streamEffect) {\r\n                            this._stopStreamEffect();\r\n                        }\r\n\r\n                        // FIXME: Maybe here we should set the SRC for the\r\n                        // containers to something\r\n                        // We don't want any events to be fired on this stream\r\n                        this._unregisterHandlers();\r\n                        this.stopStream();\r\n                        this._setStream(null);\r\n                        resolve();\r\n                    },\r\n                    reject);\r\n            });\r\n        } else {\r\n            logMuteInfo();\r\n\r\n            // This path is only for camera.\r\n            const streamOptions = {\r\n                cameraDeviceId: this.getDeviceId(),\r\n                devices: [ MediaType.VIDEO ],\r\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\r\n                facingMode: this.getCameraFacingMode()\r\n            };\r\n\r\n            if (browser.usesNewGumFlow()) {\r\n                promise\r\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\r\n                        {},\r\n                        streamOptions,\r\n                        { constraints: { video: this._constraints } }));\r\n            } else {\r\n                if (this.resolution) {\r\n                    streamOptions.resolution = this.resolution;\r\n                }\r\n\r\n                promise\r\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\r\n            }\r\n\r\n            promise = promise.then(streamsInfo => {\r\n                // The track kind for presenter track is video as well.\r\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\r\n                const streamInfo\r\n                    = browser.usesNewGumFlow()\r\n                        ? streamsInfo.find(\r\n                            info => info.track.kind === mediaType)\r\n                        : streamsInfo.find(\r\n                            info => info.mediaType === mediaType);\r\n\r\n                if (streamInfo) {\r\n                    this._setStream(streamInfo.stream);\r\n                    this.track = streamInfo.track;\r\n\r\n                    // This is not good when video type changes after\r\n                    // unmute, but let's not crash here\r\n                    if (this.videoType !== streamInfo.videoType) {\r\n                        logger.warn(\r\n                            `${this}: video type has changed after unmute!`,\r\n                            this.videoType, streamInfo.videoType);\r\n                        this.videoType = streamInfo.videoType;\r\n                    }\r\n                } else {\r\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\r\n                }\r\n\r\n                if (this._streamEffect) {\r\n                    this._startStreamEffect(this._streamEffect);\r\n                }\r\n\r\n                this.containers.map(\r\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n\r\n                return this._addStreamToConferenceAsUnmute();\r\n            });\r\n        }\r\n\r\n        return promise\r\n            .then(() => this._sendMuteStatus(muted))\r\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\r\n    }\r\n\r\n    /**\r\n     * Adds stream to conference and marks it as \"unmute\" operation.\r\n     *\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _addStreamToConferenceAsUnmute() {\r\n        if (!this.conference) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        // FIXME it would be good to not included conference as part of this\r\n        // process. Only TraceablePeerConnections to which the track is attached\r\n        // should care about this action. The TPCs to which the track is not\r\n        // attached can sync up when track is re-attached.\r\n        // A problem with that is that the \"modify sources\" queue is part of\r\n        // the JingleSessionPC and it would be excluded from the process. One\r\n        // solution would be to extract class between TPC and JingleSessionPC\r\n        // which would contain the queue and would notify the signaling layer\r\n        // when local SSRCs are changed. This would help to separate XMPP from\r\n        // the RTC module.\r\n        return new Promise((resolve, reject) => {\r\n            this.conference._addLocalTrackAsUnmute(this)\r\n                .then(resolve, error => reject(new Error(error)));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes stream from conference and marks it as \"mute\" operation.\r\n     *\r\n     * @param {Function} successCallback will be called on success\r\n     * @param {Function} errorCallback will be called on error\r\n     * @private\r\n     */\r\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\r\n        if (!this.conference) {\r\n            successCallback();\r\n\r\n            return;\r\n        }\r\n        this.conference._removeLocalTrackAsMute(this).then(\r\n            successCallback,\r\n            error => errorCallback(new Error(error)));\r\n    }\r\n\r\n    /**\r\n     * Sends mute status for a track to conference if any.\r\n     *\r\n     * @param {boolean} mute - If track is muted.\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _sendMuteStatus(mute) {\r\n        if (!this.conference || !this.conference.room) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return new Promise(resolve => {\r\n            this.conference.room[\r\n                this.isAudioTrack()\r\n                    ? 'setAudioMute'\r\n                    : 'setVideoMute'](mute, resolve);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     *\r\n     * Stops sending the media track. And removes it from the HTML.\r\n     * NOTE: Works for local tracks only.\r\n     *\r\n     * @extends JitsiTrack#dispose\r\n     * @returns {Promise}\r\n     */\r\n    dispose() {\r\n        this._switchStreamEffect();\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        if (this.conference) {\r\n            promise = this.conference.removeTrack(this);\r\n        }\r\n\r\n        if (this.stream) {\r\n            this.stopStream();\r\n            this.detach();\r\n        }\r\n\r\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\r\n\r\n        if (this._onAudioOutputDeviceChanged) {\r\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._onAudioOutputDeviceChanged);\r\n        }\r\n\r\n        return promise.then(() => super.dispose());\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\r\n     * otherwise.\r\n     *\r\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\r\n     * <tt>false</tt> otherwise.\r\n     */\r\n    isMuted() {\r\n        // this.stream will be null when we mute local video on Chrome\r\n        if (!this.stream) {\r\n            return true;\r\n        }\r\n        if (this.isVideoTrack() && !this.isActive()) {\r\n            return true;\r\n        }\r\n\r\n        return !this.track || !this.track.enabled;\r\n    }\r\n\r\n    /**\r\n     * Sets the JitsiConference object associated with the track. This is temp\r\n     * solution.\r\n     *\r\n     * @param conference the JitsiConference object\r\n     */\r\n    _setConference(conference) {\r\n        this.conference = conference;\r\n\r\n        // We want to keep up with postponed events which should have been fired\r\n        // on \"attach\" call, but for local track we not always have the\r\n        // conference before attaching. However this may result in duplicated\r\n        // events if they have been triggered on \"attach\" already.\r\n        for (let i = 0; i < this.containers.length; i++) {\r\n            this._maybeFireTrackAttached(this.containers[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true</tt>.\r\n     *\r\n     * @returns {boolean} <tt>true</tt>\r\n     */\r\n    isLocal() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns device id associated with track.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDeviceId() {\r\n        return this._realDeviceId || this.deviceId;\r\n    }\r\n\r\n    /**\r\n     * Returns the participant id which owns the track.\r\n     *\r\n     * @returns {string} the id of the participants. It corresponds to the\r\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\r\n     */\r\n    getParticipantId() {\r\n        return this.conference && this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Handles bytes sent statistics.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\r\n     * @param {number} bytesSent the new value\r\n     * NOTE: used only for audio tracks to detect audio issues.\r\n     */\r\n    _onByteSentStatsReceived(tpc, bytesSent) {\r\n        if (bytesSent > 0) {\r\n            this._hasSentData = true;\r\n        }\r\n        const iceConnectionState = tpc.getConnectionState();\r\n\r\n        if (this._testDataSent && iceConnectionState === 'connected') {\r\n            setTimeout(() => {\r\n                if (!this._hasSentData) {\r\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\r\n                        ${bytesSent}`);\r\n\r\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\r\n                }\r\n            }, 3000);\r\n            this._testDataSent = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns facing mode for video track from camera. For other cases (e.g.\r\n     * audio track or 'desktop' video track) returns undefined.\r\n     *\r\n     * @returns {CameraFacingMode|undefined}\r\n     */\r\n    getCameraFacingMode() {\r\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\r\n            // MediaStreamTrack#getSettings() is not implemented in many\r\n            // browsers, so we need feature checking here. Progress on the\r\n            // respective browser's implementation can be tracked at\r\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\r\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\r\n            // for Firefox. Even if a browser implements getSettings() already,\r\n            // it might still not return anything for 'facingMode'.\r\n            let trackSettings;\r\n\r\n            try {\r\n                trackSettings = this.track.getSettings();\r\n            } catch (e) {\r\n                // XXX React-native-webrtc, for example, defines\r\n                // MediaStreamTrack#getSettings() but the implementation throws\r\n                // a \"Not implemented\" Error.\r\n            }\r\n            if (trackSettings && 'facingMode' in trackSettings) {\r\n                return trackSettings.facingMode;\r\n            }\r\n\r\n            if (typeof this._facingMode !== 'undefined') {\r\n                return this._facingMode;\r\n            }\r\n\r\n            // In most cases we are showing a webcam. So if we've gotten here,\r\n            // it should be relatively safe to assume that we are probably\r\n            // showing the user-facing camera.\r\n            return CameraFacingMode.USER;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Stops the associated MediaStream.\r\n     */\r\n    stopStream() {\r\n        /**\r\n         * Indicates that we are executing {@link #stopStream} i.e.\r\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\r\n         * associated with this <tt>JitsiTrack</tt> instance.\r\n         *\r\n         * @private\r\n         * @type {boolean}\r\n         */\r\n        this._stopStreamInProgress = true;\r\n\r\n        try {\r\n            RTCUtils.stopMediaStream(this.stream);\r\n        } finally {\r\n            this._stopStreamInProgress = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switches the camera facing mode if the WebRTC implementation supports the\r\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\r\n     * question is implemented in react-native-webrtc only. When such a WebRTC\r\n     * implementation is executing, the method is the preferred way to switch\r\n     * between the front/user-facing and the back/environment-facing cameras\r\n     * because it will likely be (as is the case of react-native-webrtc)\r\n     * noticeably faster that creating a new MediaStreamTrack via a new\r\n     * getUserMedia call with the switched facingMode constraint value.\r\n     * Moreover, the approach with a new getUserMedia call may not even work:\r\n     * WebRTC on Android and iOS is either very slow to open the camera a second\r\n     * time or plainly freezes attempting to do that.\r\n     */\r\n    _switchCamera() {\r\n        if (this.isVideoTrack()\r\n                && this.videoType === VideoType.CAMERA\r\n                && typeof this.track._switchCamera === 'function') {\r\n            this.track._switchCamera();\r\n\r\n            this._facingMode\r\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\r\n                    ? CameraFacingMode.USER\r\n                    : CameraFacingMode.ENVIRONMENT;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the attached MediaStream is receiving data from source or\r\n     * not. If the stream property is null(because of mute or another reason)\r\n     * this method will return false.\r\n     * NOTE: This method doesn't indicate problem with the streams directly.\r\n     * For example in case of video mute the method will return false or if the\r\n     * user has disposed the track.\r\n     *\r\n     * @returns {boolean} true if the stream is receiving data and false\r\n     * this otherwise.\r\n     */\r\n    isReceivingData() {\r\n        if (this.isVideoTrack()\r\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.stream) {\r\n            return false;\r\n        }\r\n\r\n        // In older version of the spec there is no muted property and\r\n        // readyState can have value muted. In the latest versions\r\n        // readyState can have values \"live\" and \"ended\" and there is\r\n        // muted boolean property. If the stream is muted that means that\r\n        // we aren't receiving any data from the source. We want to notify\r\n        // the users for error if the stream is muted or ended on it's\r\n        // creation.\r\n\r\n        // For video blur enabled use the original video stream\r\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\r\n\r\n        return stream.getTracks().some(track =>\r\n            (!('readyState' in track) || track.readyState === 'live')\r\n                && (!('muted' in track) || track.muted !== true));\r\n    }\r\n\r\n    /**\r\n     * Creates a text representation of this local track instance.\r\n     *\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\nimport TrackVADEmitter from './TrackVADEmitter';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\r\n * @type {number}\r\n */\r\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\r\n\r\n/**\r\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\r\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\r\n */\r\nexport default class VADAudioAnalyser extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADAudioAnalyser</tt>\r\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\r\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\r\n     * needs to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @constructor\r\n     */\r\n    constructor(conference, createVADProcessor) {\r\n        super();\r\n\r\n        /**\r\n         * Member function that instantiates a VAD processor.\r\n         */\r\n        this._createVADProcessor = createVADProcessor;\r\n\r\n        /**\r\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\r\n         * period voice probability scores.\r\n         */\r\n        this._vadEmitter = null;\r\n\r\n        /**\r\n         * Current state of the _vadEmitter\r\n         */\r\n        this._isVADEmitterRunning = false;\r\n\r\n        /**\r\n         * Array of currently attached VAD processing services.\r\n         */\r\n        this._detectionServices = [];\r\n\r\n        /**\r\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\r\n         * coming from the conference.\r\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\r\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\r\n         * i.e. (TRACK_MUTE_CHANGED event callback).\r\n         */\r\n        this._vadInitTracker = Promise.resolve();\r\n\r\n        /**\r\n         * Listens for {@link TrackVADEmitter} events and processes them.\r\n         */\r\n        this._processVADScore = this._processVADScore.bind(this);\r\n\r\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\r\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\r\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Attach a VAD detector service to the analyser and handle it's state changes.\r\n     *\r\n     * @param {Object} vadTMDetector\r\n     */\r\n    addVADDetectionService(vadService) {\r\n        this._detectionServices.push(vadService);\r\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\r\n            // When the state of a detector changes check if there are any active detectors attached so that\r\n            // the _vadEmitter doesn't run needlessly.\r\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\r\n\r\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\r\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\r\n            // that needs it.\r\n            if (!activeDetector.length && this._isVADEmitterRunning) {\r\n                this._stopVADEmitter();\r\n            } else if (!this._isVADEmitterRunning) {\r\n                this._startVADEmitter();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start the {@link TrackVADEmitter} and attach the event listener.\r\n     * @returns {void}\r\n     */\r\n    _startVADEmitter() {\r\n        this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\r\n        this._vadEmitter.start();\r\n        this._isVADEmitterRunning = true;\r\n    }\r\n\r\n    /**\r\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\r\n     * @returns {void}\r\n     */\r\n    _stopVADEmitter() {\r\n        this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\r\n        this._vadEmitter.stop();\r\n        this._isVADEmitterRunning = false;\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    _processVADScore(vadScore) {\r\n        for (const detector of this._detectionServices) {\r\n            detector.processVADScore(vadScore);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change the isMuted state of all attached detection services.\r\n     *\r\n     * @param {boolean} isMuted\r\n     */\r\n    _changeDetectorsMuteState(isMuted) {\r\n        for (const detector of this._detectionServices) {\r\n            detector.changeMuteState(isMuted);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\r\n     * Only take into account local audio tracks.\r\n     * @param {JitsiTrack} track - The added track.\r\n     * @returns {void}\r\n     * @listens TRACK_ADDED\r\n     */\r\n    _trackAdded(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\r\n            // destroy/create the processing context in the proper order.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\r\n                .then(vadProcessor =>\r\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\r\n                )\r\n                .then(vadEmitter => {\r\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\r\n\r\n                    this._vadEmitter = vadEmitter;\r\n\r\n                    // Iterate through the detection services and set their appropriate mute state, depending on\r\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\r\n                    this._changeDetectorsMuteState(track.isMuted());\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\r\n     * local audio tracks.\r\n     * @param {JitsiTrack} track - The track whose mute state has changed.\r\n     * @returns {void}\r\n     * @listens TRACK_MUTE_CHANGED\r\n     */\r\n    _trackMuteChanged(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // On a mute toggle reset the state.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => {\r\n                // Set mute status for the attached detection services.\r\n                this._changeDetectorsMuteState(track.isMuted());\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\r\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\r\n     *\r\n     * @param {JitsiTrack} track - The removed track.\r\n     * @returns {void}\r\n     * @listens TRACK_REMOVED\r\n     */\r\n    _trackRemoved(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Use the promise to make sure operations are in sequence.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => {\r\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\r\n\r\n                // Track was removed, clean up and set appropriate states.\r\n                if (this._vadEmitter) {\r\n                    this._stopVADEmitter();\r\n                    this._vadEmitter.destroy();\r\n                    this._vadEmitter = null;\r\n                }\r\n\r\n                // Reset state of detectors when active track is removed.\r\n                for (const detector of this._detectionServices) {\r\n                    detector.reset();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { $iq } from 'strophe.js';\r\n\r\nimport recordingXMLUtils from './recordingXMLUtils';\r\n\r\n/**\r\n * Represents a recording session.\r\n */\r\nexport default class JibriSession {\r\n    /**\r\n     * Initializes a new JibriSession instance.\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(options = {}) {\r\n        this._connection = options.connection;\r\n        this._mode = options.mode;\r\n\r\n        this._setSessionID(options.sessionID);\r\n        this.setStatus(options.status);\r\n    }\r\n\r\n    /**\r\n     * Returns the error related to the session instance, if any.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getError() {\r\n        return this._error;\r\n    }\r\n\r\n    /**\r\n     * Returns the session ID of the session instance.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getID() {\r\n        return this._sessionID;\r\n    }\r\n\r\n    /**\r\n     * Returns the initiator of the session instance.\r\n     *\r\n     * @returns {JitsiParticipant|undefined} The participant that started the session.\r\n     */\r\n    getInitiator() {\r\n        return this._initiator;\r\n    }\r\n\r\n    /**\r\n     * Returns the streaming URL of the session.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getLiveStreamViewURL() {\r\n        return this._liveStreamViewURL;\r\n    }\r\n\r\n    /**\r\n     * Returns the current status of the session.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getStatus() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the participant that stopped the session.\r\n     *\r\n     * @returns {JitsiParticipant|undefined} The participant that stopped the session.\r\n     */\r\n    getTerminator() {\r\n        return this._terminator;\r\n    }\r\n\r\n    /**\r\n     * Returns the current recording mode of the session, such as \"file\".\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getMode() {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Sets the last known error message related to the session.\r\n     *\r\n     * @param {string} error - The error string explaining why the session\r\n     * entered an error state.\r\n     * @returns {void}\r\n     */\r\n    setError(error) {\r\n        this._error = error;\r\n    }\r\n\r\n    /**\r\n     * Sets the last live stream URL for the session instance. Usually this is\r\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\r\n     *\r\n     * @param {string} url - The live stream URL associated with the session.\r\n     * @returns {void}\r\n     */\r\n    setLiveStreamViewURL(url) {\r\n        this._liveStreamViewURL = url;\r\n    }\r\n\r\n    /**\r\n     * Sets the last known status for this recording session.\r\n     *\r\n     * @param {string} status - The new status to set.\r\n     * @returns {void}\r\n     */\r\n    setStatus(status) {\r\n        this._status = status;\r\n    }\r\n\r\n    /**\r\n     * Sets the creator's jid of the session.\r\n     * @param {JitsiParticipant} participant - The creator of the session.\r\n     */\r\n    setInitiator(participant) {\r\n        this._initiator = participant;\r\n    }\r\n\r\n    /**\r\n     * Sets the jid of the participant that stopped the session.\r\n     * @param {JitsiParticipant} participant  - The participant's jid,\r\n     * that stopped the session.\r\n     */\r\n    setTerminator(participant) {\r\n        this._terminator = participant;\r\n    }\r\n\r\n    /**\r\n     * Sends a message to start the actual recording.\r\n     *\r\n     * @param {Object} options - Additional arguments for starting the\r\n     * recording.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [options.broadcastId] - The broadcast ID of an\r\n     * associated YouTube stream, used for knowing the URL from which the stream\r\n     * can be viewed.\r\n     * @param {string} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @param {streamId} options.streamId - Necessary for live streaming, this\r\n     * is the the stream key needed to start a live streaming session with the\r\n     * streaming service provider.\r\n     * @returns Promise\r\n     */\r\n    start({ appData, broadcastId, focusMucJid, streamId }) {\r\n        return new Promise((resolve, reject) => {\r\n            this._connection.sendIQ(\r\n                this._createIQ({\r\n                    action: 'start',\r\n                    appData,\r\n                    focusMucJid,\r\n                    broadcastId,\r\n                    streamId\r\n                }),\r\n                result => {\r\n                    // All users will eventually receive the 'pending' status\r\n                    // from the backend, but for the user initiating the session\r\n                    // it's better to give some instant feedback that recording\r\n                    // is starting so fire 'pending' here manually.\r\n                    this.setStatus('pending');\r\n                    this._setSessionID(\r\n                        recordingXMLUtils.getSessionIdFromIq(result));\r\n\r\n                    resolve();\r\n                },\r\n                error => {\r\n                    this._setErrorFromIq(error);\r\n\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a message to actually stop the recording session.\r\n     *\r\n     * @param {Object} options - Additional arguments for stopping the\r\n     * recording.\r\n     * @param {Object} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @returns Promise\r\n     */\r\n    stop({ focusMucJid }) {\r\n        return new Promise((resolve, reject) => {\r\n            this._connection.sendIQ(\r\n                this._createIQ({\r\n                    action: 'stop',\r\n                    focusMucJid\r\n                }),\r\n                resolve,\r\n                reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates the message to change the status of the recording session.\r\n     *\r\n     * @param {string} status - The new status to which the recording session\r\n     * should transition.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [options.broadcastId] - The broadcast ID of an\r\n     * associated YouTube stream, used for knowing the URL from which the stream\r\n     * can be viewed.\r\n     * @param {string} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @param {streamId} options.streamId - Necessary for live streaming, this\r\n     * is the the stream key needed to start a live streaming session with the\r\n     * streaming service provider.\r\n     * @returns Object - The XMPP IQ message.\r\n     */\r\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\r\n        return $iq({\r\n            to: focusMucJid,\r\n            type: 'set'\r\n        })\r\n        .c('jibri', {\r\n            'xmlns': 'http://jitsi.org/protocol/jibri',\r\n            'action': action,\r\n            'app_data': appData,\r\n            'recording_mode': this._mode,\r\n            'streamid': streamId,\r\n            'you_tube_broadcast_id': broadcastId\r\n        })\r\n        .up();\r\n    }\r\n\r\n    /**\r\n     * Handles the error from an iq and stores the error.\r\n     *\r\n     * @param {Node} errorIq - The error response from an Iq.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _setErrorFromIq(errorIq) {\r\n        const error = errorIq.getElementsByTagName('error')[0];\r\n\r\n        this.setError(error.children[0].tagName);\r\n    }\r\n\r\n    /**\r\n     * Sets the known session ID for this recording session.\r\n     *\r\n     * @param {string} sessionID\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _setSessionID(sessionID) {\r\n        this._sessionID = sessionID;\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport RTCEvents from './service/RTC/RTCEvents';\r\n\r\nconst AUDIO_PERMISSION_NAME = 'microphone';\r\nconst PERMISSION_GRANTED_STATUS = 'granted';\r\nconst VIDEO_PERMISSION_NAME = 'camera';\r\n\r\n/**\r\n * Media devices utilities for Jitsi.\r\n */\r\nclass JitsiMediaDevices {\r\n    /**\r\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\r\n     * instance of this class.\r\n     */\r\n    constructor() {\r\n        this._eventEmitter = new EventEmitter();\r\n        this._grantedPermissions = {};\r\n\r\n        RTC.addListener(\r\n            RTCEvents.DEVICE_LIST_CHANGED,\r\n            devices =>\r\n                this._eventEmitter.emit(\r\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\r\n                    devices));\r\n        RTC.addListener(\r\n            RTCEvents.DEVICE_LIST_AVAILABLE,\r\n            devices =>\r\n                this._logOutputDevice(\r\n                    this.getAudioOutputDevice(),\r\n                    devices));\r\n        RTC.addListener(\r\n            RTCEvents.GRANTED_PERMISSIONS,\r\n            grantedPermissions =>\r\n                this._handleGrantedPermissions(grantedPermissions));\r\n\r\n        // Test if the W3C Permissions API is implemented and the 'camera' and\r\n        // 'microphone' permissions are implemented. (Testing for at least one\r\n        // of them seems sufficient).\r\n        this._permissionsApiSupported = new Promise(resolve => {\r\n            if (!navigator.permissions) {\r\n                resolve(false);\r\n\r\n                return;\r\n            }\r\n\r\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\r\n                .then(() => resolve(true), () => resolve(false));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updated the local granted permissions cache. A permissions might be\r\n     * granted, denied, or undefined. This is represented by having its media\r\n     * type key set to {@code true} or {@code false} respectively.\r\n     *\r\n     * @param {Object} grantedPermissions - Array with the permissions\r\n     * which were granted.\r\n     */\r\n    _handleGrantedPermissions(grantedPermissions) {\r\n        this._grantedPermissions = {\r\n            ...this._grantedPermissions,\r\n            ...grantedPermissions\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gathers data and sends it to statistics.\r\n     * @param deviceID the device id to log\r\n     * @param devices list of devices\r\n     */\r\n    _logOutputDevice(deviceID, devices) {\r\n        const device\r\n            = devices.find(\r\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\r\n\r\n        if (device) {\r\n            Statistics.sendActiveDeviceListEvent(\r\n                RTC.getEventDataForActiveDevice(device));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes callback with list of media devices connected.\r\n     * @param {function} callback\r\n     */\r\n    enumerateDevices(callback) {\r\n        RTC.enumerateDevices(callback);\r\n    }\r\n\r\n    /**\r\n     * Checks if its possible to enumerate available cameras/micropones.\r\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\r\n     * the WebRTC stack is ready, either with true if the device listing is\r\n     * available available or with false otherwise.\r\n     */\r\n    isDeviceListAvailable() {\r\n        return RTC.isDeviceListAvailable();\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @param {string} [deviceType] - type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        return RTC.isDeviceChangeAvailable(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Checks if the permission for the given device was granted.\r\n     *\r\n     * @param {'audio'|'video'} [type] - type of devices to check,\r\n     *      undefined stands for both 'audio' and 'video' together\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    isDevicePermissionGranted(type) {\r\n        return new Promise(resolve => {\r\n            // Shortcut: first check if we already know the permission was\r\n            // granted.\r\n            if (type in this._grantedPermissions) {\r\n                resolve(this._grantedPermissions[type]);\r\n\r\n                return;\r\n            }\r\n\r\n            // Check using the Permissions API.\r\n            this._permissionsApiSupported.then(supported => {\r\n                if (!supported) {\r\n                    // Workaround on Safari for audio input device\r\n                    // selection to work. Safari doesn't support the\r\n                    // permissions query.\r\n                    if (browser.isSafari()) {\r\n                        resolve(true);\r\n\r\n                        return;\r\n                    }\r\n                    resolve(false);\r\n\r\n                    return;\r\n                }\r\n\r\n                const promises = [];\r\n\r\n                switch (type) {\r\n                case MediaType.VIDEO:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: VIDEO_PERMISSION_NAME\r\n                        }));\r\n                    break;\r\n                case MediaType.AUDIO:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: AUDIO_PERMISSION_NAME\r\n                        }));\r\n                    break;\r\n                default:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: VIDEO_PERMISSION_NAME\r\n                        }));\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: AUDIO_PERMISSION_NAME\r\n                        }));\r\n                }\r\n\r\n                Promise.all(promises).then(\r\n                    results => resolve(results.every(permissionStatus => {\r\n                        // The status attribute is deprecated, and state\r\n                        // should be used instead, but check both for now\r\n                        // for backwards compatibility.\r\n                        const grantStatus = permissionStatus.state\r\n                            || permissionStatus.status;\r\n\r\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\r\n                    })),\r\n                    () => resolve(false)\r\n                );\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns true if it is possible to be simultaneously capturing audio\r\n     * from more than one device.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isMultipleAudioInputSupported() {\r\n        return !browser.isFirefox();\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, 'default' stands\r\n     * for default device\r\n     * @returns {string}\r\n     */\r\n    getAudioOutputDevice() {\r\n        return RTC.getAudioOutputDevice();\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\r\n     *      default device\r\n     * @returns {Promise} - resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    setAudioOutputDevice(deviceId) {\r\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\r\n\r\n        if (availableDevices.length > 0) {\r\n            // if we have devices info report device to stats\r\n            // normally this will not happen on startup as this method is called\r\n            // too early. This will happen only on user selection of new device\r\n            this._logOutputDevice(\r\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\r\n        }\r\n\r\n        return RTC.setAudioOutputDevice(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Adds an event handler.\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    addEventListener(event, handler) {\r\n        this._eventEmitter.addListener(event, handler);\r\n    }\r\n\r\n    /**\r\n     * Removes event handler.\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    removeEventListener(event, handler) {\r\n        this._eventEmitter.removeListener(event, handler);\r\n    }\r\n\r\n    /**\r\n     * Emits an event.\r\n     * @param {string} event - event name\r\n     */\r\n    emitEvent(event, ...args) {\r\n        this._eventEmitter.emit(event, ...args);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser can support capturing video,\r\n     * be it camera or desktop, and displaying received video.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsVideo() {\r\n        // Defer to the browser capabilities to allow exposure of the api to the\r\n        // consumer but prevent other files from having to import\r\n        // JitsiMediaDevices.\r\n        return browser.supportsVideo();\r\n    }\r\n}\r\n\r\nexport default new JitsiMediaDevices();\r\n","/* Copyright @ 2015-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*jslint latedef:false*/\r\n\r\n/**\r\n * Ordered log levels.\r\n */\r\nvar levels = {\r\n    \"trace\": 0,\r\n    \"debug\": 1,\r\n    \"info\": 2,\r\n    \"log\": 3,\r\n    \"warn\": 4,\r\n    \"error\": 5\r\n};\r\n\r\n/**\r\n * The default transport - console\r\n * @type LoggerTransport\r\n */\r\nLogger.consoleTransport = console;\r\n\r\n/**\r\n * The array which stores currently registered global transports.\r\n * @type {[LoggerTransport]}\r\n */\r\nvar globalTransports = [ Logger.consoleTransport ];\r\n\r\n/**\r\n * Adds given {@link LoggerTransport} instance to the list of global\r\n * transports which means that it'll be used by all {@link Logger}s\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.addGlobalTransport = function(transport) {\r\n    if (globalTransports.indexOf(transport) === -1) {\r\n        globalTransports.push(transport);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes given {@link LoggerTransport} instance from the list of global\r\n * transports\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.removeGlobalTransport = function(transport) {\r\n    var transportIdx = globalTransports.indexOf(transport);\r\n    if (transportIdx !== -1) {\r\n        globalTransports.splice(transportIdx, 1);\r\n    }\r\n};\r\n\r\n/**\r\n * The global configuration options.\r\n */\r\nvar globalOptions = {};\r\n\r\n/**\r\n * Sets global options which will be used by all loggers. Changing these works\r\n * even after other loggers are created.\r\n */\r\nLogger.setGlobalOptions = function(options) {\r\n    globalOptions = options || {};\r\n};\r\n\r\n/**\r\n * Parses Error's object stack trace and extracts information about the last\r\n * caller before the log method was called.\r\n * @returns JS object with info about the caller - method name, file location,\r\n * line and column.\r\n */\r\nfunction getCallerInfo() {\r\n    var callerInfo = {\r\n        methodName: \"\",\r\n        fileLocation: \"\",\r\n        line: null,\r\n        column: null\r\n    };\r\n    //gets the part of the stack without the logger wrappers\r\n    var error = new Error();\r\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\r\n    if(!stack || stack.length < 1) {\r\n        return callerInfo;\r\n    }\r\n    var m = null;\r\n    if(stack[3]) {\r\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\r\n    }\r\n    if(!m || m.length <= 4) {\r\n        //Firefox && Safari\r\n        if(stack[2].indexOf(\"log@\") === 0){\r\n            //Safari\r\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\r\n        } else {\r\n            //Firefox\r\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\r\n        }\r\n        return callerInfo;\r\n    }\r\n\r\n    callerInfo.methodName = m[1];\r\n    callerInfo.fileLocation = m[2];\r\n    callerInfo.line = m[3];\r\n    callerInfo.column = m[4];\r\n    return callerInfo;\r\n}\r\n\r\n/**\r\n * Logs messages using the transports and level from the logger.\r\n * @param logger a logger instance.\r\n * @param level the log level of the message. See the levels variable.\r\n * @param arguments array with arguments that will be logged.\r\n */\r\nfunction log() {\r\n    var logger = arguments[0], level = arguments[1],\r\n        args = Array.prototype.slice.call(arguments, 2);\r\n    if(levels[level] < logger.level) {\r\n        return;\r\n    }\r\n\r\n    var callerInfo\r\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\r\n            getCallerInfo();\r\n    var transports = globalTransports.concat(logger.transports);\r\n    for(var i = 0; i < transports.length; i++) {\r\n        var t = transports[i];\r\n        var l = t[level];\r\n        if(l && typeof(l) === \"function\") {\r\n            var logPrefixes = [];\r\n\r\n            logPrefixes.push(new Date().toISOString());\r\n\r\n            if (logger.id) {\r\n                logPrefixes.push(\"[\" + logger.id + \"]\");\r\n            }\r\n\r\n            if (callerInfo && callerInfo.methodName.length > 1) {\r\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\r\n            }\r\n\r\n            var fullLogParts = logPrefixes.concat(args);\r\n\r\n            l.bind(t).apply(t, fullLogParts);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * Constructs new logger object.\r\n * @param level the logging level for the new logger\r\n * @param id optional identifier for the logger instance.\r\n * @param {LoggerTransport} transports optional list of handlers(objects) for\r\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\r\n * @param options optional configuration file for how the logger should behave.\r\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\r\n * method invocation should be included in the log. Defaults to false, so the\r\n * call site will be included.\r\n */\r\nfunction Logger(level, id, transports, options) {\r\n    this.id = id;\r\n    this.options = options || {};\r\n    this.transports = transports;\r\n    if(!this.transports) {\r\n        this.transports = [];\r\n    }\r\n    this.level = levels[level];\r\n    var methods = Object.keys(levels);\r\n    for(var i = 0; i < methods.length; i++){\r\n        this[methods[i]] =\r\n            log.bind(null, this, methods[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the log level for the logger.\r\n * @param level the new log level.\r\n */\r\nLogger.prototype.setLevel = function (level) {\r\n    this.level = levels[level];\r\n};\r\nmodule.exports = Logger;\r\n\r\n/**\r\n * Enum for the supported log levels.\r\n */\r\nLogger.levels = {\r\n    TRACE: \"trace\",\r\n    DEBUG: \"debug\",\r\n    INFO: \"info\",\r\n    LOG: \"log\",\r\n    WARN: \"warn\",\r\n    ERROR: \"error\"\r\n};\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\r\n\r\nconst RecordingResult = require('./recordingResult');\r\n\r\n/**\r\n * Possible audio formats MIME types\r\n */\r\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\r\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\r\n\r\n/**\r\n * A TrackRecorder object holds all the information needed for recording a\r\n * single JitsiTrack (either remote or local)\r\n * @param track The JitsiTrack the object is going to hold\r\n */\r\nconst TrackRecorder = function(track) {\r\n    // The JitsiTrack holding the stream\r\n    this.track = track;\r\n\r\n    // The MediaRecorder recording the stream\r\n    this.recorder = null;\r\n\r\n    // The array of data chunks recorded from the stream\r\n    // acts as a buffer until the data is stored on disk\r\n    this.data = null;\r\n\r\n    // the name of the person of the JitsiTrack. This can be undefined and/or\r\n    // not unique\r\n    this.name = null;\r\n\r\n    // the time of the start of the recording\r\n    this.startTime = null;\r\n};\r\n\r\n/**\r\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\r\n * This will also define the timestamp and try to update the name\r\n * @param trackRecorder the TrackRecorder to start\r\n */\r\nfunction startRecorder(trackRecorder) {\r\n    if (trackRecorder.recorder === undefined) {\r\n        throw new Error('Passed an object to startRecorder which is not a '\r\n            + 'TrackRecorder object');\r\n    }\r\n    trackRecorder.recorder.start();\r\n    trackRecorder.startTime = new Date();\r\n}\r\n\r\n/**\r\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\r\n * This will also try to update the name\r\n * @param trackRecorder the TrackRecorder to stop\r\n */\r\nfunction stopRecorder(trackRecorder) {\r\n    if (trackRecorder.recorder === undefined) {\r\n        throw new Error('Passed an object to stopRecorder which is not a '\r\n            + 'TrackRecorder object');\r\n    }\r\n    trackRecorder.recorder.stop();\r\n}\r\n\r\n/**\r\n * Determines which kind of audio recording the browser supports\r\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\r\n */\r\nfunction determineCorrectFileType() {\r\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\r\n        return AUDIO_WEBM;\r\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\r\n        return AUDIO_OGG;\r\n    }\r\n    throw new Error(\r\n        'unable to create a MediaRecorder with the right mimetype!');\r\n}\r\n\r\n/**\r\n * main exported object of the file, holding all\r\n * relevant functions and variables for the outside world\r\n * @param jitsiConference the jitsiConference which this object\r\n * is going to record\r\n */\r\nfunction AudioRecorder(jitsiConference) {\r\n    // array of TrackRecorders, where each trackRecorder\r\n    // holds the JitsiTrack, MediaRecorder and recorder data\r\n    this.recorders = [];\r\n\r\n    // get which file type is supported by the current browser\r\n    this.fileType = determineCorrectFileType();\r\n\r\n    // boolean flag for active recording\r\n    this.isRecording = false;\r\n\r\n    // the jitsiconference the object is recording\r\n    this.jitsiConference = jitsiConference;\r\n}\r\n\r\n/**\r\n * Add the the exported module so that it can be accessed by other files\r\n */\r\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\r\n\r\n/**\r\n * Adds a new TrackRecorder object to the array.\r\n *\r\n * @param track the track potentially holding an audio stream\r\n */\r\nAudioRecorder.prototype.addTrack = function(track) {\r\n    if (track.isAudioTrack()) {\r\n        // create the track recorder\r\n        const trackRecorder = this.instantiateTrackRecorder(track);\r\n\r\n        // push it to the local array of all recorders\r\n\r\n        this.recorders.push(trackRecorder);\r\n\r\n        // update the name of the trackRecorders\r\n        this.updateNames();\r\n\r\n        // If we're already recording, immediately start recording this new\r\n        // track.\r\n        if (this.isRecording) {\r\n            startRecorder(trackRecorder);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\r\n * data array for the trackRecorder.\r\n * @param track the JitsiTrack holding the audio MediaStream(s)\r\n */\r\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\r\n    const trackRecorder = new TrackRecorder(track);\r\n\r\n    // Create a new stream which only holds the audio track\r\n    const originalStream = trackRecorder.track.getOriginalStream();\r\n    const stream = new MediaStream();\r\n\r\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\r\n\r\n    // Create the MediaRecorder\r\n    trackRecorder.recorder = new MediaRecorder(stream,\r\n        { mimeType: this.fileType });\r\n\r\n    // array for holding the recorder data. Resets it when\r\n    // audio already has been recorder once\r\n    trackRecorder.data = [];\r\n\r\n    // function handling a dataEvent, e.g the stream gets new data\r\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\r\n        if (dataEvent.data.size > 0) {\r\n            trackRecorder.data.push(dataEvent.data);\r\n        }\r\n    };\r\n\r\n    return trackRecorder;\r\n};\r\n\r\n/**\r\n * Notifies the module that a specific track has stopped, e.g participant left\r\n * the conference.\r\n * if the recording has not started yet, the TrackRecorder will be removed from\r\n * the array. If the recording has started, the recorder will stop recording\r\n * but not removed from the array so that the recorded stream can still be\r\n * accessed\r\n *\r\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\r\n */\r\nAudioRecorder.prototype.removeTrack = function(track) {\r\n    if (track.isVideoTrack()) {\r\n        return;\r\n    }\r\n\r\n    const array = this.recorders;\r\n    let i;\r\n\r\n    for (i = 0; i < array.length; i++) {\r\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\r\n            const recorderToRemove = array[i];\r\n\r\n            if (this.isRecording) {\r\n                stopRecorder(recorderToRemove);\r\n            } else {\r\n                // remove the TrackRecorder from the array\r\n                array.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // make sure the names are up to date\r\n    this.updateNames();\r\n};\r\n\r\n/**\r\n * Tries to update the name value of all TrackRecorder in the array.\r\n * If it hasn't changed,it will keep the exiting name. If it changes to a\r\n * undefined value, the old value will also be kept.\r\n */\r\nAudioRecorder.prototype.updateNames = function() {\r\n    const conference = this.jitsiConference;\r\n\r\n    this.recorders.forEach(trackRecorder => {\r\n        if (trackRecorder.track.isLocal()) {\r\n            trackRecorder.name = 'the transcriber';\r\n        } else {\r\n            const id = trackRecorder.track.getParticipantId();\r\n            const participant = conference.getParticipantById(id);\r\n            const newName = participant.getDisplayName();\r\n\r\n            if (newName !== 'undefined') {\r\n                trackRecorder.name = newName;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Starts the audio recording of every local and remote track\r\n */\r\nAudioRecorder.prototype.start = function() {\r\n    if (this.isRecording) {\r\n        throw new Error('audiorecorder is already recording');\r\n    }\r\n\r\n    // set boolean isRecording flag to true so if new participants join the\r\n    // conference, that track can instantly start recording as well\r\n    this.isRecording = true;\r\n\r\n    // start all the mediaRecorders\r\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\r\n\r\n    // log that recording has started\r\n    console.log(\r\n        `Started the recording of the audio. There are currently ${\r\n            this.recorders.length} recorders active.`);\r\n};\r\n\r\n/**\r\n * Stops the audio recording of every local and remote track\r\n */\r\nAudioRecorder.prototype.stop = function() {\r\n    // set the boolean flag to false\r\n    this.isRecording = false;\r\n\r\n    // stop all recorders\r\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\r\n    console.log('stopped recording');\r\n};\r\n\r\n/**\r\n * link hacking to download all recorded audio streams\r\n */\r\nAudioRecorder.prototype.download = function() {\r\n    this.recorders.forEach(trackRecorder => {\r\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n\r\n        document.body.appendChild(a);\r\n        a.style = 'display: none';\r\n        a.href = url;\r\n        a.download = `test.${this.fileType.split('/')[1]}`;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n    });\r\n};\r\n\r\n/**\r\n * returns the audio files of all recorders as an array of objects,\r\n * which include the name of the owner of the track and the starting time stamp\r\n * @returns {Array} an array of RecordingResult objects\r\n */\r\nAudioRecorder.prototype.getRecordingResults = function() {\r\n    if (this.isRecording) {\r\n        throw new Error(\r\n            'cannot get blobs because the AudioRecorder is still recording!');\r\n    }\r\n\r\n    // make sure the names are up to date before sending them off\r\n    this.updateNames();\r\n\r\n    const array = [];\r\n\r\n    this.recorders.forEach(\r\n        recorder =>\r\n            array.push(\r\n                new RecordingResult(\r\n                    new Blob(recorder.data, { type: this.fileType }),\r\n                    recorder.name,\r\n                    recorder.startTime)));\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * Gets the mime type of the recorder audio\r\n * @returns {String} the mime type of the recorder audio\r\n */\r\nAudioRecorder.prototype.getFileType = function() {\r\n    return this.fileType;\r\n};\r\n\r\n/**\r\n * export the main object AudioRecorder\r\n */\r\nmodule.exports = AudioRecorder;\r\n","import JitsiConference from './JitsiConference';\r\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport XMPP from './modules/xmpp/xmpp';\r\nimport {\r\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\r\n    createConnectionFailedEvent\r\n} from './service/statistics/AnalyticsEvents';\r\n\r\n/**\r\n * Creates a new connection object for the Jitsi Meet server side video\r\n * conferencing service. Provides access to the JitsiConference interface.\r\n * @param appID identification for the provider of Jitsi Meet video conferencing\r\n * services.\r\n * @param token the JWT token used to authenticate with the server(optional)\r\n * @param options Object with properties / settings related to connection with\r\n * the server.\r\n * @constructor\r\n */\r\nexport default function JitsiConnection(appID, token, options) {\r\n    this.appID = appID;\r\n    this.token = token;\r\n    this.options = options;\r\n    this.xmpp = new XMPP(options, token);\r\n\r\n    /* eslint-disable max-params */\r\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\r\n        (errType, msg, credentials, details) => {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createConnectionFailedEvent(errType, msg, details));\r\n        });\r\n    /* eslint-enable max-params */\r\n\r\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\r\n        msg => {\r\n            // we can see disconnects from normal tab closing of the browser\r\n            // and then there are no msgs, but we want to log only disconnects\r\n            // when there is real error\r\n            // XXX Do we need the difference in handling between the log and\r\n            // analytics event here?\r\n            if (msg) {\r\n                Statistics.sendAnalytics(\r\n                    ANALYTICS_CONNECTION_DISCONNECTED,\r\n                    { message: msg });\r\n            }\r\n            Statistics.sendLog(\r\n                JSON.stringify(\r\n                    {\r\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\r\n                        msg\r\n                    }));\r\n        });\r\n}\r\n\r\n/**\r\n * Connect the client with the server.\r\n * @param options {object} connecting options\r\n * (for example authentications parameters).\r\n */\r\nJitsiConnection.prototype.connect = function(options = {}) {\r\n    this.xmpp.connect(options.id, options.password);\r\n};\r\n\r\n/**\r\n * Attach to existing connection. Can be used for optimizations. For example:\r\n * if the connection is created on the server we can attach to it and start\r\n * using it.\r\n *\r\n * @param options {object} connecting options - rid, sid and jid.\r\n */\r\nJitsiConnection.prototype.attach = function(options) {\r\n    this.xmpp.attach(options);\r\n};\r\n\r\n/**\r\n * Disconnect the client from the server.\r\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\r\n */\r\nJitsiConnection.prototype.disconnect = function(...args) {\r\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\r\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\r\n    // may optionally pass the event which triggered the disconnect in order to\r\n    // provide the implementation with finer-grained context.\r\n    return this.xmpp.disconnect(...args);\r\n};\r\n\r\n/**\r\n * Returns the jid of the participant associated with the XMPP connection.\r\n *\r\n * @returns {string} The jid of the participant.\r\n */\r\nJitsiConnection.prototype.getJid = function() {\r\n    return this.xmpp.getJid();\r\n};\r\n\r\n/**\r\n * This method allows renewal of the tokens if they are expiring.\r\n * @param token the new token.\r\n */\r\nJitsiConnection.prototype.setToken = function(token) {\r\n    this.token = token;\r\n};\r\n\r\n/**\r\n * Creates and joins new conference.\r\n * @param name the name of the conference; if null - a generated name will be\r\n * provided from the api\r\n * @param options Object with properties / settings related to the conference\r\n * that will be created.\r\n * @returns {JitsiConference} returns the new conference object.\r\n */\r\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\r\n    return new JitsiConference({\r\n        name,\r\n        config: options,\r\n        connection: this\r\n    });\r\n};\r\n\r\n/**\r\n * Subscribes the passed listener to the event.\r\n * @param event {JitsiConnectionEvents} the connection event.\r\n * @param listener {Function} the function that will receive the event\r\n */\r\nJitsiConnection.prototype.addEventListener = function(event, listener) {\r\n    this.xmpp.addListener(event, listener);\r\n};\r\n\r\n/**\r\n * Unsubscribes the passed handler.\r\n * @param event {JitsiConnectionEvents} the connection event.\r\n * @param listener {Function} the function that will receive the event\r\n */\r\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\r\n    this.xmpp.removeListener(event, listener);\r\n};\r\n\r\n/**\r\n * Returns measured connectionTimes.\r\n */\r\nJitsiConnection.prototype.getConnectionTimes = function() {\r\n    return this.xmpp.connectionTimes;\r\n};\r\n\r\n/**\r\n * Adds new feature to the list of supported features for the local\r\n * participant.\r\n * @param {String} feature the name of the feature.\r\n * @param {boolean} submit if true - the new list of features will be\r\n * immediately submitted to the others.\r\n */\r\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\r\n    return this.xmpp.caps.addFeature(feature, submit);\r\n};\r\n\r\n/**\r\n * Removes a feature from the list of supported features for the local\r\n * participant\r\n * @param {String} feature the name of the feature.\r\n * @param {boolean} submit if true - the new list of features will be\r\n * immediately submitted to the others.\r\n */\r\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\r\n    return this.xmpp.caps.removeFeature(feature, submit);\r\n};\r\n\r\n/**\r\n * Get object with internal logs.\r\n */\r\nJitsiConnection.prototype.getLogs = function() {\r\n    const data = this.xmpp.getJingleLog();\r\n\r\n    const metadata = {};\r\n\r\n    metadata.time = new Date();\r\n    metadata.url = window.location.href;\r\n    metadata.ua = navigator.userAgent;\r\n\r\n    const log = this.xmpp.getXmppLog();\r\n\r\n    if (log) {\r\n        metadata.xmpp = log;\r\n    }\r\n\r\n    data.metadata = metadata;\r\n\r\n    return data;\r\n};\r\n","/* global __filename, $, Promise */\r\n\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport JitsiParticipant from './JitsiParticipant';\r\nimport JitsiTrackError from './JitsiTrackError';\r\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\r\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\r\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\r\nimport IceFailedHandling\r\n    from './modules/connectivity/IceFailedHandling';\r\nimport ParticipantConnectionStatusHandler\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\r\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\r\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\r\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\r\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\r\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\r\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\r\nimport E2ePing from './modules/e2eping/e2eping';\r\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\r\nimport { QualityController } from './modules/qualitycontrol/QualityController';\r\nimport RecordingManager from './modules/recording/RecordingManager';\r\nimport Settings from './modules/settings/Settings';\r\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\r\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\r\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport Transcriber from './modules/transcription/transcriber';\r\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\r\nimport RandomUtil from './modules/util/RandomUtil';\r\nimport ComponentsVersions from './modules/version/ComponentsVersions';\r\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\r\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\r\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport VideoType from './service/RTC/VideoType';\r\nimport {\r\n    ACTION_JINGLE_RESTART,\r\n    ACTION_JINGLE_SI_RECEIVED,\r\n    ACTION_JINGLE_SI_TIMEOUT,\r\n    ACTION_JINGLE_TERMINATE,\r\n    ACTION_P2P_DECLINED,\r\n    ACTION_P2P_ESTABLISHED,\r\n    ACTION_P2P_FAILED,\r\n    ACTION_P2P_SWITCH_TO_JVB,\r\n    ICE_ESTABLISHMENT_DURATION_DIFF,\r\n    createConferenceEvent,\r\n    createJingleEvent,\r\n    createP2PEvent\r\n} from './service/statistics/AnalyticsEvents';\r\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * How long since Jicofo is supposed to send a session-initiate, before\r\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\r\n * @type {number}\r\n */\r\nconst JINGLE_SI_TIMEOUT = 5000;\r\n\r\n/**\r\n * Creates a JitsiConference object with the given name and properties.\r\n * Note: this constructor is not a part of the public API (objects should be\r\n * created using JitsiConnection.createConference).\r\n * @param options.config properties / settings related to the conference that\r\n * will be created.\r\n * @param options.name the name of the conference\r\n * @param options.connection the JitsiConnection object for this\r\n * JitsiConference.\r\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\r\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\r\n * calculated and submitted to the analytics module.\r\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\r\n * restart logic.\r\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\r\n * the peer to peer mode will be enabled. It means that when there are only 2\r\n * participants in the conference an attempt to make direct connection will be\r\n * made. If the connection succeeds the conference will stop sending data\r\n * through the JVB connection and will use the direct one instead.\r\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\r\n * seconds, before the conference switches back to P2P, after the 3rd\r\n * participant has left the room.\r\n * @param {number} [options.config.channelLastN=-1] The requested amount of\r\n * videos are going to be delivered after the value is in effect. Set to -1 for\r\n * unlimited or all available videos.\r\n * @param {number} [options.config.forceJVB121Ratio]\r\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\r\n * conference should be moved to the JVB instead of P2P. The decision is made on\r\n * the responder side, after ICE succeeds on the P2P connection.\r\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\r\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\r\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\r\n * (don't open any channel).\r\n * @constructor\r\n *\r\n * FIXME Make all methods which are called from lib-internal classes\r\n *       to non-public (use _). To name a few:\r\n *       {@link JitsiConference.onLocalRoleChanged}\r\n *       {@link JitsiConference.onUserRoleChanged}\r\n *       {@link JitsiConference.onMemberLeft}\r\n *       and so on...\r\n */\r\nexport default function JitsiConference(options) {\r\n    if (!options.name || options.name.toLowerCase() !== options.name) {\r\n        const errmsg\r\n            = 'Invalid conference name (no conference name passed or it '\r\n                + 'contains invalid characters like capital letters)!';\r\n\r\n        logger.error(errmsg);\r\n        throw new Error(errmsg);\r\n    }\r\n    this.eventEmitter = new EventEmitter();\r\n    this.options = options;\r\n    this.eventManager = new JitsiConferenceEventManager(this);\r\n    this.participants = {};\r\n    this._init(options);\r\n    this.componentsVersions = new ComponentsVersions(this);\r\n\r\n    /**\r\n     * Jingle session instance for the JVB connection.\r\n     * @type {JingleSessionPC}\r\n     */\r\n    this.jvbJingleSession = null;\r\n    this.lastDominantSpeaker = null;\r\n    this.dtmfManager = null;\r\n    this.somebodySupportsDTMF = false;\r\n    this.authEnabled = false;\r\n    this.startAudioMuted = false;\r\n    this.startVideoMuted = false;\r\n    this.startMutedPolicy = {\r\n        audio: false,\r\n        video: false\r\n    };\r\n    this.isMutedByFocus = false;\r\n\r\n    // when muted by focus we receive the jid of the initiator of the mute\r\n    this.mutedByFocusActor = null;\r\n\r\n    // Flag indicates if the 'onCallEnded' method was ever called on this\r\n    // instance. Used to log extra analytics event for debugging purpose.\r\n    // We need to know if the potential issue happened before or after\r\n    // the restart.\r\n    this.wasStopped = false;\r\n\r\n    // Conference properties, maintained by jicofo.\r\n    this.properties = {};\r\n\r\n    /**\r\n     * The object which monitors local and remote connection statistics (e.g.\r\n     * sending bitrate) and calculates a number which represents the connection\r\n     * quality.\r\n     */\r\n    this.connectionQuality\r\n        = new ConnectionQuality(this, this.eventEmitter, options);\r\n\r\n    /**\r\n     * Reports average RTP statistics to the analytics module.\r\n     * @type {AvgRTPStatsReporter}\r\n     */\r\n    this.avgRtpStatsReporter\r\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\r\n\r\n    /**\r\n     * Detects issues with the audio of remote participants.\r\n     * @type {AudioOutputProblemDetector}\r\n     */\r\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\r\n\r\n    /**\r\n     * Indicates whether the connection is interrupted or not.\r\n     */\r\n    this.isJvbConnectionInterrupted = false;\r\n\r\n    /**\r\n     * The object which tracks active speaker times\r\n     */\r\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\r\n\r\n    /* P2P related fields below: */\r\n\r\n    /**\r\n     * Stores reference to deferred start P2P task. It's created when 3rd\r\n     * participant leaves the room in order to avoid ping pong effect (it\r\n     * could be just a page reload).\r\n     * @type {number|null}\r\n     */\r\n    this.deferredStartP2PTask = null;\r\n\r\n    const delay\r\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\r\n\r\n    /**\r\n     * A delay given in seconds, before the conference switches back to P2P\r\n     * after the 3rd participant has left.\r\n     * @type {number}\r\n     */\r\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\r\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\r\n\r\n    /**\r\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\r\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\r\n     * and running.\r\n     * @type {boolean}\r\n     */\r\n    this.isP2PConnectionInterrupted = false;\r\n\r\n    /**\r\n     * Flag set to <tt>true</tt> when P2P session has been established\r\n     * (ICE has been connected) and this conference is currently in the peer to\r\n     * peer mode (P2P connection is the active one).\r\n     * @type {boolean}\r\n     */\r\n    this.p2p = false;\r\n\r\n    /**\r\n     * A JingleSession for the direct peer to peer connection.\r\n     * @type {JingleSessionPC}\r\n     */\r\n    this.p2pJingleSession = null;\r\n\r\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\r\n    this.recordingManager = new RecordingManager(this.room);\r\n\r\n    /**\r\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\r\n     *\r\n     * @type {undefined|number}\r\n     * @private\r\n     */\r\n    this._conferenceJoinAnalyticsEventSent = undefined;\r\n\r\n    /**\r\n     * End-to-End Encryption. Make it available if supported.\r\n     */\r\n    if (this.isE2EESupported()) {\r\n        logger.info('End-to-End Encryprtion is supported');\r\n\r\n        this._e2eEncryption = new E2EEncryption(this);\r\n    }\r\n}\r\n\r\n// FIXME convert JitsiConference to ES6 - ASAP !\r\nJitsiConference.prototype.constructor = JitsiConference;\r\n\r\n/**\r\n * Create a resource for the a jid. We use the room nickname (the resource part\r\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\r\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\r\n * into a 32bit field.\r\n *\r\n * @param {string} jid - The id set onto the XMPP connection.\r\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\r\n * to the XMPP service with a password.\r\n * @returns {string}\r\n * @static\r\n */\r\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\r\n    let mucNickname;\r\n\r\n    if (isAuthenticatedUser) {\r\n        // For authenticated users generate a random ID.\r\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\r\n    } else {\r\n        // We try to use the first part of the node (which for anonymous users\r\n        // on prosody is a UUID) to match the previous behavior (and maybe make\r\n        // debugging easier).\r\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\r\n            .toLowerCase();\r\n\r\n        // But if this doesn't have the required format we just generate a new\r\n        // random nickname.\r\n        const re = /[0-9a-f]{8}/g;\r\n\r\n        if (!re.test(mucNickname)) {\r\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\r\n        }\r\n    }\r\n\r\n    return mucNickname;\r\n};\r\n\r\n/**\r\n * Initializes the conference object properties\r\n * @param options {object}\r\n * @param options.connection {JitsiConnection} overrides this.connection\r\n */\r\nJitsiConference.prototype._init = function(options = {}) {\r\n    // Override connection and xmpp properties (Useful if the connection\r\n    // reloaded)\r\n    if (options.connection) {\r\n        this.connection = options.connection;\r\n        this.xmpp = this.connection.xmpp;\r\n\r\n        // Setup XMPP events only if we have new connection object.\r\n        this.eventManager.setupXMPPListeners();\r\n    }\r\n\r\n    const { config } = this.options;\r\n\r\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\r\n    this.room = this.xmpp.createRoom(\r\n        this.options.name, {\r\n            ...config,\r\n            statsId: this._statsCurrentId\r\n        },\r\n        JitsiConference.resourceCreator\r\n    );\r\n\r\n    // Connection interrupted/restored listeners\r\n    this._onIceConnectionInterrupted\r\n        = this._onIceConnectionInterrupted.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\r\n\r\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\r\n\r\n    this._onIceConnectionEstablished\r\n        = this._onIceConnectionEstablished.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\r\n\r\n    this._updateProperties = this._updateProperties.bind(this);\r\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\r\n        this._updateProperties);\r\n\r\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\r\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\r\n\r\n    this.e2eping = new E2ePing(\r\n        this,\r\n        config,\r\n        (message, to) => {\r\n            try {\r\n                this.sendMessage(\r\n                    message, to, true /* sendThroughVideobridge */);\r\n            } catch (error) {\r\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\r\n            }\r\n        });\r\n\r\n    if (!this.rtc) {\r\n        this.rtc = new RTC(this, options);\r\n        this.eventManager.setupRTCListeners();\r\n    }\r\n\r\n    this.qualityController = new QualityController(this);\r\n\r\n    this.participantConnectionStatus\r\n        = new ParticipantConnectionStatusHandler(\r\n            this.rtc,\r\n            this,\r\n            {\r\n                // Both these options are not public API, leaving it here only\r\n                // as an entry point through config for tuning up purposes.\r\n                // Default values should be adjusted as soon as optimal values\r\n                // are discovered.\r\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\r\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\r\n            });\r\n    this.participantConnectionStatus.init();\r\n\r\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\r\n    let enableCallStats = true;\r\n\r\n    if (config.testing && config.testing.callStatsThreshold) {\r\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\r\n    }\r\n\r\n    if (!this.statistics) {\r\n        this.statistics = new Statistics(this.xmpp, {\r\n            aliasName: this._statsCurrentId,\r\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\r\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\r\n            siteID: config.siteID,\r\n            customScriptUrl: config.callStatsCustomScriptUrl,\r\n            callStatsID: config.callStatsID,\r\n            callStatsSecret: config.callStatsSecret,\r\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\r\n            enableCallStats,\r\n            roomName: this.options.name,\r\n            applicationName: config.applicationName,\r\n            getWiFiStatsMethod: config.getWiFiStatsMethod\r\n        });\r\n        Statistics.analytics.addPermanentProperties({\r\n            'callstats_name': this._statsCurrentId\r\n        });\r\n\r\n        // Start performance observer for monitoring long tasks\r\n        if (config.longTasksStatsInterval) {\r\n            this.statistics.attachLongTasksStats(this);\r\n        }\r\n    }\r\n\r\n    this.eventManager.setupChatRoomListeners();\r\n\r\n    // Always add listeners because on reload we are executing leave and the\r\n    // listeners are removed from statistics module.\r\n    this.eventManager.setupStatisticsListeners();\r\n\r\n    // Disable VAD processing on Safari since it causes audio input to\r\n    // fail on some of the mobile devices.\r\n    if (config.enableTalkWhileMuted && !browser.isSafari()) {\r\n\r\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\r\n        // based detection.\r\n        if (config.createVADProcessor) {\r\n            logger.info('Using VAD detection for generating talk while muted events');\r\n\r\n            if (!this._audioAnalyser) {\r\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\r\n            }\r\n\r\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\r\n\r\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\r\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\r\n\r\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\r\n        } else {\r\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\r\n        }\r\n    }\r\n\r\n    // Disable noisy mic detection on safari since it causes the audio input to\r\n    // fail on Safari on iPadOS.\r\n    if (config.enableNoisyMicDetection && !browser.isSafari()) {\r\n        if (config.createVADProcessor) {\r\n            if (!this._audioAnalyser) {\r\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\r\n            }\r\n\r\n            const vadNoiseDetection = new VADNoiseDetection();\r\n\r\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\r\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\r\n\r\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\r\n        } else {\r\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\r\n        }\r\n    }\r\n\r\n    // Generates events based on no audio input detector.\r\n    if (config.enableNoAudioDetection) {\r\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\r\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\r\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\r\n        });\r\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\r\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\r\n        });\r\n    }\r\n\r\n\r\n    if ('channelLastN' in config) {\r\n        this.setLastN(config.channelLastN);\r\n    }\r\n\r\n    /**\r\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\r\n     * @type {Jvb121EventGenerator}\r\n     */\r\n    this.jvb121Status = new Jvb121EventGenerator(this);\r\n\r\n    // creates dominant speaker detection that works only in p2p mode\r\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\r\n\r\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\r\n        this.setLocalParticipantProperty(\r\n            'region', config.deploymentInfo.userRegion);\r\n    }\r\n};\r\n\r\n/**\r\n * Joins the conference.\r\n * @param password {string} the password\r\n */\r\nJitsiConference.prototype.join = function(password) {\r\n    if (this.room) {\r\n        this.room.join(password).then(() => this._maybeSetSITimeout());\r\n    }\r\n};\r\n\r\n/**\r\n * Authenticates and upgrades the role of the local participant/user.\r\n *\r\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\r\n * authenticating and upgrading the role of the local participant/user finishes\r\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\r\n * process.\r\n */\r\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\r\n    return authenticateAndUpgradeRole.call(this, {\r\n        ...options,\r\n        onCreateResource: JitsiConference.resourceCreator\r\n    });\r\n};\r\n\r\n/**\r\n * Check if joined to the conference.\r\n */\r\nJitsiConference.prototype.isJoined = function() {\r\n    return this.room && this.room.joined;\r\n};\r\n\r\n/**\r\n * Tells whether or not the P2P mode is enabled in the configuration.\r\n * @return {boolean}\r\n */\r\nJitsiConference.prototype.isP2PEnabled = function() {\r\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\r\n\r\n        // FIXME: remove once we have a default config template. -saghul\r\n        || typeof this.options.config.p2p === 'undefined';\r\n};\r\n\r\n/**\r\n * When in P2P test mode, the conference will not automatically switch to P2P\r\n * when there 2 participants.\r\n * @return {boolean}\r\n */\r\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\r\n    return Boolean(this.options.config.testing\r\n        && this.options.config.testing.p2pTestMode);\r\n};\r\n\r\n/**\r\n * Leaves the conference.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.leave = function() {\r\n    if (this.participantConnectionStatus) {\r\n        this.participantConnectionStatus.dispose();\r\n        this.participantConnectionStatus = null;\r\n    }\r\n    if (this.avgRtpStatsReporter) {\r\n        this.avgRtpStatsReporter.dispose();\r\n        this.avgRtpStatsReporter = null;\r\n    }\r\n\r\n    if (this._audioOutputProblemDetector) {\r\n        this._audioOutputProblemDetector.dispose();\r\n        this._audioOutputProblemDetector = null;\r\n    }\r\n\r\n    if (this.e2eping) {\r\n        this.e2eping.stop();\r\n        this.e2eping = null;\r\n    }\r\n\r\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\r\n\r\n    this.rtc.closeBridgeChannel();\r\n\r\n    this._sendConferenceLeftAnalyticsEvent();\r\n\r\n    if (this.statistics) {\r\n        this.statistics.dispose();\r\n    }\r\n\r\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\r\n\r\n    // Close both JVb and P2P JingleSessions\r\n    if (this.jvbJingleSession) {\r\n        this.jvbJingleSession.close();\r\n        this.jvbJingleSession = null;\r\n    }\r\n    if (this.p2pJingleSession) {\r\n        this.p2pJingleSession.close();\r\n        this.p2pJingleSession = null;\r\n    }\r\n\r\n    // leave the conference\r\n    if (this.room) {\r\n        const room = this.room;\r\n\r\n        // Unregister connection state listeners\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_INTERRUPTED,\r\n            this._onIceConnectionInterrupted);\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_RESTORED,\r\n            this._onIceConnectionRestored);\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_ESTABLISHED,\r\n            this._onIceConnectionEstablished);\r\n\r\n        room.removeListener(\r\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\r\n            this._updateProperties);\r\n\r\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\r\n\r\n        this.eventManager.removeXMPPListeners();\r\n\r\n        this.room = null;\r\n\r\n        return room.leave()\r\n            .then(() => {\r\n                if (this.rtc) {\r\n                    this.rtc.destroy();\r\n                }\r\n            })\r\n            .catch(error => {\r\n                // remove all participants because currently the conference\r\n                // won't be usable anyway. This is done on success automatically\r\n                // by the ChatRoom instance.\r\n                this.getParticipants().forEach(\r\n                    participant => this.onMemberLeft(participant.getJid()));\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    // If this.room == null we are calling second time leave().\r\n    return Promise.reject(\r\n        new Error('The conference is has been already left'));\r\n};\r\n\r\n/**\r\n * Returns the currently active media session if any.\r\n *\r\n * @returns {JingleSessionPC|undefined}\r\n * @private\r\n */\r\nJitsiConference.prototype._getActiveMediaSession = function() {\r\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\r\n};\r\n\r\n/**\r\n * Returns an array containing all media sessions existing in this conference.\r\n *\r\n * @returns {Array<JingleSessionPC>}\r\n * @private\r\n */\r\nJitsiConference.prototype._getMediaSessions = function() {\r\n    const sessions = [];\r\n\r\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\r\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\r\n\r\n    return sessions;\r\n};\r\n\r\n/**\r\n * Returns name of this conference.\r\n */\r\nJitsiConference.prototype.getName = function() {\r\n    return this.options.name;\r\n};\r\n\r\n/**\r\n * Returns the {@link JitsiConnection} used by this this conference.\r\n */\r\nJitsiConference.prototype.getConnection = function() {\r\n    return this.connection;\r\n};\r\n\r\n/**\r\n * Check if authentication is enabled for this conference.\r\n */\r\nJitsiConference.prototype.isAuthEnabled = function() {\r\n    return this.authEnabled;\r\n};\r\n\r\n/**\r\n * Check if user is logged in.\r\n */\r\nJitsiConference.prototype.isLoggedIn = function() {\r\n    return Boolean(this.authIdentity);\r\n};\r\n\r\n/**\r\n * Get authorized login.\r\n */\r\nJitsiConference.prototype.getAuthLogin = function() {\r\n    return this.authIdentity;\r\n};\r\n\r\n/**\r\n * Check if external authentication is enabled for this conference.\r\n */\r\nJitsiConference.prototype.isExternalAuthEnabled = function() {\r\n    return this.room && this.room.moderator.isExternalAuthEnabled();\r\n};\r\n\r\n/**\r\n * Get url for external authentication.\r\n * @param {boolean} [urlForPopup] if true then return url for login popup,\r\n *                                else url of login page.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\r\n    return new Promise((resolve, reject) => {\r\n        if (!this.isExternalAuthEnabled()) {\r\n            reject();\r\n\r\n            return;\r\n        }\r\n        if (urlForPopup) {\r\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\r\n        } else {\r\n            this.room.moderator.getLoginUrl(resolve, reject);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Returns the local tracks of the given media type, or all local tracks if no\r\n * specific type is given.\r\n * @param {MediaType} [mediaType] Optional media type (audio or video).\r\n */\r\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\r\n    let tracks = [];\r\n\r\n    if (this.rtc) {\r\n        tracks = this.rtc.getLocalTracks(mediaType);\r\n    }\r\n\r\n    return tracks;\r\n};\r\n\r\n/**\r\n * Obtains local audio track.\r\n * @return {JitsiLocalTrack|null}\r\n */\r\nJitsiConference.prototype.getLocalAudioTrack = function() {\r\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\r\n};\r\n\r\n/**\r\n * Obtains local video track.\r\n * @return {JitsiLocalTrack|null}\r\n */\r\nJitsiConference.prototype.getLocalVideoTrack = function() {\r\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\r\n};\r\n\r\n/**\r\n * Obtains the performance statistics.\r\n * @returns {Object|null}\r\n */\r\nJitsiConference.prototype.getPerformanceStats = function() {\r\n    return {\r\n        longTasksStats: this.statistics.getLongTasksStats()\r\n    };\r\n};\r\n\r\n/**\r\n * Attaches a handler for events(For example - \"participant joined\".) in the\r\n * conference. All possible event are defined in JitsiConferenceEvents.\r\n * @param eventId the event ID.\r\n * @param handler handler for the event.\r\n *\r\n * Note: consider adding eventing functionality by extending an EventEmitter\r\n * impl, instead of rolling ourselves\r\n */\r\nJitsiConference.prototype.on = function(eventId, handler) {\r\n    if (this.eventEmitter) {\r\n        this.eventEmitter.on(eventId, handler);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes event listener\r\n * @param eventId the event ID.\r\n * @param [handler] optional, the specific handler to unbind\r\n *\r\n * Note: consider adding eventing functionality by extending an EventEmitter\r\n * impl, instead of rolling ourselves\r\n */\r\nJitsiConference.prototype.off = function(eventId, handler) {\r\n    if (this.eventEmitter) {\r\n        this.eventEmitter.removeListener(eventId, handler);\r\n    }\r\n};\r\n\r\n// Common aliases for event emitter\r\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\r\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\r\n\r\n/**\r\n * Receives notifications from other participants about commands / custom events\r\n * (sent by sendCommand or sendCommandOnce methods).\r\n * @param command {String} the name of the command\r\n * @param handler {Function} handler for the command\r\n */\r\nJitsiConference.prototype.addCommandListener = function(command, handler) {\r\n    if (this.room) {\r\n        this.room.addPresenceListener(command, handler);\r\n    }\r\n};\r\n\r\n/**\r\n  * Removes command  listener\r\n  * @param command {String} the name of the command\r\n  * @param handler {Function} handler to remove for the command\r\n  */\r\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\r\n    if (this.room) {\r\n        this.room.removePresenceListener(command, handler);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends text message to the other participants in the conference\r\n * @param message the text message.\r\n * @param elementName the element name to encapsulate the message.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendTextMessage = function(\r\n        message, elementName = 'body') {\r\n    if (this.room) {\r\n        const displayName = (this.room.getFromPresence('nick') || {}).value;\r\n\r\n        this.room.sendMessage(message, elementName, displayName);\r\n    }\r\n};\r\n\r\n/**\r\n * Send private text message to another participant of the conference\r\n * @param id the id of the participant to send a private message.\r\n * @param message the text message.\r\n * @param elementName the element name to encapsulate the message.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendPrivateTextMessage = function(\r\n        id, message, elementName = 'body') {\r\n    if (this.room) {\r\n        this.room.sendPrivateMessage(id, message, elementName);\r\n    }\r\n};\r\n\r\n/**\r\n * Send presence command.\r\n * @param name {String} the name of the command.\r\n * @param values {Object} with keys and values that will be sent.\r\n **/\r\nJitsiConference.prototype.sendCommand = function(name, values) {\r\n    if (this.room) {\r\n        this.room.addToPresence(name, values);\r\n        this.room.sendPresence();\r\n    } else {\r\n        logger.warn('Not sending a command, room not initialized.');\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Send presence command one time.\r\n * @param name {String} the name of the command.\r\n * @param values {Object} with keys and values that will be sent.\r\n **/\r\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\r\n    this.sendCommand(name, values);\r\n    this.removeCommand(name);\r\n};\r\n\r\n/**\r\n * Removes presence command.\r\n * @param name {String} the name of the command.\r\n **/\r\nJitsiConference.prototype.removeCommand = function(name) {\r\n    if (this.room) {\r\n        this.room.removeFromPresence(name);\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the display name for this conference.\r\n * @param name the display name to set\r\n */\r\nJitsiConference.prototype.setDisplayName = function(name) {\r\n    if (this.room) {\r\n        this.room.addToPresence('nick', {\r\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\r\n            value: name\r\n        });\r\n        this.room.sendPresence();\r\n    }\r\n};\r\n\r\n/**\r\n * Set new subject for this conference. (available only for moderator)\r\n * @param {string} subject new subject\r\n */\r\nJitsiConference.prototype.setSubject = function(subject) {\r\n    if (this.room && this.isModerator()) {\r\n        this.room.setSubject(subject);\r\n    }\r\n};\r\n\r\n/**\r\n * Get a transcriber object for all current participants in this conference\r\n * @return {Transcriber} the transcriber object\r\n */\r\nJitsiConference.prototype.getTranscriber = function() {\r\n    if (this.transcriber === undefined) {\r\n        this.transcriber = new Transcriber();\r\n\r\n        // add all existing local audio tracks to the transcriber\r\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\r\n\r\n        for (const localAudio of localAudioTracks) {\r\n            this.transcriber.addTrack(localAudio);\r\n        }\r\n\r\n        // and all remote audio tracks\r\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\r\n\r\n        for (const remoteTrack of remoteAudioTracks) {\r\n            this.transcriber.addTrack(remoteTrack);\r\n        }\r\n    }\r\n\r\n    return this.transcriber;\r\n};\r\n\r\n/**\r\n * Returns the transcription status.\r\n *\r\n * @returns {String} \"on\" or \"off\".\r\n */\r\nJitsiConference.prototype.getTranscriptionStatus = function() {\r\n    return this.room.transcriptionStatus;\r\n};\r\n\r\n/**\r\n * Adds JitsiLocalTrack object to the conference.\r\n * @param track the JitsiLocalTrack object.\r\n * @returns {Promise<JitsiLocalTrack>}\r\n * @throws {Error} if the specified track is a video track and there is already\r\n * another video track in the conference.\r\n */\r\nJitsiConference.prototype.addTrack = function(track) {\r\n    if (track.isVideoTrack()) {\r\n        // Ensure there's exactly 1 local video track in the conference.\r\n        const localVideoTrack = this.rtc.getLocalVideoTrack();\r\n\r\n        if (localVideoTrack) {\r\n            // Don't be excessively harsh and severe if the API client happens\r\n            // to attempt to add the same local video track twice.\r\n            if (track === localVideoTrack) {\r\n                return Promise.resolve(track);\r\n            }\r\n\r\n            return Promise.reject(new Error(\r\n                'cannot add second video track to the conference'));\r\n\r\n        }\r\n    }\r\n\r\n    return this.replaceTrack(null, track);\r\n};\r\n\r\n/**\r\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\r\n * @param {number} audioLevel the audio level\r\n * @param {TraceablePeerConnection} [tpc]\r\n */\r\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\r\n        audioLevel,\r\n        tpc) {\r\n    const activeTpc = this.getActivePeerConnection();\r\n\r\n    // There will be no TraceablePeerConnection if audio levels do not come from\r\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\r\n    // Audio Analyser API and emits local audio levels events through\r\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\r\n    // optional.\r\n    if (!tpc || activeTpc === tpc) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n            this.myUserId(), audioLevel);\r\n    }\r\n};\r\n\r\n/**\r\n * Fires TRACK_MUTE_CHANGED change conference event.\r\n * @param track the JitsiTrack object related to the event.\r\n */\r\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\r\n    // check if track was muted by focus and now is unmuted by user\r\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\r\n        this.isMutedByFocus = false;\r\n\r\n        // unmute local user on server\r\n        this.room.muteParticipant(this.room.myroomjid, false);\r\n    }\r\n\r\n    let actorParticipant;\r\n\r\n    if (this.mutedByFocusActor) {\r\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\r\n\r\n        actorParticipant = this.participants[actorId];\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\r\n};\r\n\r\n/**\r\n * Clear JitsiLocalTrack properties and listeners.\r\n * @param track the JitsiLocalTrack object.\r\n */\r\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\r\n    track._setConference(null);\r\n    this.rtc.removeLocalTrack(track);\r\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        track.muteHandler);\r\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        track.audioLevelHandler);\r\n\r\n    // send event for stopping screen sharing\r\n    // FIXME: we assume we have only one screen sharing track\r\n    // if we change this we need to fix this check\r\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\r\n        this.statistics.sendScreenSharingEvent(false);\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\r\n};\r\n\r\n/**\r\n * Removes JitsiLocalTrack from the conference and performs\r\n * a new offer/answer cycle.\r\n * @param {JitsiLocalTrack} track\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.removeTrack = function(track) {\r\n    return this.replaceTrack(track, null);\r\n};\r\n\r\n/**\r\n * Replaces oldTrack with newTrack and performs a single offer/answer\r\n *  cycle after both operations are done.  Either oldTrack or newTrack\r\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\r\n *  effectively just removes 'oldTrack'\r\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\r\n * @param {JitsiLocalTrack} newTrack the new stream to use\r\n * @returns {Promise} resolves when the replacement is finished\r\n */\r\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\r\n    // First do the removal of the oldTrack at the JitsiConference level\r\n    if (oldTrack) {\r\n        if (oldTrack.disposed) {\r\n            return Promise.reject(\r\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\r\n        }\r\n    }\r\n    if (newTrack) {\r\n        if (newTrack.disposed) {\r\n            return Promise.reject(\r\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\r\n        }\r\n    }\r\n\r\n    // Now replace the stream at the lower levels\r\n    return this._doReplaceTrack(oldTrack, newTrack)\r\n        .then(() => {\r\n            if (oldTrack) {\r\n                this.onLocalTrackRemoved(oldTrack);\r\n            }\r\n            if (newTrack) {\r\n                // Now handle the addition of the newTrack at the\r\n                // JitsiConference level\r\n                this._setupNewTrack(newTrack);\r\n            }\r\n\r\n            return Promise.resolve();\r\n        }, error => Promise.reject(new Error(error)));\r\n};\r\n\r\n/**\r\n * Replaces the tracks at the lower level by going through the Jingle session\r\n * and WebRTC peer connection. The method will resolve immediately if there is\r\n * currently no JingleSession started.\r\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\r\n * the process or <tt>null</t> if the method should act as \"add track\"\r\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\r\n * <tt>null</tt> if the method should act as \"remove track\"\r\n * @return {Promise} resolved when the process is done or rejected with a string\r\n * which describes the error.\r\n * @private\r\n */\r\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\r\n    const replaceTrackPromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        replaceTrackPromises.push(\r\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\r\n    } else {\r\n        logger.info('_doReplaceTrack - no JVB JingleSession');\r\n    }\r\n\r\n    if (this.p2pJingleSession) {\r\n        replaceTrackPromises.push(\r\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\r\n    } else {\r\n        logger.info('_doReplaceTrack - no P2P JingleSession');\r\n    }\r\n\r\n    return Promise.all(replaceTrackPromises);\r\n};\r\n\r\n/**\r\n * Operations related to creating a new track\r\n * @param {JitsiLocalTrack} newTrack the new track being created\r\n */\r\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\r\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\r\n            && newTrack.videoType !== VideoType.DESKTOP)) {\r\n        // Report active device to statistics\r\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\r\n        const device\r\n            = devices.find(\r\n                d =>\r\n                    d.kind === `${newTrack.getTrack().kind}input`\r\n                        && d.label === newTrack.getTrack().label);\r\n\r\n        if (device) {\r\n            Statistics.sendActiveDeviceListEvent(\r\n                RTC.getEventDataForActiveDevice(device));\r\n        }\r\n    }\r\n    if (newTrack.isVideoTrack()) {\r\n        this.removeCommand('videoType');\r\n        this.sendCommand('videoType', {\r\n            value: newTrack.videoType,\r\n            attributes: {\r\n                xmlns: 'http://jitsi.org/jitmeet/video'\r\n            }\r\n        });\r\n    }\r\n    this.rtc.addLocalTrack(newTrack);\r\n\r\n    // ensure that we're sharing proper \"is muted\" state\r\n    if (newTrack.isAudioTrack()) {\r\n        this.room.setAudioMute(newTrack.isMuted());\r\n    } else {\r\n        this.room.setVideoMute(newTrack.isMuted());\r\n    }\r\n\r\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\r\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\r\n    newTrack.addEventListener(\r\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        newTrack.muteHandler);\r\n    newTrack.addEventListener(\r\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        newTrack.audioLevelHandler);\r\n\r\n    newTrack._setConference(this);\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\r\n};\r\n\r\n/**\r\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\r\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\r\n * removed on video mute).\r\n * @param {JitsiLocalTrack} track the local track that will be added as part of\r\n * the unmute operation.\r\n * @return {Promise} resolved when the process is done or rejected with a string\r\n * which describes the error.\r\n */\r\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\r\n    const addAsUnmutePromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\r\n    } else {\r\n        logger.info(\r\n            'Add local MediaStream as unmute -'\r\n                + ' no JVB Jingle session started yet');\r\n    }\r\n\r\n    if (this.p2pJingleSession) {\r\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\r\n    } else {\r\n        logger.info(\r\n            'Add local MediaStream as unmute -'\r\n                + ' no P2P Jingle session started yet');\r\n    }\r\n\r\n    return Promise.all(addAsUnmutePromises);\r\n};\r\n\r\n/**\r\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\r\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\r\n * that is to stop sending any data and turn off the HW camera device.\r\n * @param {JitsiLocalTrack} track the local track that will be removed.\r\n * @return {Promise}\r\n */\r\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\r\n    const removeAsMutePromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        removeAsMutePromises.push(\r\n            this.jvbJingleSession.removeTrackAsMute(track));\r\n    } else {\r\n        logger.info(\r\n            'Remove local MediaStream - no JVB JingleSession started yet');\r\n    }\r\n    if (this.p2pJingleSession) {\r\n        removeAsMutePromises.push(\r\n            this.p2pJingleSession.removeTrackAsMute(track));\r\n    } else {\r\n        logger.info(\r\n            'Remove local MediaStream - no P2P JingleSession started yet');\r\n    }\r\n\r\n    return Promise.all(removeAsMutePromises);\r\n};\r\n\r\n/**\r\n * Get role of the local user.\r\n * @returns {string} user role: 'moderator' or 'none'\r\n */\r\nJitsiConference.prototype.getRole = function() {\r\n    return this.room.role;\r\n};\r\n\r\n/**\r\n * Returns whether or not the current conference has been joined as a hidden\r\n * user.\r\n *\r\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\r\n * no connection is active.\r\n */\r\nJitsiConference.prototype.isHidden = function() {\r\n    if (!this.connection) {\r\n        return null;\r\n    }\r\n\r\n    return Strophe.getDomainFromJid(this.connection.getJid())\r\n        === this.options.config.hiddenDomain;\r\n};\r\n\r\n/**\r\n * Check if local user is moderator.\r\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\r\n * we're no longer in the conference room then <tt>null</tt> is returned.\r\n */\r\nJitsiConference.prototype.isModerator = function() {\r\n    return this.room ? this.room.isModerator() : null;\r\n};\r\n\r\n/**\r\n * Set password for the room.\r\n * @param {string} password new password for the room.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.lock = function(password) {\r\n    if (!this.isModerator()) {\r\n        return Promise.reject(new Error('You are not moderator.'));\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.room.lockRoom(\r\n            password || '',\r\n            () => resolve(),\r\n            err => reject(err),\r\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\r\n    });\r\n};\r\n\r\n/**\r\n * Remove password from the room.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.unlock = function() {\r\n    return this.lock();\r\n};\r\n\r\n/**\r\n * Elects the participant with the given id to be the selected participant in\r\n * order to receive higher video quality (if simulcast is enabled).\r\n * Or cache it if channel is not created and send it once channel is available.\r\n * @param participantId the identifier of the participant\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.selectParticipant = function(participantId) {\r\n    this.selectParticipants([ participantId ]);\r\n};\r\n\r\n/*\r\n * Elects participants with given ids to be the selected participants in order\r\n * to receive higher video quality (if simulcast is enabled). The argument\r\n * should be an array of participant id strings or an empty array; an error will\r\n * be thrown if a non-array is passed in. The error is thrown as a layer of\r\n * protection against passing an invalid argument, as the error will happen in\r\n * the bridge and may not be visible in the client.\r\n *\r\n * @param {Array<strings>} participantIds - An array of identifiers for\r\n * participants.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.selectParticipants = function(participantIds) {\r\n    if (!Array.isArray(participantIds)) {\r\n        throw new Error('Invalid argument; participantIds must be an array.');\r\n    }\r\n\r\n    this.rtc.selectEndpoints(participantIds);\r\n};\r\n\r\n/**\r\n * Elects the participant with the given id to be the pinned participant in\r\n * order to always receive video for this participant (even when last n is\r\n * enabled).\r\n * @param participantId the identifier of the participant\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n */\r\nJitsiConference.prototype.pinParticipant = function(participantId) {\r\n    this.rtc.pinEndpoint(participantId);\r\n};\r\n\r\n/**\r\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\r\n * @returns {number}\r\n */\r\nJitsiConference.prototype.getLastN = function() {\r\n    return this.rtc.getLastN();\r\n};\r\n\r\n/**\r\n * Selects a new value for \"lastN\". The requested amount of videos are going\r\n * to be delivered after the value is in effect. Set to -1 for unlimited or\r\n * all available videos.\r\n * @param lastN the new number of videos the user would like to receive.\r\n * @throws Error or RangeError if the given value is not a number or is smaller\r\n * than -1.\r\n */\r\nJitsiConference.prototype.setLastN = function(lastN) {\r\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\r\n        throw new Error(`Invalid value for lastN: ${lastN}`);\r\n    }\r\n    const n = Number(lastN);\r\n\r\n    if (n < -1) {\r\n        throw new RangeError('lastN cannot be smaller than -1');\r\n    }\r\n    this.rtc.setLastN(n);\r\n\r\n    // If the P2P session is not fully established yet, we wait until it gets\r\n    // established.\r\n    if (this.p2pJingleSession) {\r\n        const isVideoActive = n !== 0;\r\n\r\n        this.p2pJingleSession\r\n            .setMediaTransferActive(true, isVideoActive)\r\n            .catch(error => {\r\n                logger.error(\r\n                    `Failed to adjust video transfer status (${isVideoActive})`,\r\n                    error);\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Checks if the participant given by participantId is currently included in\r\n * the last N.\r\n * @param {string} participantId the identifier of the participant we would\r\n * like to check.\r\n * @return {boolean} true if the participant with id is in the last N set or\r\n * if there's no last N set, false otherwise.\r\n * @deprecated this method should never be used to figure out the UI, but\r\n * {@link ParticipantConnectionStatus} should be used instead.\r\n */\r\nJitsiConference.prototype.isInLastN = function(participantId) {\r\n    return this.rtc.isInLastN(participantId);\r\n};\r\n\r\n/**\r\n * @return Array<JitsiParticipant> an array of all participants in this\r\n * conference.\r\n */\r\nJitsiConference.prototype.getParticipants = function() {\r\n    return Object.values(this.participants);\r\n};\r\n\r\n/**\r\n * Returns the number of participants in the conference, including the local\r\n * participant.\r\n * @param countHidden {boolean} Whether or not to include hidden participants\r\n * in the count. Default: false.\r\n **/\r\nJitsiConference.prototype.getParticipantCount\r\n    = function(countHidden = false) {\r\n\r\n        let participants = this.getParticipants();\r\n\r\n        if (!countHidden) {\r\n            participants = participants.filter(p => !p.isHidden());\r\n        }\r\n\r\n        // Add one for the local participant.\r\n        return participants.length + 1;\r\n    };\r\n\r\n/**\r\n * @returns {JitsiParticipant} the participant in this conference with the\r\n * specified id (or undefined if there isn't one).\r\n * @param id the id of the participant.\r\n */\r\nJitsiConference.prototype.getParticipantById = function(id) {\r\n    return this.participants[id];\r\n};\r\n\r\n/**\r\n * Grant owner rights to the participant.\r\n * @param {string} id id of the participant to grant owner rights to.\r\n */\r\nJitsiConference.prototype.grantOwner = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.setAffiliation(participant.getJid(), 'owner');\r\n};\r\n\r\n/**\r\n * Kick participant from this conference.\r\n * @param {string} id id of the participant to kick\r\n */\r\nJitsiConference.prototype.kickParticipant = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.kick(participant.getJid());\r\n};\r\n\r\n/**\r\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\r\n * analytics event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeClearSITimeout = function() {\r\n    if (this._sessionInitiateTimeout\r\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\r\n        window.clearTimeout(this._sessionInitiateTimeout);\r\n        this._sessionInitiateTimeout = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\r\n * event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeSetSITimeout = function() {\r\n    // Jicofo is supposed to invite if there are at least 2 participants\r\n    if (!this.jvbJingleSession\r\n            && this.getParticipantCount() >= 2\r\n            && !this._sessionInitiateTimeout) {\r\n        this._sessionInitiateTimeout = window.setTimeout(() => {\r\n            this._sessionInitiateTimeout = null;\r\n            Statistics.sendAnalytics(createJingleEvent(\r\n                ACTION_JINGLE_SI_TIMEOUT,\r\n                {\r\n                    p2p: false,\r\n                    value: JINGLE_SI_TIMEOUT\r\n                }));\r\n        }, JINGLE_SI_TIMEOUT);\r\n    }\r\n};\r\n\r\n/**\r\n * Mutes a participant.\r\n * @param {string} id The id of the participant to mute.\r\n */\r\nJitsiConference.prototype.muteParticipant = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.muteParticipant(participant.getJid(), true);\r\n};\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Notifies this JitsiConference that a new member has joined its chat room.\r\n *\r\n * FIXME This should NOT be exposed!\r\n *\r\n * @param jid the jid of the participant in the MUC\r\n * @param nick the display name of the participant\r\n * @param role the role of the participant in the MUC\r\n * @param isHidden indicates if this is a hidden participant (system\r\n * participant for example a recorder).\r\n * @param statsID the participant statsID (optional)\r\n * @param status the initial status if any\r\n * @param identity the member identity, if any\r\n * @param botType the member botType, if any\r\n */\r\nJitsiConference.prototype.onMemberJoined = function(\r\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n\r\n    if (id === 'focus' || this.myUserId() === id) {\r\n        return;\r\n    }\r\n\r\n    const participant\r\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\r\n\r\n    participant._role = role;\r\n    participant._botType = botType;\r\n    this.participants[id] = participant;\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.USER_JOINED,\r\n        id,\r\n        participant);\r\n\r\n    this._updateFeatures(participant);\r\n\r\n    this._maybeStartOrStopP2P();\r\n    this._maybeSetSITimeout();\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Updates features for a participant.\r\n * @param {JitsiParticipant} participant - The participant to query for features.\r\n * @returns {void}\r\n * @private\r\n */\r\nJitsiConference.prototype._updateFeatures = function(participant) {\r\n    participant.getFeatures()\r\n        .then(features => {\r\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\r\n            this.updateDTMFSupport();\r\n\r\n            if (features.has('http://jitsi.org/protocol/jigasi')) {\r\n                participant.setProperty('features_jigasi', true);\r\n            }\r\n\r\n            if (features.has('https://jitsi.org/meet/e2ee')) {\r\n                participant.setProperty('features_e2ee', true);\r\n            }\r\n        })\r\n        .catch(() => false);\r\n};\r\n\r\n/**\r\n * Get notified when member bot type had changed.\r\n * @param jid the member jid\r\n * @param botType the new botType value\r\n * @private\r\n */\r\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\r\n\r\n    // find the participant and mark it as non bot, as the real one will join\r\n    // in a moment\r\n    const peers = this.getParticipants();\r\n    const botParticipant = peers.find(p => p.getJid() === jid);\r\n\r\n    if (botParticipant) {\r\n        botParticipant._botType = botType;\r\n        const id = Strophe.getResourceFromJid(jid);\r\n\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\r\n            id,\r\n            botType);\r\n    }\r\n\r\n    // if botType changed to undefined, botType was removed, in case of\r\n    // poltergeist mode this is the moment when the poltergeist had exited and\r\n    // the real participant had already replaced it.\r\n    // In this case we can check and try p2p\r\n    if (!botParticipant._botType) {\r\n        this._maybeStartOrStopP2P();\r\n    }\r\n};\r\n\r\nJitsiConference.prototype.onMemberLeft = function(jid) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n\r\n    if (id === 'focus' || this.myUserId() === id) {\r\n        return;\r\n    }\r\n\r\n    const participant = this.participants[id];\r\n\r\n    delete this.participants[id];\r\n\r\n    const removedTracks = this.rtc.removeRemoteTracks(id);\r\n\r\n    removedTracks.forEach(\r\n        track =>\r\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track));\r\n\r\n    // there can be no participant in case the member that left is focus\r\n    if (participant) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.USER_LEFT, id, participant);\r\n    }\r\n\r\n    this._maybeStartOrStopP2P(true /* triggered by user left event */);\r\n    this._maybeClearSITimeout();\r\n};\r\n\r\n/**\r\n * Designates an event indicating that we were kicked from the XMPP MUC.\r\n * @param {boolean} isSelfPresence - whether it is for local participant\r\n * or another participant.\r\n * @param {string} actorId - the id of the participant who was initiator\r\n * of the kick.\r\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\r\n * this is the id of the participant which was kicked.\r\n */\r\nJitsiConference.prototype.onMemberKicked = function(isSelfPresence, actorId, kickedParticipantId) {\r\n    // This check which be true when we kick someone else. With the introduction of lobby\r\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\r\n    // avoid emitting an event where `undefined` kicked someone.\r\n    if (actorId === this.myUserId()) {\r\n        return;\r\n    }\r\n\r\n    const actorParticipant = this.participants[actorId];\r\n\r\n    if (isSelfPresence) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.KICKED, actorParticipant);\r\n\r\n        this.leave();\r\n\r\n        return;\r\n    }\r\n\r\n    const kickedParticipant = this.participants[kickedParticipantId];\r\n\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant);\r\n};\r\n\r\n/**\r\n * Method called on local MUC role change.\r\n * @param {string} role the name of new user's role as defined by XMPP MUC.\r\n */\r\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\r\n    // Emit role changed for local  JID\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\r\n};\r\n\r\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    participant._role = role;\r\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\r\n};\r\n\r\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n\r\n    if (participant._displayName === displayName) {\r\n        return;\r\n    }\r\n\r\n    participant._displayName = displayName;\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\r\n        id,\r\n        displayName);\r\n};\r\n\r\n/**\r\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\r\n * the conference.\r\n *\r\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\r\n * JitsiConference\r\n */\r\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\r\n    if (track.isP2P && !this.isP2PActive()) {\r\n        logger.info(\r\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\r\n\r\n        return;\r\n    } else if (!track.isP2P && this.isP2PActive()) {\r\n        logger.info(\r\n            'Trying to add remote JVB track, when in P2P - IGNORED');\r\n\r\n        return;\r\n    }\r\n\r\n    const id = track.getParticipantId();\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        logger.error(`No participant found for id: ${id}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Add track to JitsiParticipant.\r\n    participant._tracks.push(track);\r\n\r\n    if (this.transcriber) {\r\n        this.transcriber.addTrack(track);\r\n    }\r\n\r\n    const emitter = this.eventEmitter;\r\n\r\n    track.addEventListener(\r\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\r\n    track.addEventListener(\r\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        (audioLevel, tpc) => {\r\n            const activeTPC = this.getActivePeerConnection();\r\n\r\n            if (activeTPC === tpc) {\r\n                emitter.emit(\r\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                    id,\r\n                    audioLevel);\r\n            }\r\n        }\r\n    );\r\n\r\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\r\n};\r\n\r\n/**\r\n * Callback called by the Jingle plugin when 'session-answer' is received.\r\n * @param {JingleSessionPC} session the Jingle session for which an answer was\r\n * received.\r\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\r\n    if (this.p2pJingleSession === session) {\r\n        logger.info('P2P setAnswer');\r\n\r\n        this.p2pJingleSession.setAnswer(answer);\r\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\r\n    }\r\n};\r\n\r\n/**\r\n * Callback called by the Jingle plugin when 'transport-info' is received.\r\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\r\n * received\r\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\r\n * element\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\r\n    if (this.p2pJingleSession === session) {\r\n        logger.info('P2P addIceCandidates');\r\n        this.p2pJingleSession.addIceCandidates(transportInfo);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\r\n * the conference.\r\n *\r\n * @param {JitsiRemoteTrack} removedTrack\r\n */\r\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\r\n    this.getParticipants().forEach(participant => {\r\n        const tracks = participant.getTracks();\r\n\r\n        for (let i = 0; i < tracks.length; i++) {\r\n            if (tracks[i] === removedTrack) {\r\n                // Since the tracks have been compared and are\r\n                // considered equal the result of splice can be ignored.\r\n                participant._tracks.splice(i, 1);\r\n\r\n                this.eventEmitter.emit(\r\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\r\n\r\n                if (this.transcriber) {\r\n                    this.transcriber.removeTrack(removedTrack);\r\n                }\r\n\r\n                break;\r\n            }\r\n        }\r\n    }, this);\r\n};\r\n\r\n/**\r\n * Handles an incoming call event for the P2P jingle session.\r\n */\r\nJitsiConference.prototype._onIncomingCallP2P = function(\r\n        jingleSession,\r\n        jingleOffer) {\r\n\r\n    let rejectReason;\r\n\r\n    if (!browser.supportsP2P()) {\r\n        rejectReason = {\r\n            reason: 'unsupported-applications',\r\n            reasonDescription: 'P2P not supported',\r\n            errorMsg: 'This client does not support P2P connections'\r\n        };\r\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\r\n        rejectReason = {\r\n            reason: 'decline',\r\n            reasonDescription: 'P2P disabled',\r\n            errorMsg: 'P2P mode disabled in the configuration'\r\n        };\r\n    } else if (this.p2pJingleSession) {\r\n        // Reject incoming P2P call (already in progress)\r\n        rejectReason = {\r\n            reason: 'busy',\r\n            reasonDescription: 'P2P already in progress',\r\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\r\n        };\r\n    } else if (!this._shouldBeInP2PMode()) {\r\n        rejectReason = {\r\n            reason: 'decline',\r\n            reasonDescription: 'P2P requirements not met',\r\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\r\n        };\r\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\r\n    }\r\n\r\n    if (rejectReason) {\r\n        this._rejectIncomingCall(jingleSession, rejectReason);\r\n    } else {\r\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles an incoming call event.\r\n */\r\nJitsiConference.prototype.onIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer,\r\n        now) {\r\n    // Handle incoming P2P call\r\n    if (jingleSession.isP2P) {\r\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\r\n    } else {\r\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\r\n            const description = 'Rejecting session-initiate from non-focus.';\r\n\r\n            this._rejectIncomingCall(\r\n                jingleSession, {\r\n                    reason: 'security-error',\r\n                    reasonDescription: description,\r\n                    errorMsg: description\r\n                });\r\n\r\n            return;\r\n        }\r\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\r\n    }\r\n};\r\n\r\n/**\r\n * Accepts an incoming call event for the JVB jingle session.\r\n */\r\nJitsiConference.prototype._acceptJvbIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer,\r\n        now) {\r\n\r\n    // Accept incoming call\r\n    this.jvbJingleSession = jingleSession;\r\n    this.room.connectionTimes['session.initiate'] = now;\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    if (this.wasStopped) {\r\n        Statistics.sendAnalyticsAndLog(\r\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\r\n    }\r\n\r\n    const serverRegion\r\n        = $(jingleOffer)\r\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\r\n            .attr('region');\r\n\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\r\n        serverRegion);\r\n\r\n    this._maybeClearSITimeout();\r\n    Statistics.sendAnalytics(createJingleEvent(\r\n        ACTION_JINGLE_SI_RECEIVED,\r\n        {\r\n            p2p: false,\r\n            value: now\r\n        }));\r\n\r\n    try {\r\n        jingleSession.initialize(this.room, this.rtc, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this._isE2EEEnabled()\r\n        });\r\n    } catch (error) {\r\n        GlobalOnErrorHandler.callErrorHandler(error);\r\n        logger.error(error);\r\n\r\n        return;\r\n    }\r\n\r\n    // Open a channel with the videobridge.\r\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\r\n\r\n    // Add local tracks to the session\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    try {\r\n        jingleSession.acceptOffer(\r\n            jingleOffer,\r\n            () => {\r\n                // If for any reason invite for the JVB session arrived after\r\n                // the P2P has been established already the media transfer needs\r\n                // to be turned off here.\r\n                if (this.isP2PActive() && this.jvbJingleSession) {\r\n                    this._suspendMediaTransferForJvbConnection();\r\n                }\r\n\r\n                this.eventEmitter.emit(\r\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n                    jingleSession);\r\n                if (!this.isP2PActive()) {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n                        jingleSession);\r\n                }\r\n            },\r\n            error => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(\r\n                    'Failed to accept incoming Jingle session', error);\r\n            },\r\n            localTracks\r\n        );\r\n\r\n        // Start callstats as soon as peerconnection is initialized,\r\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\r\n        // happen in case if user doesn't have or denied permission to\r\n        // both camera and microphone.\r\n        logger.info('Starting CallStats for JVB connection...');\r\n        this.statistics.startCallStats(\r\n            this.jvbJingleSession.peerconnection,\r\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\r\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\r\n    } catch (e) {\r\n        GlobalOnErrorHandler.callErrorHandler(e);\r\n        logger.error(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the BridgeChannel.\r\n *\r\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\r\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\r\n * BridgeChannel mode.\r\n * @param {TraceablePeerConnection} pc the peer connection which will be used\r\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\r\n */\r\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\r\n    let wsUrl = null;\r\n    const webSocket\r\n        = $(offerIq)\r\n            .find('>content>transport>web-socket')\r\n            .first();\r\n\r\n    if (webSocket.length === 1) {\r\n        wsUrl = webSocket[0].getAttribute('url');\r\n    }\r\n\r\n    let bridgeChannelType;\r\n\r\n    switch (this.options.config.openBridgeChannel) {\r\n    case 'datachannel':\r\n    case true:\r\n    case undefined:\r\n        bridgeChannelType = 'datachannel';\r\n        break;\r\n    case 'websocket':\r\n        bridgeChannelType = 'websocket';\r\n        break;\r\n    }\r\n\r\n    if (bridgeChannelType === 'datachannel') {\r\n        this.rtc.initializeBridgeChannel(pc, null);\r\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\r\n        this.rtc.initializeBridgeChannel(null, wsUrl);\r\n    }\r\n};\r\n\r\n/**\r\n * Rejects incoming Jingle call.\r\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\r\n * @param {object} [options]\r\n * @param {string} options.reason the name of the reason element as defined\r\n * by Jingle\r\n * @param {string} options.reasonDescription the reason description which will\r\n * be included in Jingle 'session-terminate' message.\r\n * @param {string} options.errorMsg an error message to be logged on global\r\n * error handler\r\n * @private\r\n */\r\nJitsiConference.prototype._rejectIncomingCall = function(\r\n        jingleSession,\r\n        options) {\r\n    if (options && options.errorMsg) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\r\n    }\r\n\r\n    // Terminate the jingle session with a reason\r\n    jingleSession.terminate(\r\n        null /* success callback => we don't care */,\r\n        error => {\r\n            logger.warn(\r\n                'An error occurred while trying to terminate'\r\n                    + ' invalid Jingle session', error);\r\n        }, {\r\n            reason: options && options.reason,\r\n            reasonDescription: options && options.reasonDescription,\r\n            sendSessionTerminate: true\r\n        });\r\n};\r\n\r\n/**\r\n * Handles the call ended event.\r\n * XXX is this due to the remote side terminating the Jingle session?\r\n *\r\n * @param {JingleSessionPC} jingleSession the jingle session which has been\r\n * terminated.\r\n * @param {String} reasonCondition the Jingle reason condition.\r\n * @param {String|null} reasonText human readable reason text which may provide\r\n * more details about why the call has been terminated.\r\n */\r\nJitsiConference.prototype.onCallEnded = function(\r\n        jingleSession,\r\n        reasonCondition,\r\n        reasonText) {\r\n    logger.info(\r\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\r\n            jingleSession.isP2P}`);\r\n    if (jingleSession === this.jvbJingleSession) {\r\n        this.wasStopped = true;\r\n\r\n        Statistics.sendAnalytics(\r\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\r\n\r\n        // Stop the stats\r\n        if (this.statistics) {\r\n            this.statistics.stopRemoteStats(\r\n                this.jvbJingleSession.peerconnection);\r\n            logger.info('Stopping JVB CallStats');\r\n            this.statistics.stopCallStats(\r\n                this.jvbJingleSession.peerconnection);\r\n        }\r\n\r\n        // Current JVB JingleSession is no longer valid, so set it to null\r\n        this.jvbJingleSession = null;\r\n\r\n        // Let the RTC service do any cleanups\r\n        this.rtc.onCallEnded();\r\n    } else if (jingleSession === this.p2pJingleSession) {\r\n        // It's the responder who decides to enforce JVB mode, so that both\r\n        // initiator and responder are aware if it was intentional.\r\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\r\n            logger.info('In forced JVB 121 mode...');\r\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\r\n        } else if (reasonCondition === 'connectivity-error'\r\n            && reasonText === 'ICE FAILED') {\r\n            // It can happen that the other peer detects ICE failed and\r\n            // terminates the session, before we get the event on our side.\r\n            // But we are able to parse the reason and mark it here.\r\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\r\n        }\r\n        this._stopP2PSession();\r\n    } else {\r\n        logger.error(\r\n            'Received onCallEnded for invalid session',\r\n            jingleSession.sid,\r\n            jingleSession.remoteJid,\r\n            reasonCondition,\r\n            reasonText);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles the suspend detected event. Leaves the room and fires suspended.\r\n * @param {JingleSessionPC} jingleSession\r\n */\r\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\r\n    if (!jingleSession.isP2P) {\r\n        this.leave();\r\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\r\n    }\r\n};\r\n\r\nJitsiConference.prototype.updateDTMFSupport = function() {\r\n    let somebodySupportsDTMF = false;\r\n    const participants = this.getParticipants();\r\n\r\n    // check if at least 1 participant supports DTMF\r\n    for (let i = 0; i < participants.length; i += 1) {\r\n        if (participants[i].supportsDTMF()) {\r\n            somebodySupportsDTMF = true;\r\n            break;\r\n        }\r\n    }\r\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\r\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\r\n            somebodySupportsDTMF);\r\n    }\r\n};\r\n\r\n/**\r\n * Allows to check if there is at least one user in the conference\r\n * that supports DTMF.\r\n * @returns {boolean} true if somebody supports DTMF, false otherwise\r\n */\r\nJitsiConference.prototype.isDTMFSupported = function() {\r\n    return this.somebodySupportsDTMF;\r\n};\r\n\r\n/**\r\n * Returns the local user's ID\r\n * @return {string} local user's ID\r\n */\r\nJitsiConference.prototype.myUserId = function() {\r\n    return (\r\n        this.room && this.room.myroomjid\r\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\r\n            : null);\r\n};\r\n\r\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\r\n    const peerConnection = this.getActivePeerConnection();\r\n\r\n    if (peerConnection) {\r\n        peerConnection.sendTones(tones, duration, pause);\r\n    } else {\r\n        logger.warn('cannot sendTones: no peer connection');\r\n    }\r\n};\r\n\r\n/**\r\n * Starts recording the current conference.\r\n *\r\n * @param {Object} options - Configuration for the recording. See\r\n * {@link Chatroom#startRecording} for more info.\r\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\r\n */\r\nJitsiConference.prototype.startRecording = function(options) {\r\n    if (this.room) {\r\n        return this.recordingManager.startRecording(options);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference is not created yet!'));\r\n};\r\n\r\n/**\r\n * Stop a recording session.\r\n *\r\n * @param {string} sessionID - The ID of the recording session that\r\n * should be stopped.\r\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\r\n */\r\nJitsiConference.prototype.stopRecording = function(sessionID) {\r\n    if (this.room) {\r\n        return this.recordingManager.stopRecording(sessionID);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference is not created yet!'));\r\n};\r\n\r\n/**\r\n * Returns true if the SIP calls are supported and false otherwise\r\n */\r\nJitsiConference.prototype.isSIPCallingSupported = function() {\r\n    if (this.room) {\r\n        return this.room.isSIPCallingSupported();\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Dials a number.\r\n * @param number the number\r\n */\r\nJitsiConference.prototype.dial = function(number) {\r\n    if (this.room) {\r\n        return this.room.dial(number);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        reject(new Error('The conference is not created yet!'));\r\n    });\r\n};\r\n\r\n/**\r\n * Hangup an existing call\r\n */\r\nJitsiConference.prototype.hangup = function() {\r\n    if (this.room) {\r\n        return this.room.hangup();\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        reject(new Error('The conference is not created yet!'));\r\n    });\r\n};\r\n\r\n/**\r\n * Starts the transcription service.\r\n */\r\nJitsiConference.prototype.startTranscriber = function() {\r\n    return this.dial('jitsi_meet_transcribe');\r\n};\r\n\r\n\r\n/**\r\n * Stops the transcription service.\r\n */\r\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\r\n\r\n/**\r\n * Returns the phone number for joining the conference.\r\n */\r\nJitsiConference.prototype.getPhoneNumber = function() {\r\n    if (this.room) {\r\n        return this.room.getPhoneNumber();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the pin for joining the conference with phone.\r\n */\r\nJitsiConference.prototype.getPhonePin = function() {\r\n    if (this.room) {\r\n        return this.room.getPhonePin();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the meeting unique ID if any.\r\n *\r\n * @returns {string|undefined}\r\n */\r\nJitsiConference.prototype.getMeetingUniqueId = function() {\r\n    if (this.room) {\r\n        return this.room.getMeetingId();\r\n    }\r\n};\r\n\r\n/**\r\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\r\n * which connection is currently active.\r\n *\r\n * @return {TraceablePeerConnection|null} null if there isn't any active\r\n * <tt>TraceablePeerConnection</tt> currently available.\r\n * @public (FIXME how to make package local ?)\r\n */\r\nJitsiConference.prototype.getActivePeerConnection = function() {\r\n    if (this.isP2PActive()) {\r\n        return this.p2pJingleSession.peerconnection;\r\n    }\r\n\r\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\r\n};\r\n\r\n/**\r\n * Returns the connection state for the current room. Its ice connection state\r\n * for its session.\r\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\r\n * be converted to \"connected\".\r\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\r\n * peer connection at this time.\r\n */\r\nJitsiConference.prototype.getConnectionState = function() {\r\n    const peerConnection = this.getActivePeerConnection();\r\n\r\n    return peerConnection ? peerConnection.getConnectionState() : null;\r\n};\r\n\r\n/**\r\n * Make all new participants mute their audio/video on join.\r\n * @param policy {Object} object with 2 boolean properties for video and audio:\r\n * @param {boolean} audio if audio should be muted.\r\n * @param {boolean} video if video should be muted.\r\n */\r\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\r\n    if (!this.isModerator()) {\r\n        return;\r\n    }\r\n    this.startMutedPolicy = policy;\r\n    this.room.addToPresence('startmuted', {\r\n        attributes: {\r\n            audio: policy.audio,\r\n            video: policy.video,\r\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\r\n        }\r\n    });\r\n    this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * Returns current start muted policy\r\n * @returns {Object} with 2 properties - audio and video.\r\n */\r\nJitsiConference.prototype.getStartMutedPolicy = function() {\r\n    return this.startMutedPolicy;\r\n};\r\n\r\n/**\r\n * Check if audio is muted on join.\r\n */\r\nJitsiConference.prototype.isStartAudioMuted = function() {\r\n    return this.startAudioMuted;\r\n};\r\n\r\n/**\r\n * Check if video is muted on join.\r\n */\r\nJitsiConference.prototype.isStartVideoMuted = function() {\r\n    return this.startVideoMuted;\r\n};\r\n\r\n/**\r\n * Returns measured connectionTimes.\r\n */\r\nJitsiConference.prototype.getConnectionTimes = function() {\r\n    return this.room.connectionTimes;\r\n};\r\n\r\n/**\r\n * Sets a property for the local participant.\r\n */\r\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\r\n    this.sendCommand(`jitsi_participant_${name}`, { value });\r\n};\r\n\r\n/**\r\n *  Removes a property for the local participant and sends the updated presence.\r\n */\r\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\r\n    this.removeCommand(`jitsi_participant_${name}`);\r\n    this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * Gets a local participant property.\r\n *\r\n * @return value of the local participant property if the tagName exists in the\r\n * list of properties, otherwise returns undefined.\r\n */\r\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\r\n    const property = this.room.presMap.nodes.find(prop =>\r\n        prop.tagName === `jitsi_participant_${name}`\r\n    );\r\n\r\n    return property ? property.value : undefined;\r\n};\r\n\r\n/**\r\n * Sends the given feedback through CallStats if enabled.\r\n *\r\n * @param overallFeedback an integer between 1 and 5 indicating the\r\n * user feedback\r\n * @param detailedFeedback detailed feedback from the user. Not yet used\r\n * @returns {Promise} Resolves if feedback is submitted successfully.\r\n */\r\nJitsiConference.prototype.sendFeedback = function(\r\n        overallFeedback,\r\n        detailedFeedback) {\r\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\r\n};\r\n\r\n/**\r\n * Returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n *\r\n * @returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n */\r\nJitsiConference.prototype.isCallstatsEnabled = function() {\r\n    return this.statistics.isCallstatsEnabled();\r\n};\r\n\r\n/**\r\n * Finds the SSRC of a given track\r\n *\r\n * @param track\r\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\r\n */\r\nJitsiConference.prototype.getSsrcByTrack = function(track) {\r\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\r\n};\r\n\r\n/**\r\n * Handles track attached to container (Calls associateStreamWithVideoTag method\r\n * from statistics module)\r\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\r\n * @param container the container\r\n */\r\nJitsiConference.prototype._onTrackAttach = function(track, container) {\r\n    const isLocal = track.isLocal();\r\n    let ssrc = null;\r\n    const isP2P = track.isP2P;\r\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\r\n    const peerConnection\r\n        = isP2P\r\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\r\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\r\n\r\n    if (isLocal) {\r\n        // Local tracks have SSRC stored on per peer connection basis.\r\n        if (peerConnection) {\r\n            ssrc = peerConnection.getLocalSSRC(track);\r\n        }\r\n    } else {\r\n        ssrc = track.getSSRC();\r\n    }\r\n    if (!container.id || !ssrc || !peerConnection) {\r\n        return;\r\n    }\r\n\r\n    this.statistics.associateStreamWithVideoTag(\r\n        peerConnection,\r\n        ssrc,\r\n        isLocal,\r\n        remoteUserId,\r\n        track.getUsageLabel(),\r\n        container.id);\r\n};\r\n\r\n/**\r\n * Logs an \"application log\" message.\r\n * @param message {string} The message to log. Note that while this can be a\r\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\r\n * log valid JSON strings, with an \"id\" field used for distinguishing between\r\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\r\n */\r\nJitsiConference.prototype.sendApplicationLog = function(message) {\r\n    Statistics.sendLog(message);\r\n};\r\n\r\n/**\r\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\r\n * focus.\r\n * @param mucJid the full MUC address of the user to be checked.\r\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\r\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\r\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\r\n */\r\nJitsiConference.prototype._isFocus = function(mucJid) {\r\n    return this.room ? this.room.isFocus(mucJid) : null;\r\n};\r\n\r\n/**\r\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\r\n */\r\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\r\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\r\n};\r\n\r\n/**\r\n * Sends a message via the data channel.\r\n * @param to {string} the id of the endpoint that should receive the message.\r\n * If \"\" the message will be sent to all participants.\r\n * @param payload {object} the payload of the message.\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\r\n    this.rtc.sendChannelMessage(to, payload);\r\n};\r\n\r\n/**\r\n * Sends a broadcast message via the data channel.\r\n * @param payload {object} the payload of the message.\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\r\n    this.sendEndpointMessage('', payload);\r\n};\r\n\r\n/**\r\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\r\n * broadcasts it to all endpoints in the conference.\r\n * @param {string} to The ID of the endpoint/participant which is to receive\r\n * the message, or '' to broadcast the message to all endpoints in the\r\n * conference.\r\n * @param {string|object} message the message to send. If this is of type\r\n * 'string' it will be sent as a chat message. If it is of type 'object', it\r\n * will be encapsulated in a format recognized by jitsi-meet and converted to\r\n * JSON before being sent.\r\n * @param {boolean} sendThroughVideobridge Whether to send the message through\r\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\r\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\r\n */\r\nJitsiConference.prototype.sendMessage = function(\r\n        message,\r\n        to = '',\r\n        sendThroughVideobridge = false) {\r\n    const messageType = typeof message;\r\n\r\n    // Through videobridge we support only objects. Through XMPP we support\r\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\r\n    // regular chat messages).\r\n    if (messageType !== 'object'\r\n            && (sendThroughVideobridge || messageType !== 'string')) {\r\n        logger.error(`Can not send a message of type ${messageType}`);\r\n\r\n        return;\r\n    }\r\n\r\n    if (sendThroughVideobridge) {\r\n        this.sendEndpointMessage(to, message);\r\n    } else {\r\n        let messageToSend = message;\r\n\r\n        // Name of packet extension of message stanza to send the required\r\n        // message in.\r\n        let elementName = 'body';\r\n\r\n        if (messageType === 'object') {\r\n            elementName = 'json-message';\r\n\r\n            // Mark as valid JSON message if not already\r\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\r\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\r\n            }\r\n\r\n            try {\r\n                messageToSend = JSON.stringify(messageToSend);\r\n            } catch (e) {\r\n                logger.error('Can not send a message, stringify failed: ', e);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (to) {\r\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\r\n        } else {\r\n            // Broadcast\r\n            this.sendTextMessage(messageToSend, elementName);\r\n        }\r\n    }\r\n\r\n};\r\n\r\nJitsiConference.prototype.isConnectionInterrupted = function() {\r\n    return this.isP2PActive()\r\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\r\n    if (session.isP2P) {\r\n        this.isP2PConnectionInterrupted = true;\r\n    } else {\r\n        this.isJvbConnectionInterrupted = true;\r\n    }\r\n    if (session.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\r\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\r\n    // eventually come up with the new offer (at least for the time being).\r\n    if (session.isP2P) {\r\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\r\n        // and \"bad\" connection\r\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\r\n\r\n        if (this.p2pJingleSession) {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createP2PEvent(\r\n                    ACTION_P2P_FAILED,\r\n                    {\r\n                        initiator: this.p2pJingleSession.isInitiator\r\n                    }));\r\n\r\n        }\r\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\r\n    } else if (session && this.jvbJingleSession === session) {\r\n        this._delayedIceFailed = new IceFailedHandling(this);\r\n        this._delayedIceFailed.start(session);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\r\n    if (session.isP2P) {\r\n        this.isP2PConnectionInterrupted = false;\r\n    } else {\r\n        this.isJvbConnectionInterrupted = false;\r\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\r\n    }\r\n\r\n    if (session.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\r\n    }\r\n};\r\n\r\n/**\r\n * Accept incoming P2P Jingle call.\r\n * @param {JingleSessionPC} jingleSession the session instance\r\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\r\n * @private\r\n */\r\nJitsiConference.prototype._acceptP2PIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer) {\r\n    this.isP2PConnectionInterrupted = false;\r\n\r\n    // Accept the offer\r\n    this.p2pJingleSession = jingleSession;\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    this.p2pJingleSession.initialize(\r\n        this.room,\r\n        this.rtc, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this._isE2EEEnabled()\r\n        });\r\n\r\n    logger.info('Starting CallStats for P2P connection...');\r\n\r\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\r\n\r\n    const participant = this.participants[remoteID];\r\n\r\n    if (participant) {\r\n        remoteID = participant.getStatsID() || remoteID;\r\n    }\r\n\r\n    this.statistics.startCallStats(\r\n        this.p2pJingleSession.peerconnection,\r\n        remoteID);\r\n\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    this.p2pJingleSession.acceptOffer(\r\n        jingleOffer,\r\n        () => {\r\n            logger.debug('Got RESULT for P2P \"session-accept\"');\r\n\r\n            this.eventEmitter.emit(\r\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n                this.p2pJingleSession);\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to accept incoming P2P Jingle session', error);\r\n        },\r\n        localTracks);\r\n};\r\n\r\n/**\r\n * Adds remote tracks to the conference associated with the JVB session.\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteJVBTracks = function() {\r\n    this._addRemoteTracks(\r\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Adds remote tracks to the conference associated with the P2P session.\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteP2PTracks = function() {\r\n    this._addRemoteTracks(\r\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Generates fake \"remote track added\" events for given Jingle session.\r\n * @param {string} logName the session's nickname which will appear in log\r\n * messages.\r\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\r\n    for (const track of remoteTracks) {\r\n        logger.info(`Adding remote ${logName} track: ${track}`);\r\n        this.onRemoteTrackAdded(track);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\r\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\r\n * the P2P connection if the event comes from the P2P session.\r\n * @param {JingleSessionPC} jingleSession the session instance.\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionEstablished = function(\r\n        jingleSession) {\r\n    if (this.p2pJingleSession !== null) {\r\n        // store the establishment time of the p2p session as a field of the\r\n        // JitsiConference because the p2pJingleSession might get disposed (thus\r\n        // the value is lost).\r\n        this.p2pEstablishmentDuration\r\n            = this.p2pJingleSession.establishmentDuration;\r\n    }\r\n\r\n    if (this.jvbJingleSession !== null) {\r\n        this.jvbEstablishmentDuration\r\n            = this.jvbJingleSession.establishmentDuration;\r\n    }\r\n\r\n    let done = false;\r\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\r\n\r\n    // We don't care about the JVB case, there's nothing to be done\r\n    if (!jingleSession.isP2P) {\r\n        done = true;\r\n    } else if (this.p2pJingleSession !== jingleSession) {\r\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\r\n\r\n        done = true;\r\n    } else if (!jingleSession.isInitiator\r\n        && typeof forceJVB121Ratio === 'number'\r\n        && Math.random() < forceJVB121Ratio) {\r\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\r\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\r\n        this._stopP2PSession('decline', 'force JVB121');\r\n\r\n        done = true;\r\n    }\r\n\r\n    if (!isNaN(this.p2pEstablishmentDuration)\r\n        && !isNaN(this.jvbEstablishmentDuration)) {\r\n        const establishmentDurationDiff\r\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\r\n\r\n        Statistics.sendAnalytics(\r\n            ICE_ESTABLISHMENT_DURATION_DIFF,\r\n            { value: establishmentDurationDiff });\r\n    }\r\n\r\n    if (jingleSession.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\r\n    }\r\n\r\n    if (done) {\r\n\r\n        return;\r\n    }\r\n\r\n    // Update P2P status and emit events\r\n    this._setP2PStatus(true);\r\n\r\n    // Remove remote tracks\r\n    if (this.jvbJingleSession) {\r\n        this._removeRemoteJVBTracks();\r\n    } else {\r\n        logger.info('Not removing remote JVB tracks - no session yet');\r\n    }\r\n\r\n    this._addRemoteP2PTracks();\r\n\r\n    // Stop media transfer over the JVB connection\r\n    if (this.jvbJingleSession) {\r\n        this._suspendMediaTransferForJvbConnection();\r\n    }\r\n\r\n    logger.info('Starting remote stats with p2p connection');\r\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\r\n\r\n    Statistics.sendAnalyticsAndLog(\r\n        createP2PEvent(\r\n            ACTION_P2P_ESTABLISHED,\r\n            {\r\n                initiator: this.p2pJingleSession.isInitiator\r\n            }));\r\n\r\n};\r\n\r\n/**\r\n * Called when the chat room reads a new list of properties from jicofo's\r\n * presence. The properties may have changed, but they don't have to.\r\n *\r\n * @param {Object} properties - The properties keyed by the property name\r\n * ('key').\r\n * @private\r\n */\r\nJitsiConference.prototype._updateProperties = function(properties = {}) {\r\n    const changed = !isEqual(properties, this.properties);\r\n\r\n    this.properties = properties;\r\n    if (changed) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\r\n            this.properties);\r\n\r\n        // Some of the properties need to be added to analytics events.\r\n        const analyticsKeys = [\r\n\r\n            // The number of jitsi-videobridge instances currently used for the\r\n            // conference.\r\n            'bridge-count',\r\n\r\n            // The conference creation time (set by jicofo).\r\n            'created-ms',\r\n            'octo-enabled'\r\n        ];\r\n\r\n        analyticsKeys.forEach(key => {\r\n            if (properties[key] !== undefined) {\r\n                Statistics.analytics.addPermanentProperties({\r\n                    [key.replace('-', '_')]: properties[key]\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Gets a conference property with a given key.\r\n *\r\n * @param {string} key - The key.\r\n * @returns {*} The value\r\n */\r\nJitsiConference.prototype.getProperty = function(key) {\r\n    return this.properties[key];\r\n};\r\n\r\n/**\r\n * Clears the deferred start P2P task if it has been scheduled.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\r\n    if (this.deferredStartP2PTask) {\r\n        logger.info('Cleared deferred start P2P task');\r\n        clearTimeout(this.deferredStartP2PTask);\r\n        this.deferredStartP2PTask = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Removes from the conference remote tracks associated with the JVB\r\n * connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\r\n    this._removeRemoteTracks(\r\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Removes from the conference remote tracks associated with the P2P\r\n * connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\r\n    this._removeRemoteTracks(\r\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Generates fake \"remote track removed\" events for given Jingle session.\r\n * @param {string} sessionNickname the session's nickname which will appear in\r\n * log messages.\r\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteTracks = function(\r\n        sessionNickname,\r\n        remoteTracks) {\r\n    for (const track of remoteTracks) {\r\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\r\n        this.onRemoteTrackRemoved(track);\r\n    }\r\n};\r\n\r\n/**\r\n * Resumes media transfer over the JVB connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\r\n    logger.info('Resuming media transfer over the JVB connection...');\r\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\r\n        () => {\r\n            logger.info('Resumed media transfer over the JVB connection!');\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to resume media transfer over the JVB connection:',\r\n                error);\r\n        });\r\n};\r\n\r\n/**\r\n * Sets new P2P status and updates some events/states hijacked from\r\n * the <tt>JitsiConference</tt>.\r\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\r\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\r\n * @private\r\n */\r\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\r\n    if (this.p2p === newStatus) {\r\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\r\n\r\n        return;\r\n    }\r\n    this.p2p = newStatus;\r\n    if (newStatus) {\r\n        logger.info('Peer to peer connection established!');\r\n\r\n        // When we end up in a valid P2P session need to reset the properties\r\n        // in case they have persisted, after session with another peer.\r\n        Statistics.analytics.addPermanentProperties({\r\n            p2pFailed: false,\r\n            forceJvb121: false\r\n        });\r\n\r\n        // Sync up video transfer active in case p2pJingleSession not existed\r\n        // when the lastN value was being adjusted.\r\n        const isVideoActive = this.rtc.getLastN() !== 0;\r\n\r\n        this.p2pJingleSession\r\n            .setMediaTransferActive(true, isVideoActive)\r\n            .catch(error => {\r\n                logger.error(\r\n                    'Failed to sync up P2P video transfer status'\r\n                        + `(${isVideoActive})`, error);\r\n            });\r\n    } else {\r\n        logger.info('Peer to peer connection closed!');\r\n    }\r\n\r\n    // Put the JVB connection on hold/resume\r\n    if (this.jvbJingleSession) {\r\n        this.statistics.sendConnectionResumeOrHoldEvent(\r\n            this.jvbJingleSession.peerconnection, !newStatus);\r\n    }\r\n\r\n    // Clear dtmfManager, so that it can be recreated with new connection\r\n    this.dtmfManager = null;\r\n\r\n    // Update P2P status\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.P2P_STATUS,\r\n        this,\r\n        this.p2p);\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n        this._getActiveMediaSession());\r\n\r\n    // Refresh connection interrupted/restored\r\n    this.eventEmitter.emit(\r\n        this.isConnectionInterrupted()\r\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\r\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\r\n};\r\n\r\n/**\r\n * Starts new P2P session.\r\n * @param {string} remoteJid the JID of the remote participant\r\n * @private\r\n */\r\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\r\n    this._maybeClearDeferredStartP2P();\r\n    if (this.p2pJingleSession) {\r\n        logger.error('P2P session already started!');\r\n\r\n        return;\r\n    }\r\n\r\n    this.isP2PConnectionInterrupted = false;\r\n    this.p2pJingleSession\r\n        = this.xmpp.connection.jingle.newP2PJingleSession(\r\n            this.room.myroomjid,\r\n            remoteJid);\r\n    logger.info(\r\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    this.p2pJingleSession.initialize(\r\n        this.room,\r\n        this.rtc, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this._isE2EEEnabled()\r\n        });\r\n\r\n    logger.info('Starting CallStats for P2P connection...');\r\n\r\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\r\n\r\n    const participant = this.participants[remoteID];\r\n\r\n    if (participant) {\r\n        remoteID = participant.getStatsID() || remoteID;\r\n    }\r\n\r\n    this.statistics.startCallStats(\r\n        this.p2pJingleSession.peerconnection,\r\n        remoteID);\r\n\r\n    // NOTE one may consider to start P2P with the local tracks detached,\r\n    // but no data will be sent until ICE succeeds anyway. And we switch\r\n    // immediately once the P2P ICE connects.\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    this.p2pJingleSession.invite(localTracks);\r\n};\r\n\r\n/**\r\n * Suspends media transfer over the JVB connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\r\n    logger.info('Suspending media transfer over the JVB connection...');\r\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\r\n        () => {\r\n            logger.info('Suspended media transfer over the JVB connection !');\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to suspend media transfer over the JVB connection:',\r\n                error);\r\n        });\r\n};\r\n\r\n/**\r\n * Method when called will decide whether it's the time to start or stop\r\n * the P2P session.\r\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\r\n * originates from the user left event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\r\n    if (!browser.supportsP2P()\r\n        || !this.isP2PEnabled()\r\n        || this.isP2PTestModeEnabled()) {\r\n        logger.info('Auto P2P disabled');\r\n\r\n        return;\r\n    }\r\n    const peers = this.getParticipants();\r\n    const peerCount = peers.length;\r\n\r\n    // FIXME 1 peer and it must *support* P2P switching\r\n    const shouldBeInP2P = this._shouldBeInP2PMode();\r\n\r\n    // Clear deferred \"start P2P\" task\r\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\r\n        this._maybeClearDeferredStartP2P();\r\n    }\r\n\r\n    // Start peer to peer session\r\n    if (!this.p2pJingleSession && shouldBeInP2P) {\r\n        const peer = peerCount && peers[0];\r\n\r\n\r\n        const myId = this.myUserId();\r\n        const peersId = peer.getId();\r\n\r\n        if (myId > peersId) {\r\n            logger.debug(\r\n                'I\\'m the bigger peersId - '\r\n                + 'the other peer should start P2P', myId, peersId);\r\n\r\n            return;\r\n        } else if (myId === peersId) {\r\n            logger.error('The same IDs ? ', myId, peersId);\r\n\r\n            return;\r\n        }\r\n\r\n        const jid = peer.getJid();\r\n\r\n        if (userLeftEvent) {\r\n            if (this.deferredStartP2PTask) {\r\n                logger.error('Deferred start P2P task\\'s been set already!');\r\n\r\n                return;\r\n            }\r\n            logger.info(\r\n                `Will start P2P with: ${jid} after ${\r\n                    this.backToP2PDelay} seconds...`);\r\n            this.deferredStartP2PTask = setTimeout(\r\n                this._startP2PSession.bind(this, jid),\r\n                this.backToP2PDelay * 1000);\r\n        } else {\r\n            logger.info(`Will start P2P with: ${jid}`);\r\n            this._startP2PSession(jid);\r\n        }\r\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\r\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\r\n\r\n        // Log that there will be a switch back to the JVB connection\r\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\r\n        }\r\n        this._stopP2PSession();\r\n    }\r\n};\r\n\r\n/**\r\n * Tells whether or not this conference should be currently in the P2P mode.\r\n *\r\n * @private\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype._shouldBeInP2PMode = function() {\r\n    const peers = this.getParticipants();\r\n    const peerCount = peers.length;\r\n    const hasBotPeer = peers.find(p => p._botType === 'poltergeist') !== undefined;\r\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\r\n\r\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\r\n\r\n    return shouldBeInP2P;\r\n};\r\n\r\n/**\r\n * Stops the current P2P session.\r\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\r\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\r\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\r\n * description that will be included in the session terminate message\r\n * @private\r\n */\r\nJitsiConference.prototype._stopP2PSession = function(\r\n        reason,\r\n        reasonDescription) {\r\n    if (!this.p2pJingleSession) {\r\n        logger.error('No P2P session to be stopped!');\r\n\r\n        return;\r\n    }\r\n\r\n    const wasP2PEstablished = this.isP2PActive();\r\n\r\n    // Swap remote tracks, but only if the P2P has been fully established\r\n    if (wasP2PEstablished) {\r\n        if (this.jvbJingleSession) {\r\n            this._resumeMediaTransferForJvbConnection();\r\n        }\r\n\r\n        // Remove remote P2P tracks\r\n        this._removeRemoteP2PTracks();\r\n    }\r\n\r\n    // Stop P2P stats\r\n    logger.info('Stopping remote stats for P2P connection');\r\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\r\n    logger.info('Stopping CallStats for P2P connection');\r\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\r\n\r\n    this.p2pJingleSession.terminate(\r\n        () => {\r\n            logger.info('P2P session terminate RESULT');\r\n        },\r\n        error => {\r\n            // Because both initiator and responder are simultaneously\r\n            // terminating their JingleSessions in case of the 'to JVB switch'\r\n            // when 3rd participant joins, both will dispose their sessions and\r\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\r\n            // want to log this as an error since it's expected behaviour.\r\n            //\r\n            // We want them both to terminate, because in case of initiator's\r\n            // crash the responder would stay in P2P mode until ICE fails which\r\n            // could take up to 20 seconds.\r\n            //\r\n            // NOTE lack of 'reason' is considered as graceful session terminate\r\n            // where both initiator and responder terminate their sessions\r\n            // simultaneously.\r\n            if (reason) {\r\n                logger.error(\r\n                    'An error occurred while trying to terminate'\r\n                        + ' P2P Jingle session', error);\r\n            }\r\n        }, {\r\n            reason: reason ? reason : 'success',\r\n            reasonDescription: reasonDescription\r\n                ? reasonDescription : 'Turing off P2P session',\r\n            sendSessionTerminate: this.room\r\n                && this.getParticipantById(\r\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\r\n        });\r\n\r\n    this.p2pJingleSession = null;\r\n\r\n    // Update P2P status and other affected events/states\r\n    this._setP2PStatus(false);\r\n\r\n    if (wasP2PEstablished) {\r\n        // Add back remote JVB tracks\r\n        if (this.jvbJingleSession) {\r\n            this._addRemoteJVBTracks();\r\n        } else {\r\n            logger.info('Not adding remote JVB tracks - no session yet');\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Checks whether or not the conference is currently in the peer to peer mode.\r\n * Being in peer to peer mode means that the direct connection has been\r\n * established and the P2P connection is being used for media transmission.\r\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\r\n */\r\nJitsiConference.prototype.isP2PActive = function() {\r\n    return this.p2p;\r\n};\r\n\r\n/**\r\n * Returns the current ICE state of the P2P connection.\r\n * NOTE: method is used by the jitsi-meet-torture tests.\r\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\r\n * no P2P connection.\r\n */\r\nJitsiConference.prototype.getP2PConnectionState = function() {\r\n    if (this.isP2PActive()) {\r\n        return this.p2pJingleSession.peerconnection.getConnectionState();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n\r\n/**\r\n * Manually starts new P2P session (should be used only in the tests).\r\n */\r\nJitsiConference.prototype.startP2PSession = function() {\r\n    const peers = this.getParticipants();\r\n\r\n    // Start peer to peer session\r\n    if (peers.length === 1) {\r\n        const peerJid = peers[0].getJid();\r\n\r\n        this._startP2PSession(peerJid);\r\n    } else {\r\n        throw new Error(\r\n            'There must be exactly 1 participant to start the P2P session !');\r\n    }\r\n};\r\n\r\n/**\r\n * Manually stops the current P2P session (should be used only in the tests)\r\n */\r\nJitsiConference.prototype.stopP2PSession = function() {\r\n    this._stopP2PSession();\r\n};\r\n\r\n/**\r\n * Get a summary of how long current participants have been the dominant speaker\r\n * @returns {object}\r\n */\r\nJitsiConference.prototype.getSpeakerStats = function() {\r\n    return this.speakerStatsCollector.getStats();\r\n};\r\n\r\n/**\r\n * Sets the maximum video size the local participant should receive from remote\r\n * participants.\r\n *\r\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\r\n * this receiver is willing to receive.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\r\n    this.qualityController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\r\n};\r\n\r\n/**\r\n * Sets the maximum video size the local participant should send to remote\r\n * participants.\r\n * @param {number} maxFrameHeight - The user preferred max frame height.\r\n * @returns {Promise} promise that will be resolved when the operation is\r\n * successful and rejected otherwise.\r\n */\r\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\r\n    return this.qualityController.setPreferredSendMaxFrameHeight(maxFrameHeight);\r\n};\r\n\r\n/**\r\n * Creates a video SIP GW session and returns it if service is enabled. Before\r\n * creating a session one need to check whether video SIP GW service is\r\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\r\n * if there are available nodes to serve this request, after creating the\r\n * session those nodes can be taken and the request about using the\r\n * created session can fail.\r\n *\r\n * @param {string} sipAddress - The sip address to be used.\r\n * @param {string} displayName - The display name to be used for this session.\r\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\r\n * initialised and there is no room.\r\n */\r\nJitsiConference.prototype.createVideoSIPGWSession\r\n    = function(sipAddress, displayName) {\r\n        if (!this.room) {\r\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\r\n        }\r\n\r\n        return this.videoSIPGWHandler\r\n            .createVideoSIPGWSession(sipAddress, displayName);\r\n    };\r\n\r\n/**\r\n * Sends a conference.join analytics event.\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\r\n    const meetingId = this.getMeetingUniqueId();\r\n\r\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\r\n        return;\r\n    }\r\n\r\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\r\n        meetingId,\r\n        participantId: `${meetingId}.${this._statsCurrentId}`\r\n    }));\r\n    this._conferenceJoinAnalyticsEventSent = Date.now();\r\n};\r\n\r\n/**\r\n * Sends conference.left analytics event.\r\n * @private\r\n */\r\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\r\n    const meetingId = this.getMeetingUniqueId();\r\n\r\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\r\n\r\n        return;\r\n    }\r\n\r\n    Statistics.sendAnalytics(createConferenceEvent('left', {\r\n        meetingId,\r\n        participantId: `${meetingId}.${this._statsCurrentId}`,\r\n        stats: {\r\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\r\n            perf: this.getPerformanceStats()\r\n        }\r\n    }));\r\n};\r\n\r\n/**\r\n * Restarts all active media sessions.\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype._restartMediaSessions = function() {\r\n    if (this.p2pJingleSession) {\r\n        this.stopP2PSession();\r\n    }\r\n\r\n    if (this.jvbJingleSession) {\r\n        this.jvbJingleSession.terminate(\r\n            null /* success callback => we don't care */,\r\n            error => {\r\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\r\n            }, {\r\n                reason: 'success',\r\n                reasonDescription: 'restart required',\r\n                requestRestart: true,\r\n                sendSessionTerminate: true\r\n            });\r\n    }\r\n\r\n    this._maybeStartOrStopP2P(false);\r\n};\r\n\r\n/**\r\n * Returns whether End-To-End encryption is enabled.\r\n *\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype._isE2EEEnabled = function() {\r\n    return this._e2eEncryption && this._e2eEncryption.isEnabled();\r\n};\r\n\r\n/**\r\n * Returns whether End-To-End encryption is supported. Note that not all participants\r\n * in the conference may support it.\r\n *\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype.isE2EESupported = function() {\r\n    return E2EEncryption.isSupported(this.options.config);\r\n};\r\n\r\n/**\r\n * Enables / disables End-to-End encryption.\r\n *\r\n * @param {boolean} enabled whether to enable E2EE or not.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.toggleE2EE = function(enabled) {\r\n    if (!this.isE2EESupported()) {\r\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\r\n\r\n        return;\r\n    }\r\n\r\n    this._e2eEncryption.setEnabled(enabled);\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\r\n *\r\n * @returns {boolean} whether lobby is supported in the backend.\r\n */\r\nJitsiConference.prototype.isLobbySupported = function() {\r\n    return Boolean(this.room && this.room.getLobby().isSupported());\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if the room has members only enabled.\r\n *\r\n * @returns {boolean} whether conference room is members only.\r\n */\r\nJitsiConference.prototype.isMembersOnly = function() {\r\n    return Boolean(this.room && this.room.membersOnlyEnabled);\r\n};\r\n\r\n/**\r\n * Enables lobby by moderators\r\n *\r\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\r\n */\r\nJitsiConference.prototype.enableLobby = function() {\r\n    if (this.room && this.isModerator()) {\r\n        return this.room.getLobby().enable();\r\n    }\r\n\r\n    return Promise.reject(\r\n        new Error('The conference not started or user is not moderator'));\r\n};\r\n\r\n/**\r\n * Disabled lobby by moderators\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.disableLobby = function() {\r\n    if (this.room && this.isModerator()) {\r\n        this.room.getLobby().disable();\r\n    }\r\n};\r\n\r\n/**\r\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\r\n *\r\n * @param {string} displayName Display name should be set to show it to moderators.\r\n * @param {string} email Optional email is used to present avatar to the moderator.\r\n * @returns {Promise<never>}\r\n */\r\nJitsiConference.prototype.joinLobby = function(displayName, email) {\r\n    if (this.room) {\r\n        return this.room.getLobby().join(displayName, email);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference not started'));\r\n};\r\n\r\n/**\r\n * Denies an occupant in the lobby room access to the conference.\r\n * @param {string} id The participant id.\r\n */\r\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\r\n    if (this.room) {\r\n        this.room.getLobby().denyAccess(id);\r\n    }\r\n};\r\n\r\n/**\r\n * Approves the request to join the conference to a participant waiting in the lobby.\r\n *\r\n * @param {string} id The participant id.\r\n */\r\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\r\n    if (this.room) {\r\n        this.room.getLobby().approveAccess(id);\r\n    }\r\n};\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport RTCEvents from './service/RTC/RTCEvents';\r\nimport VideoType from './service/RTC/VideoType';\r\nimport AuthenticationEvents\r\n    from './service/authentication/AuthenticationEvents';\r\nimport {\r\n    ACTION_JINGLE_SA_TIMEOUT,\r\n    createBridgeDownEvent,\r\n    createConnectionStageReachedEvent,\r\n    createFocusLeftEvent,\r\n    createJingleEvent,\r\n    createRemotelyMutedEvent\r\n} from './service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from './service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Setups all event listeners related to conference\r\n * @param conference {JitsiConference} the conference\r\n */\r\nexport default function JitsiConferenceEventManager(conference) {\r\n    this.conference = conference;\r\n    this.xmppListeners = {};\r\n\r\n    // Listeners related to the conference only\r\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\r\n        track => {\r\n            if (!track.isLocal() || !conference.statistics) {\r\n                return;\r\n            }\r\n            const session\r\n                = track.isP2P\r\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\r\n\r\n            // TPC will be null, before the conference starts, but the event\r\n            // still should be queued\r\n            const tpc = (session && session.peerconnection) || null;\r\n\r\n            conference.statistics.sendMuteEvent(\r\n                tpc,\r\n                track.isMuted(),\r\n                track.getType());\r\n        });\r\n}\r\n\r\n/**\r\n * Setups event listeners related to conference.chatRoom\r\n */\r\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\r\n    const conference = this.conference;\r\n    const chatRoom = conference.room;\r\n\r\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\r\n        this.conference.eventEmitter);\r\n\r\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\r\n        if (!jingleSession.isP2P) {\r\n            // If using DataChannel as bridge channel, it must be closed\r\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\r\n            // event for the channel established with the new bridge.\r\n            // TODO: This may be bypassed when using a WebSocket as bridge\r\n            // channel.\r\n            conference.rtc.closeBridgeChannel();\r\n        }\r\n\r\n        // else: there are no DataChannels in P2P session (at least for now)\r\n    });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.ICE_RESTART_SUCCESS,\r\n        (jingleSession, offerIq) => {\r\n            // The JVB data chanel needs to be reopened in case the conference\r\n            // has been moved to a new bridge.\r\n            !jingleSession.isP2P\r\n                && conference._setBridgeChannel(\r\n                    offerIq, jingleSession.peerconnection);\r\n        });\r\n\r\n\r\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\r\n        actor => {\r\n            // TODO: Add a way to differentiate between commands which caused\r\n            // us to mute and those that did not change our state (i.e. we were\r\n            // already muted).\r\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\r\n\r\n            conference.mutedByFocusActor = actor;\r\n\r\n            // set isMutedByFocus when setAudioMute Promise ends\r\n            conference.rtc.setAudioMute(true).then(\r\n                () => {\r\n                    conference.isMutedByFocus = true;\r\n                    conference.mutedByFocusActor = null;\r\n                })\r\n                .catch(\r\n                    error => {\r\n                        conference.mutedByFocusActor = null;\r\n                        logger.warn(\r\n                            'Error while audio muting due to focus request', error);\r\n                    });\r\n        }\r\n    );\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\r\n        JitsiConferenceEvents.SUBJECT_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\r\n        JitsiConferenceEvents.CONFERENCE_JOINED);\r\n\r\n    // send some analytics events\r\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\r\n        () => {\r\n            this.conference.isJvbConnectionInterrupted = false;\r\n\r\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\r\n                const event\r\n                    = createConnectionStageReachedEvent(\r\n                        `conference_${key}`,\r\n                        { value: chatRoom.connectionTimes[key] });\r\n\r\n                Statistics.sendAnalytics(event);\r\n            });\r\n\r\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\r\n                const event\r\n                    = createConnectionStageReachedEvent(\r\n                        `xmpp_${key}`,\r\n                        { value: chatRoom.xmpp.connectionTimes[key] });\r\n\r\n                Statistics.sendAnalytics(event);\r\n            });\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\r\n        if (!session.isP2P) {\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n        }\r\n    });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONNECTION_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONNECTION_ERROR);\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\r\n    chatRoom.addListener(\r\n        XMPPEvents.BRIDGE_DOWN,\r\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.RESERVATION_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\r\n\r\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\r\n        jingleSession => {\r\n            conference._onIceConnectionFailed(jingleSession);\r\n        });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\r\n        JitsiConferenceEvents.CONFERENCE_ERROR,\r\n        JitsiConferenceErrors.CHAT_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\r\n\r\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\r\n        () => {\r\n            Statistics.sendAnalytics(createFocusLeftEvent());\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.FOCUS_LEFT);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\r\n        jingleSession => {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createJingleEvent(\r\n                    ACTION_JINGLE_SA_TIMEOUT,\r\n                    { p2p: jingleSession.isP2P }));\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\r\n        (session, jid) => {\r\n\r\n            if (jid) {\r\n                const participant = conference.getParticipantById(\r\n                    Strophe.getResourceFromJid(jid));\r\n\r\n                if (session.getStatus() === 'off') {\r\n                    session.setTerminator(participant);\r\n                } else if (session.getStatus() === 'on') {\r\n                    session.setInitiator(participant);\r\n                }\r\n            }\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\r\n                session);\r\n        });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\r\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\r\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(\r\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\r\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\r\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\r\n\r\n    chatRoom.setParticipantPropertyListener((node, from) => {\r\n        const participant = conference.getParticipantById(from);\r\n\r\n        if (!participant) {\r\n            return;\r\n        }\r\n\r\n        participant.setProperty(\r\n            node.tagName.substring('jitsi_participant_'.length),\r\n            node.value);\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.KICKED,\r\n        conference.onMemberKicked.bind(conference));\r\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\r\n        conference.onSuspendDetected.bind(conference));\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\r\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\r\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\r\n\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\r\n        conference.onMemberJoined.bind(conference));\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\r\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\r\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\r\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\r\n        conference._onMemberBotTypeChanged.bind(conference));\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\r\n        conference.onMemberLeft.bind(conference));\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\r\n        JitsiConferenceEvents.CONFERENCE_LEFT);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\r\n\r\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\r\n        conference.onDisplayNameChanged.bind(conference));\r\n\r\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\r\n        conference.onLocalRoleChanged(role);\r\n\r\n        // log all events for the recorder operated by the moderator\r\n        if (conference.statistics && conference.isModerator()) {\r\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\r\n                recorderSession => {\r\n                    const logObject = {\r\n                        error: recorderSession.getError(),\r\n                        id: 'recorder_status',\r\n                        status: recorderSession.getStatus()\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n                });\r\n        }\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\r\n        conference.onUserRoleChanged.bind(conference));\r\n\r\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\r\n        (authEnabled, authIdentity) => {\r\n            conference.authEnabled = authEnabled;\r\n            conference.authIdentity = authIdentity;\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\r\n                authIdentity);\r\n        });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.MESSAGE_RECEIVED,\r\n\r\n        // eslint-disable-next-line max-params\r\n        (jid, displayName, txt, myJid, ts) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\r\n                id, txt, ts, displayName);\r\n        });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\r\n\r\n        // eslint-disable-next-line max-params\r\n        (jid, displayName, txt, myJid, ts) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\r\n                id, txt, ts);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\r\n        (jid, status) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n            const participant = conference.getParticipantById(id);\r\n\r\n            if (!participant || participant._status === status) {\r\n                return;\r\n            }\r\n            participant._status = status;\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\r\n        (from, payload) => {\r\n            const id = Strophe.getResourceFromJid(from);\r\n            const participant = conference.getParticipantById(id);\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n                    participant, payload);\r\n            } else {\r\n                logger.warn(\r\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\r\n                    + `participant: ${from}`,\r\n                    payload);\r\n            }\r\n        });\r\n\r\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\r\n        let isModerator = false;\r\n\r\n        if (conference.myUserId() === from && conference.isModerator()) {\r\n            isModerator = true;\r\n        } else {\r\n            const participant = conference.getParticipantById(from);\r\n\r\n            if (participant && participant.isModerator()) {\r\n                isModerator = true;\r\n            }\r\n        }\r\n\r\n        if (!isModerator) {\r\n            return;\r\n        }\r\n\r\n        const startAudioMuted = data.attributes.audio === 'true';\r\n        const startVideoMuted = data.attributes.video === 'true';\r\n\r\n        let updated = false;\r\n\r\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\r\n            conference.startMutedPolicy.audio = startAudioMuted;\r\n            updated = true;\r\n        }\r\n\r\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\r\n            conference.startMutedPolicy.video = startVideoMuted;\r\n            updated = true;\r\n        }\r\n\r\n        if (updated) {\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\r\n                conference.startMutedPolicy\r\n            );\r\n        }\r\n    });\r\n\r\n    if (conference.statistics) {\r\n        // FIXME ICE related events should end up in RTCEvents eventually\r\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\r\n            session => {\r\n                conference.statistics.sendIceConnectionFailedEvent(\r\n                    session.peerconnection);\r\n            });\r\n\r\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\r\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\r\n            (e, pc) => {\r\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Setups event listeners related to conference.rtc\r\n */\r\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\r\n    const conference = this.conference;\r\n    const rtc = conference.rtc;\r\n\r\n    rtc.addListener(\r\n        RTCEvents.REMOTE_TRACK_ADDED,\r\n        conference.onRemoteTrackAdded.bind(conference));\r\n\r\n    rtc.addListener(\r\n        RTCEvents.REMOTE_TRACK_REMOVED,\r\n        conference.onRemoteTrackRemoved.bind(conference));\r\n\r\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n        id => {\r\n            if (conference.lastDominantSpeaker !== id && conference.room) {\r\n                conference.lastDominantSpeaker = id;\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\r\n\r\n                if (conference.statistics && conference.myUserId() === id) {\r\n                    // We are the new dominant speaker.\r\n                    conference.statistics.sendDominantSpeakerEvent(\r\n                        conference.room.roomjid);\r\n                }\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\r\n        const now = window.performance.now();\r\n        const key = 'data.channel.opened';\r\n\r\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n        logger.log(`(TIME) ${key}:\\t`, now);\r\n        conference.room.connectionTimes[key] = now;\r\n        Statistics.sendAnalytics(\r\n            createConnectionStageReachedEvent(key, { value: now }));\r\n\r\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\r\n    });\r\n\r\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n        (from, payload) => {\r\n            const participant = conference.getParticipantById(from);\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n                    participant, payload);\r\n            } else {\r\n                logger.warn(\r\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\r\n                        + `participant: ${from}`,\r\n                    payload);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\r\n        (tpc, ufrag) => {\r\n            if (!tpc.isP2P) {\r\n                Statistics.sendLog(\r\n                    JSON.stringify({\r\n                        id: 'local_ufrag',\r\n                        value: ufrag\r\n                    }));\r\n            }\r\n        });\r\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\r\n        (tpc, ufrag) => {\r\n            if (!tpc.isP2P) {\r\n                Statistics.sendLog(\r\n                    JSON.stringify({\r\n                        id: 'remote_ufrag',\r\n                        value: ufrag\r\n                    }));\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendCreateOfferFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\r\n        (track, ssrc) => {\r\n            // when starting screen sharing, the track is created and when\r\n            // we do set local description and we process the ssrc we\r\n            // will be notified for it and we will report it with the event\r\n            // for screen sharing\r\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\r\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * Removes event listeners related to conference.xmpp\r\n */\r\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    conference.xmpp.caps.removeListener(\r\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\r\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\r\n\r\n    Object.keys(this.xmppListeners).forEach(eventName => {\r\n        conference.xmpp.removeListener(\r\n            eventName,\r\n            this.xmppListeners[eventName]);\r\n    });\r\n    this.xmppListeners = {};\r\n};\r\n\r\n\r\n/**\r\n * Setups event listeners related to conference.xmpp\r\n */\r\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    const featuresChangedListener = from => {\r\n        const participant\r\n            = conference.getParticipantById(\r\n            Strophe.getResourceFromJid(from));\r\n\r\n        if (participant) {\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\r\n                participant);\r\n        }\r\n    };\r\n\r\n    conference.xmpp.caps.addListener(\r\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n        featuresChangedListener);\r\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\r\n        = featuresChangedListener;\r\n\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_INCOMING,\r\n        conference.onIncomingCall.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_ACCEPTED,\r\n        conference.onCallAccepted.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.TRANSPORT_INFO,\r\n        conference.onTransportInfo.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_ENDED,\r\n        conference.onCallEnded.bind(conference));\r\n\r\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\r\n        (audioMuted, videoMuted) => {\r\n            if (conference.options.config.ignoreStartMuted) {\r\n                return;\r\n            }\r\n\r\n            conference.startAudioMuted = audioMuted;\r\n            conference.startVideoMuted = videoMuted;\r\n\r\n            // mute existing local tracks because this is initial mute from\r\n            // Jicofo\r\n            conference.getLocalTracks().forEach(track => {\r\n                switch (track.getType()) {\r\n                case MediaType.AUDIO:\r\n                    conference.startAudioMuted && track.mute();\r\n                    break;\r\n                case MediaType.VIDEO:\r\n                    conference.startVideoMuted && track.mute();\r\n                    break;\r\n                }\r\n            });\r\n\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\r\n        });\r\n\r\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\r\n        createdTimestamp => {\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\r\n        });\r\n};\r\n\r\n/**\r\n * Add XMPP listener and save its reference for remove on leave conference.\r\n */\r\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\r\n        eventName, listener) {\r\n    this.xmppListeners[eventName] = listener;\r\n    this.conference.xmpp.addListener(eventName, listener);\r\n};\r\n\r\n/**\r\n * Setups event listeners related to conference.statistics\r\n */\r\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    if (!conference.statistics) {\r\n        return;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\r\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\r\n    });\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    // Forward the \"before stats disposed\" event\r\n    conference.statistics.addBeforeDisposedListener(() => {\r\n        conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\r\n    });\r\n\r\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\r\n    if (!conference.options.config.startSilent) {\r\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\r\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\r\n                const ssrc = tpc.getLocalSSRC(track);\r\n\r\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\r\n                    return;\r\n                }\r\n\r\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\r\n            });\r\n        });\r\n    }\r\n};\r\n","import { BrowserDetection } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// TODO: Move this code to js-utils.\r\n\r\n// NOTE: Now we are extending BrowserDetection in order to preserve\r\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\r\n// and BrowserDetection as separate objects in future.\r\n\r\n/**\r\n * Implements browser capabilities for lib-jitsi-meet.\r\n */\r\nexport default class BrowserCapabilities extends BrowserDetection {\r\n    /**\r\n     * Creates new BrowserCapabilities instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n        logger.info(\r\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\r\n    }\r\n\r\n    /**\r\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\r\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\r\n     * off the camera device).\r\n     * @return {boolean} <tt>true</tt> if the current browser supports this\r\n     * strategy or <tt>false</tt> otherwise.\r\n     */\r\n    doesVideoMuteByStreamRemove() {\r\n        return this.isChromiumBased() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the current browser support peer to peer connections\r\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\r\n     * otherwise.\r\n     */\r\n    supportsP2P() {\r\n        return !this.usesUnifiedPlan();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser is Chromium based, that is, it's either\r\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\r\n     * Chrome.\r\n     *\r\n     * This includes the following browsers:\r\n     * - Chrome and Chromium\r\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\r\n     *   such as Brave and Vivaldi\r\n     * - Browsers which are NOT Chrome but use it as their engine, and have\r\n     *   custom detection code: Opera, Electron and NW.JS\r\n     */\r\n    isChromiumBased() {\r\n        return this.isChrome()\r\n            || this.isElectron()\r\n            || this.isNWJS()\r\n            || this.isOpera();\r\n    }\r\n\r\n    /**\r\n     * Checks whether current running context is a Trusted Web Application.\r\n     *\r\n     * @returns {boolean} Whether the current context is a TWA.\r\n     */\r\n    isTwa() {\r\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser is supported.\r\n     *\r\n     * @returns {boolean} true if the browser is supported, false otherwise.\r\n     */\r\n    isSupported() {\r\n        return this.isChromiumBased()\r\n            || this.isFirefox()\r\n            || this.isReactNative()\r\n            || (this.isSafari() && !this.isVersionLessThan('12.1'));\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current environment needs a user interaction\r\n     * with the page before any unmute can occur.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isUserInteractionRequiredForUnmute() {\r\n        return this.isFirefox() && this.isVersionLessThan('68');\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\r\n     * user's connection is interrupted and the video stops playback.\r\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\r\n     * otherwise.\r\n     */\r\n    supportsVideoMuteOnConnInterrupted() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser reports upload and download bandwidth\r\n     * statistics.\r\n     * @return {boolean}\r\n     */\r\n    supportsBandwidthStatistics() {\r\n        // FIXME bandwidth stats are currently not implemented for FF on our\r\n        // side, but not sure if not possible ?\r\n        return !this.isFirefox() && !this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports setting codec preferences on the transceiver.\r\n     * @returns {boolean}\r\n     */\r\n    supportsCodecPreferences() {\r\n        return this.usesUnifiedPlan()\r\n            && typeof window.RTCRtpTransceiver !== 'undefined'\r\n            && Object.keys(window.RTCRtpTransceiver.prototype).indexOf('setCodecPreferences') > -1\r\n            && Object.keys(RTCRtpSender.prototype).indexOf('getCapabilities') > -1\r\n\r\n            // this is not working on Safari because of the following bug\r\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\r\n            && !this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser support the device change event.\r\n     * @return {boolean}\r\n     */\r\n    supportsDeviceChangeEvent() {\r\n        return navigator.mediaDevices\r\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\r\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports RTT statistics for srflx local\r\n     * candidates through the legacy getStats() API.\r\n     */\r\n    supportsLocalCandidateRttStatistics() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports the Long Tasks API that lets us observe\r\n     * performance measurement events and be notified of tasks that take longer than\r\n     * 50ms to execute on the main thread.\r\n     */\r\n    supportsPerformanceObserver() {\r\n        return typeof window.PerformanceObserver !== 'undefined'\r\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports audio level stats on the receivers.\r\n     */\r\n    supportsReceiverStats() {\r\n        return typeof window.RTCRtpReceiver !== 'undefined'\r\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser reports round trip time statistics for\r\n     * the ICE candidate pair.\r\n     * @return {boolean}\r\n     */\r\n    supportsRTTStatistics() {\r\n        // Firefox does not seem to report RTT for ICE candidate pair:\r\n        // eslint-disable-next-line max-len\r\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\r\n        // It does report mozRTT for RTP streams, but at the time of this\r\n        // writing it's value does not make sense most of the time\r\n        // (is reported as 1):\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\r\n        // For Chrome and others we rely on 'googRtt'.\r\n        return !this.isFirefox();\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser can support capturing video,\r\n     * be it camera or desktop, and displaying received video.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsVideo() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses plan B.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesPlanB() {\r\n        return !this.usesUnifiedPlan();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses SDP munging for turning on simulcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesSdpMungingForSimulcast() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses unified plan.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesUnifiedPlan() {\r\n        if (this.isFirefox()) {\r\n            return true;\r\n        }\r\n\r\n        if (this.isSafari() && typeof window.RTCRtpTransceiver !== 'undefined') {\r\n            // eslint-disable-next-line max-len\r\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\r\n            // eslint-disable-next-line no-undef\r\n            return Object.keys(RTCRtpTransceiver.prototype)\r\n                   .indexOf('currentDirection') > -1;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser should be using the new\r\n     * getUserMedia flow, which utilizes the adapter shim. This method should\r\n     * be temporary and used while migrating all browsers to use adapter and\r\n     * the new getUserMedia.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesNewGumFlow() {\r\n        const REQUIRED_CHROME_VERSION = 61;\r\n\r\n        if (this.isChrome()) {\r\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\r\n        }\r\n\r\n        if (this.isFirefox() || this.isSafari()) {\r\n            return true;\r\n        }\r\n\r\n        if (this.isChromiumBased()) {\r\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\r\n     * getUserMedia flow and Edge.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesAdapter() {\r\n        return this.usesNewGumFlow();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\r\n     * to the bridge instead of the ssrcs.\r\n     */\r\n    usesRidsForSimulcast() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports getDisplayMedia.\r\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\r\n     */\r\n    supportsGetDisplayMedia() {\r\n        return typeof navigator.getDisplayMedia !== 'undefined'\r\n            || (typeof navigator.mediaDevices !== 'undefined'\r\n                && typeof navigator.mediaDevices.getDisplayMedia\r\n                    !== 'undefined');\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports insertable streams, needed for E2EE.\r\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\r\n     */\r\n    supportsInsertableStreams() {\r\n        if (!(typeof window.RTCRtpSender !== 'undefined'\r\n            && (window.RTCRtpSender.prototype.createEncodedStreams\r\n                || window.RTCRtpSender.prototype.createEncodedVideoStreams))) {\r\n            return false;\r\n        }\r\n\r\n        // Feature-detect transferable streams which we need to operate in a worker.\r\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\r\n        const stream = new ReadableStream();\r\n\r\n        try {\r\n            window.postMessage(stream, '*', [ stream ]);\r\n\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether the browser supports the RED format for audio.\r\n     */\r\n    supportsAudioRed() {\r\n        return Boolean(window.RTCRtpSender\r\n            && window.RTCRtpSender.getCapabilities\r\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\r\n            && window.RTCRtpReceiver\r\n            && window.RTCRtpReceiver.getCapabilities\r\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\r\n     * https://webrtc.org/web-apis/chrome/unified-plan/\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsSdpSemantics() {\r\n        return this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\r\n    }\r\n\r\n    /**\r\n     * Returns the version of a Chromium based browser.\r\n     *\r\n     * @returns {Number}\r\n     */\r\n    _getChromiumBasedVersion() {\r\n        if (this.isChromiumBased()) {\r\n            // NW.JS doesn't expose the Chrome version in the UA string.\r\n            if (this.isNWJS()) {\r\n                // eslint-disable-next-line no-undef\r\n                return Number.parseInt(process.versions.chromium, 10);\r\n            }\r\n\r\n            // Here we process all browsers which use the Chrome engine but\r\n            // don't necessarily identify as Chrome. We cannot use the version\r\n            // comparing functions because the Electron, Opera and NW.JS\r\n            // versions are inconsequential here, as we need to know the actual\r\n            // Chrome engine version.\r\n            const ua = navigator.userAgent;\r\n\r\n            if (ua.match(/Chrome/)) {\r\n                const version\r\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\r\n\r\n                return version;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    TYPE_OPERATIONAL,\r\n    TYPE_PAGE,\r\n    TYPE_TRACK,\r\n    TYPE_UI\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\n\r\nconst MAX_CACHE_SIZE = 100;\r\n\r\n// eslist-disable-line no-undef\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This class provides an API to lib-jitsi-meet and its users for sending\r\n * analytics events. It serves as a bridge to different backend implementations\r\n * (\"analytics handlers\") and a cache for events attempted to be sent before\r\n * the analytics handlers were enabled.\r\n *\r\n * The API is designed to be an easy replacement for the previous version of\r\n * this adapter, and is meant to be extended with more convenience methods.\r\n *\r\n *\r\n * The API calls are translated to objects with the following structure, which\r\n * are then passed to the sendEvent(event) function of the underlying handlers:\r\n *\r\n * {\r\n *    type,\r\n *\r\n *    action,\r\n *    actionSubject,\r\n *    actionSubjectId,\r\n *    attributes,\r\n *    categories,\r\n *    containerId,\r\n *    containerType,\r\n *    name,\r\n *    objectId,\r\n *    objectType,\r\n *    source,\r\n *    tags\r\n * }\r\n *\r\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\r\n * other properties are considered required according to the type.\r\n *\r\n * For events with type 'page', the required properties are: name.\r\n *\r\n * For events with type 'operational' and 'ui', the required properties are:\r\n * action, actionSubject, source\r\n *\r\n * For events with type 'page', the required properties are:\r\n * action, actionSubject, source, containerType, containerId, objectType,\r\n * objectId\r\n */\r\nclass AnalyticsAdapter {\r\n    /**\r\n     * Creates new AnalyticsAdapter instance.\r\n     */\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Reset the state to the initial one.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        /**\r\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\r\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\r\n         * any more events, and it can not be re-enabled.\r\n         * @type {boolean}\r\n         */\r\n        this.disposed = false;\r\n\r\n        /**\r\n         * The set of handlers to which events will be sent.\r\n         * @type {Set<any>}\r\n         */\r\n        this.analyticsHandlers = new Set();\r\n\r\n        /**\r\n         * The cache of events which are not sent yet. The cache is enabled\r\n         * while this field is truthy, and disabled otherwise.\r\n         * @type {Array}\r\n         */\r\n        this.cache = [];\r\n\r\n        /**\r\n         * Map of properties that will be added to every event. Note that the\r\n         * keys will be prefixed with \"permanent.\".\r\n         */\r\n        this.permanentProperties = {};\r\n\r\n        /**\r\n         * The name of the conference that this AnalyticsAdapter is associated\r\n         * with.\r\n         * @type {null}\r\n         */\r\n        this.conferenceName = '';\r\n\r\n        this.addPermanentProperties({\r\n            'user_agent': navigator.userAgent,\r\n            'browser_name': browser.getName()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose analytics. Clears all handlers.\r\n     */\r\n    dispose() {\r\n        logger.warn('Disposing of analytics adapter.');\r\n\r\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\r\n            this.analyticsHandlers.forEach(handler => {\r\n                if (typeof handler.dispose === 'function') {\r\n                    handler.dispose();\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setAnalyticsHandlers([]);\r\n        this.disposed = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the handlers that are going to be used to send analytics. Sends any\r\n     * cached events.\r\n     * @param {Array} handlers the handlers\r\n     */\r\n    setAnalyticsHandlers(handlers) {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        this.analyticsHandlers = new Set(handlers);\r\n\r\n        this._setUserProperties();\r\n\r\n        // Note that we disable the cache even if the set of handlers is empty.\r\n        const cache = this.cache;\r\n\r\n        this.cache = null;\r\n        if (cache) {\r\n            cache.forEach(event => this._sendEvent(event));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the user properties to the analytics handlers.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _setUserProperties() {\r\n        this.analyticsHandlers.forEach(handler => {\r\n            try {\r\n                handler.setUserProperties(this.permanentProperties);\r\n            } catch (error) {\r\n                logger.warn('Error in setUserProperties method of one of the '\r\n                    + `analytics handlers: ${error}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\r\n     * Permanent properties will be added as \"attributes\" to events sent to\r\n     * the underlying \"analytics handlers\", and their keys will be prefixed\r\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\r\n     * result in {\"permanent_key\": \"value\"} object to be added to the\r\n     * \"attributes\" field of events.\r\n     *\r\n     * @param {Object} properties the properties to add\r\n     */\r\n    addPermanentProperties(properties) {\r\n        this.permanentProperties = {\r\n            ...this.permanentProperties,\r\n            ...properties\r\n        };\r\n\r\n        this._setUserProperties();\r\n    }\r\n\r\n    /**\r\n     * Sets the name of the conference that this AnalyticsAdapter is associated\r\n     * with.\r\n     * @param name the name to set.\r\n     */\r\n    setConferenceName(name) {\r\n        this.conferenceName = name;\r\n        this.addPermanentProperties({ 'conference_name': name });\r\n    }\r\n\r\n    /**\r\n     * Sends an event with a given name and given properties. The first\r\n     * parameter is either a string or an object. If it is a string, it is used\r\n     * as the event name and the second parameter is used at the attributes to\r\n     * attach to the event. If it is an object, it represents the whole event,\r\n     * including any desired attributes, and the second parameter is ignored.\r\n     *\r\n     * @param {String|Object} eventName either a string to be used as the name\r\n     * of the event, or an event object. If an event object is passed, the\r\n     * properties parameters is ignored.\r\n     * @param {Object} properties the properties/attributes to attach to the\r\n     * event, if eventName is a string.\r\n     */\r\n    sendEvent(eventName, properties = {}) {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        let event = null;\r\n\r\n        if (typeof eventName === 'string') {\r\n            event = {\r\n                type: TYPE_OPERATIONAL,\r\n                action: eventName,\r\n                actionSubject: eventName,\r\n                source: eventName,\r\n                attributes: properties\r\n            };\r\n        } else if (typeof eventName === 'object') {\r\n            event = eventName;\r\n        }\r\n\r\n        if (!this._verifyRequiredFields(event)) {\r\n            logger.error(\r\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Checks whether an event has all of the required fields set, and tries\r\n     * to fill in some of the missing fields with reasonable default values.\r\n     * Returns true if after this operation the event has all of the required\r\n     * fields set, and false otherwise (if some of the required fields were not\r\n     * set and the attempt to fill them in with a default failed).\r\n     *\r\n     * @param event the event object.\r\n     * @return {boolean} true if the event (after the call to this function)\r\n     * contains all of the required fields, and false otherwise.\r\n     * @private\r\n     */\r\n    _verifyRequiredFields(event) {\r\n        if (!event) {\r\n            return false;\r\n        }\r\n\r\n        if (!event.type) {\r\n            event.type = TYPE_OPERATIONAL;\r\n        }\r\n\r\n        const type = event.type;\r\n\r\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\r\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\r\n            logger.error(`Unknown event type: ${type}`);\r\n\r\n            return false;\r\n        }\r\n\r\n        if (type === TYPE_PAGE) {\r\n            return Boolean(event.name);\r\n        }\r\n\r\n        // Try to set some reasonable default values in case some of the\r\n        // parameters required by the handler API are missing.\r\n        event.action = event.action || event.name || event.actionSubject;\r\n        event.actionSubject = event.actionSubject || event.name || event.action;\r\n        event.source = event.source || event.name || event.action\r\n            || event.actionSubject;\r\n\r\n        if (!event.action || !event.actionSubject || !event.source) {\r\n            logger.error(\r\n                'Required field missing (action, actionSubject or source)');\r\n\r\n            return false;\r\n        }\r\n\r\n        // Track events have additional required fields.\r\n        if (type === TYPE_TRACK) {\r\n            event.objectType = event.objectType || 'generic-object-type';\r\n            event.containerType = event.containerType || 'conference';\r\n            if (event.containerType === 'conference' && !event.containerId) {\r\n                event.containerId = this.conferenceName;\r\n            }\r\n\r\n\r\n            if (!event.objectType || !event.objectId\r\n                || !event.containerType || !event.containerId) {\r\n                logger.error(\r\n                    'Required field missing (containerId, containerType, '\r\n                        + 'objectId or objectType)');\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Saves an event to the cache, if the cache is enabled.\r\n     * @param event the event to save.\r\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\r\n     * if the cache was disabled).\r\n     * @private\r\n     */\r\n    _maybeCacheEvent(event) {\r\n        if (this.cache) {\r\n            this.cache.push(event);\r\n\r\n            // We limit the size of the cache, in case the user fails to ever\r\n            // set the analytics handlers.\r\n            if (this.cache.length > MAX_CACHE_SIZE) {\r\n                this.cache.splice(0, 1);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param event\r\n     * @private\r\n     */\r\n    _sendEvent(event) {\r\n        if (this._maybeCacheEvent(event)) {\r\n            // The event was consumed by the cache.\r\n        } else {\r\n            this.analyticsHandlers.forEach(handler => {\r\n                try {\r\n                    handler.sendEvent(event);\r\n                } catch (e) {\r\n                    logger.warn(`Error sending analytics event: ${e}`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default new AnalyticsAdapter();\r\n","\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport { RunningAverage } from '../util/MathUtil';\r\n\r\nconst logger = getLogger(__filename);\r\nconst MILLI_SECONDS = 1000;\r\nconst SECONDS = 60;\r\n\r\n/**\r\n * This class creates an observer that monitors browser's performance measurement events\r\n * as they are recorded in the browser's performance timeline and computes an average and\r\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\r\n * longer than 50ms to execute on the main thread.\r\n */\r\nexport class PerformanceObserverStats {\r\n    /**\r\n     * Creates a new instance of Performance observer statistics.\r\n     *\r\n     * @param {*} emitter Event emitter for emitting stats periodically\r\n     * @param {*} statsInterval interval for calculating the stats\r\n     */\r\n    constructor(emitter, statsInterval) {\r\n        this.eventEmitter = emitter;\r\n        this.longTasks = 0;\r\n        this.maxDuration = 0;\r\n        this.performanceStatsInterval = statsInterval;\r\n        this.stats = new RunningAverage();\r\n    }\r\n\r\n    /**\r\n     * Obtains the average rate of long tasks observed per min and the\r\n     * duration of the longest task recorded by the observer.\r\n     * @returns {Object}\r\n     */\r\n    getLongTasksStats() {\r\n        return {\r\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\r\n            maxDurationMs: this.maxDuration\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Starts the performance observer by registering the callback function\r\n     * that calculates the performance statistics periodically.\r\n     * @returns {void}\r\n     */\r\n    startObserver() {\r\n        // Create a handler for when the long task event is fired.\r\n        this.longTaskEventHandler = list => {\r\n            const entries = list.getEntries();\r\n\r\n            for (const task of entries) {\r\n                this.longTasks++;\r\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\r\n            }\r\n        };\r\n\r\n        // Create an observer for monitoring long tasks.\r\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\r\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\r\n        this.observer.observe({ type: 'longtask',\r\n            buffered: true });\r\n        const startTime = Date.now();\r\n\r\n        // Calculate the average # of events/sec and emit a stats event.\r\n        this.longTasksIntervalId = setInterval(() => {\r\n            const now = Date.now();\r\n            const interval = this._lastTimeStamp\r\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\r\n                : (now - startTime) / MILLI_SECONDS;\r\n            const rate = this.longTasks / interval;\r\n\r\n            this.stats.addNext(rate);\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\r\n\r\n            // Reset the counter and start counting events again.\r\n            this.longTasks = 0;\r\n            this._lastTimeStamp = Date.now();\r\n        }, this.performanceStatsInterval);\r\n    }\r\n\r\n    /**\r\n     * Stops the performance observer.\r\n     * @returns {void}\r\n     */\r\n    stopObserver() {\r\n        this.observer && this.observer.disconnect();\r\n        this.longTaskEventHandler = null;\r\n        if (this.longTasksIntervalId) {\r\n            clearInterval(this.longTasksIntervalId);\r\n            this.longTasksIntervalId = null;\r\n        }\r\n    }\r\n}\r\n","import { browsers } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport browser from '../browser';\r\n\r\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\r\n * reported by RTCPeerConnection#getStats mapped by browser.\r\n */\r\nconst KEYS_BY_BROWSER_TYPE = {};\r\n\r\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\r\n    'ssrc': 'ssrc',\r\n    'packetsReceived': 'packetsReceived',\r\n    'packetsLost': 'packetsLost',\r\n    'packetsSent': 'packetsSent',\r\n    'bytesReceived': 'bytesReceived',\r\n    'bytesSent': 'bytesSent',\r\n    'framerateMean': 'framerateMean',\r\n    'ip': 'address',\r\n    'port': 'port',\r\n    'protocol': 'protocol'\r\n};\r\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\r\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\r\n    'sendBandwidth': 'googAvailableSendBandwidth',\r\n    'remoteAddress': 'googRemoteAddress',\r\n    'transportType': 'googTransportType',\r\n    'localAddress': 'googLocalAddress',\r\n    'activeConnection': 'googActiveConnection',\r\n    'ssrc': 'ssrc',\r\n    'packetsReceived': 'packetsReceived',\r\n    'packetsSent': 'packetsSent',\r\n    'packetsLost': 'packetsLost',\r\n    'bytesReceived': 'bytesReceived',\r\n    'bytesSent': 'bytesSent',\r\n    'googCodecName': 'googCodecName',\r\n    'googFrameHeightReceived': 'googFrameHeightReceived',\r\n    'googFrameWidthReceived': 'googFrameWidthReceived',\r\n    'googFrameHeightSent': 'googFrameHeightSent',\r\n    'googFrameWidthSent': 'googFrameWidthSent',\r\n    'googFrameRateReceived': 'googFrameRateReceived',\r\n    'googFrameRateSent': 'googFrameRateSent',\r\n    'audioInputLevel': 'audioInputLevel',\r\n    'audioOutputLevel': 'audioOutputLevel',\r\n    'currentRoundTripTime': 'googRtt',\r\n    'remoteCandidateType': 'googRemoteCandidateType',\r\n    'localCandidateType': 'googLocalCandidateType',\r\n    'ip': 'ip',\r\n    'port': 'port',\r\n    'protocol': 'protocol'\r\n};\r\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\n\r\n/**\r\n * Calculates packet lost percent using the number of lost packets and the\r\n * number of all packet.\r\n * @param lostPackets the number of lost packets\r\n * @param totalPackets the number of all packets.\r\n * @returns {number} packet loss percent\r\n */\r\nfunction calculatePacketLoss(lostPackets, totalPackets) {\r\n    if (!totalPackets || totalPackets <= 0\r\n            || !lostPackets || lostPackets <= 0) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.round((lostPackets / totalPackets) * 100);\r\n}\r\n\r\n/**\r\n * Holds \"statistics\" for a single SSRC.\r\n * @constructor\r\n */\r\nfunction SsrcStats() {\r\n    this.loss = {};\r\n    this.bitrate = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    this.resolution = {};\r\n    this.framerate = 0;\r\n    this.codec = '';\r\n}\r\n\r\n/**\r\n * Sets the \"loss\" object.\r\n * @param loss the value to set.\r\n */\r\nSsrcStats.prototype.setLoss = function(loss) {\r\n    this.loss = loss || {};\r\n};\r\n\r\n/**\r\n * Sets resolution that belong to the ssrc represented by this instance.\r\n * @param resolution new resolution value to be set.\r\n */\r\nSsrcStats.prototype.setResolution = function(resolution) {\r\n    this.resolution = resolution || {};\r\n};\r\n\r\n/**\r\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\r\n * the respective fields of the \"bitrate\" field of this object.\r\n * @param bitrate an object holding the values to add.\r\n */\r\nSsrcStats.prototype.addBitrate = function(bitrate) {\r\n    this.bitrate.download += bitrate.download;\r\n    this.bitrate.upload += bitrate.upload;\r\n};\r\n\r\n/**\r\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\r\n * represented by this instance.\r\n */\r\nSsrcStats.prototype.resetBitrate = function() {\r\n    this.bitrate.download = 0;\r\n    this.bitrate.upload = 0;\r\n};\r\n\r\n/**\r\n * Sets the \"framerate\".\r\n * @param framerate the value to set.\r\n */\r\nSsrcStats.prototype.setFramerate = function(framerate) {\r\n    this.framerate = framerate || 0;\r\n};\r\n\r\nSsrcStats.prototype.setCodec = function(codec) {\r\n    this.codec = codec || '';\r\n};\r\n\r\n/**\r\n *\r\n */\r\nfunction ConferenceStats() {\r\n\r\n    /**\r\n     * The bandwidth\r\n     * @type {{}}\r\n     */\r\n    this.bandwidth = {};\r\n\r\n    /**\r\n     * The bit rate\r\n     * @type {{}}\r\n     */\r\n    this.bitrate = {};\r\n\r\n    /**\r\n     * The packet loss rate\r\n     * @type {{}}\r\n     */\r\n    this.packetLoss = null;\r\n\r\n    /**\r\n     * Array with the transport information.\r\n     * @type {Array}\r\n     */\r\n    this.transport = [];\r\n}\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * <tt>StatsCollector</tt> registers for stats updates of given\r\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\r\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\r\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\r\n * instance as an event source.\r\n *\r\n * @param peerconnection WebRTC PeerConnection object.\r\n * @param audioLevelsInterval\r\n * @param statsInterval stats refresh interval given in ms.\r\n * @param eventEmitter\r\n * @constructor\r\n */\r\nexport default function StatsCollector(\r\n        peerconnection,\r\n        audioLevelsInterval,\r\n        statsInterval,\r\n        eventEmitter) {\r\n    // StatsCollector depends entirely on the format of the reports returned by\r\n    // RTCPeerConnection#getStats. Given that the value of\r\n    // browser#getName() is very unlikely to change at runtime, it\r\n    // makes sense to discover whether StatsCollector supports the executing\r\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\r\n    // needlessly check a \"static\" condition multiple times very very often and\r\n    // (2) the lack of support for the executing browser would be discovered and\r\n    // reported multiple times very very often too late in the execution in some\r\n    // totally unrelated callback.\r\n    /**\r\n     * The browser type supported by this StatsCollector. In other words, the\r\n     * type of the browser which initialized this StatsCollector\r\n     * instance.\r\n     * @private\r\n     */\r\n    this._browserType = browser.getName();\r\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\r\n\r\n    if (!keys) {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The browser type '${this._browserType}' isn't supported!`;\r\n    }\r\n\r\n    /**\r\n     * Whether to use the Promise-based getStats API or not.\r\n     * @type {boolean}\r\n     */\r\n    this._usesPromiseGetStats\r\n        = browser.isSafari() || browser.isFirefox();\r\n\r\n    /**\r\n     * The function which is to be used to retrieve the value associated in a\r\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\r\n     * browser-agnostic name/key.\r\n     *\r\n     * @function\r\n     * @private\r\n     */\r\n    this._getStatValue\r\n        = this._usesPromiseGetStats\r\n            ? this._defineNewGetStatValueMethod(keys)\r\n            : this._defineGetStatValueMethod(keys);\r\n\r\n    this.peerconnection = peerconnection;\r\n    this.baselineAudioLevelsReport = null;\r\n    this.currentAudioLevelsReport = null;\r\n    this.currentStatsReport = null;\r\n    this.previousStatsReport = null;\r\n    this.audioLevelReportHistory = {};\r\n    this.audioLevelsIntervalId = null;\r\n    this.eventEmitter = eventEmitter;\r\n    this.conferenceStats = new ConferenceStats();\r\n\r\n    // Updates stats interval\r\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\r\n\r\n    this.statsIntervalId = null;\r\n    this.statsIntervalMilis = statsInterval;\r\n\r\n    /**\r\n     * Maps SSRC numbers to {@link SsrcStats}.\r\n     * @type {Map<number,SsrcStats}\r\n     */\r\n    this.ssrc2stats = new Map();\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Stops stats updates.\r\n */\r\nStatsCollector.prototype.stop = function() {\r\n    if (this.audioLevelsIntervalId) {\r\n        clearInterval(this.audioLevelsIntervalId);\r\n        this.audioLevelsIntervalId = null;\r\n    }\r\n\r\n    if (this.statsIntervalId) {\r\n        clearInterval(this.statsIntervalId);\r\n        this.statsIntervalId = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Callback passed to <tt>getStats</tt> method.\r\n * @param error an error that occurred on <tt>getStats</tt> call.\r\n */\r\nStatsCollector.prototype.errorCallback = function(error) {\r\n    GlobalOnErrorHandler.callErrorHandler(error);\r\n    logger.error('Get stats error', error);\r\n    this.stop();\r\n};\r\n\r\n/**\r\n * Starts stats updates.\r\n */\r\nStatsCollector.prototype.start = function(startAudioLevelStats) {\r\n    if (startAudioLevelStats) {\r\n        if (browser.supportsReceiverStats()) {\r\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\r\n        }\r\n        this.audioLevelsIntervalId = setInterval(\r\n            () => {\r\n                if (browser.supportsReceiverStats()) {\r\n                    const audioLevels = this.peerconnection.getAudioLevels();\r\n\r\n                    for (const ssrc in audioLevels) {\r\n                        if (audioLevels.hasOwnProperty(ssrc)) {\r\n                            // Use a scaling factor of 2.5 to report the same\r\n                            // audio levels that getStats reports.\r\n                            const audioLevel = audioLevels[ssrc] * 2.5;\r\n\r\n                            this.eventEmitter.emit(\r\n                                StatisticsEvents.AUDIO_LEVEL,\r\n                                this.peerconnection,\r\n                                Number.parseInt(ssrc, 10),\r\n                                audioLevel,\r\n                                false /* isLocal */);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Interval updates\r\n                    this.peerconnection.getStats(\r\n                        report => {\r\n                            let results = null;\r\n\r\n                            if (!report || !report.result\r\n                                || typeof report.result !== 'function') {\r\n                                results = report;\r\n                            } else {\r\n                                results = report.result();\r\n                            }\r\n                            this.currentAudioLevelsReport = results;\r\n                            if (this._usesPromiseGetStats) {\r\n                                this.processNewAudioLevelReport();\r\n                            } else {\r\n                                this.processAudioLevelReport();\r\n                            }\r\n\r\n                            this.baselineAudioLevelsReport\r\n                                = this.currentAudioLevelsReport;\r\n                        },\r\n                        error => this.errorCallback(error)\r\n                    );\r\n                }\r\n            },\r\n            this.audioLevelsIntervalMilis\r\n        );\r\n    }\r\n\r\n    this.statsIntervalId = setInterval(\r\n        () => {\r\n            // Interval updates\r\n            this.peerconnection.getStats(\r\n                report => {\r\n                    let results = null;\r\n\r\n                    if (!report || !report.result\r\n                        || typeof report.result !== 'function') {\r\n                        // firefox\r\n                        results = report;\r\n                    } else {\r\n                        // chrome\r\n                        results = report.result();\r\n                    }\r\n\r\n                    this.currentStatsReport = results;\r\n                    try {\r\n                        if (this._usesPromiseGetStats) {\r\n                            this.processNewStatsReport();\r\n                        } else {\r\n                            this.processStatsReport();\r\n                        }\r\n                    } catch (e) {\r\n                        GlobalOnErrorHandler.callErrorHandler(e);\r\n                        logger.error(`Unsupported key:${e}`, e);\r\n                    }\r\n\r\n                    this.previousStatsReport = this.currentStatsReport;\r\n                },\r\n                error => this.errorCallback(error)\r\n            );\r\n        },\r\n        this.statsIntervalMilis\r\n    );\r\n};\r\n\r\n/**\r\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\r\n * gets the value from a specific report returned by RTCPeerConnection#getStats\r\n * associated with a lib-jitsi-meet browser-agnostic name.\r\n *\r\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\r\n * names to RTCPeerConnection#getStats browser-specific keys\r\n */\r\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\r\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\r\n    // to a browser-specific key of a report returned by\r\n    // RTCPeerConnection#getStats.\r\n    const keyFromName = function(name) {\r\n        const key = keys[name];\r\n\r\n        if (key) {\r\n            return key;\r\n        }\r\n\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The property '${name}' isn't supported!`;\r\n    };\r\n\r\n    // Define the function which retrieves the value from a specific report\r\n    // returned by RTCPeerConnection#getStats associated with a given\r\n    // browser-specific key.\r\n    let itemStatByKey;\r\n\r\n    switch (this._browserType) {\r\n    case browsers.CHROME:\r\n    case browsers.OPERA:\r\n    case browsers.NWJS:\r\n    case browsers.ELECTRON:\r\n        // TODO What about other types of browser which are based on Chrome such\r\n        // as NW.js? Every time we want to support a new type browser we have to\r\n        // go and add more conditions (here and in multiple other places).\r\n        // Cannot we do a feature detection instead of a browser type check? For\r\n        // example, if item has a stat property of type function, then it's very\r\n        // likely that whoever defined it wanted you to call it in order to\r\n        // retrieve the value associated with a specific key.\r\n        itemStatByKey = (item, key) => item.stat(key);\r\n        break;\r\n    case browsers.REACT_NATIVE:\r\n        // The implementation provided by react-native-webrtc follows the\r\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\r\n        // Array in which each element is a key-value pair.\r\n        itemStatByKey = function(item, key) {\r\n            let value;\r\n\r\n            item.values.some(pair => {\r\n                if (pair.hasOwnProperty(key)) {\r\n                    value = pair[key];\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n\r\n            });\r\n\r\n            return value;\r\n        };\r\n        break;\r\n    default:\r\n        itemStatByKey = (item, key) => item[key];\r\n    }\r\n\r\n    // Compose the 2 functions defined above to get a function which retrieves\r\n    // the value from a specific report returned by RTCPeerConnection#getStats\r\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\r\n    return (item, name) => itemStatByKey(item, keyFromName(name));\r\n};\r\n\r\n/**\r\n * Obtains a stat value from given stat and converts it to a non-negative\r\n * number. If the value is either invalid or negative then 0 will be returned.\r\n * @param report\r\n * @param {string} name\r\n * @return {number}\r\n * @private\r\n */\r\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\r\n    let value = this._getStatValue(report, name);\r\n\r\n    if (typeof value !== 'number') {\r\n        value = Number(value);\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.max(0, value);\r\n};\r\n\r\n/* eslint-disable no-continue */\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processStatsReport = function() {\r\n    if (!this.previousStatsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n    const byteSentStats = {};\r\n\r\n    for (const idx in this.currentStatsReport) {\r\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\r\n            continue;\r\n        }\r\n        const now = this.currentStatsReport[idx];\r\n\r\n        // The browser API may return \"undefined\" values in the array\r\n        if (!now) {\r\n            continue;\r\n        }\r\n\r\n        try {\r\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\r\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\r\n\r\n            if (receiveBandwidth || sendBandwidth) {\r\n                this.conferenceStats.bandwidth = {\r\n                    'download': Math.round(receiveBandwidth / 1000),\r\n                    'upload': Math.round(sendBandwidth / 1000)\r\n                };\r\n            }\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        if (now.type === 'googCandidatePair') {\r\n            let active, ip, localCandidateType, localip,\r\n                remoteCandidateType, rtt, type;\r\n\r\n            try {\r\n                active = getStatValue(now, 'activeConnection');\r\n                if (!active) {\r\n                    continue;\r\n                }\r\n\r\n                ip = getStatValue(now, 'remoteAddress');\r\n                type = getStatValue(now, 'transportType');\r\n                localip = getStatValue(now, 'localAddress');\r\n                localCandidateType = getStatValue(now, 'localCandidateType');\r\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\r\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\r\n            } catch (e) { /* not supported*/ }\r\n            if (!ip || !type || !localip || active !== 'true') {\r\n                continue;\r\n            }\r\n\r\n            // Save the address unless it has been saved already.\r\n            const conferenceStatsTransport = this.conferenceStats.transport;\r\n\r\n            if (!conferenceStatsTransport.some(\r\n                    t =>\r\n                        t.ip === ip\r\n                            && t.type === type\r\n                            && t.localip === localip)) {\r\n                conferenceStatsTransport.push({\r\n                    ip,\r\n                    type,\r\n                    localip,\r\n                    p2p: this.peerconnection.isP2P,\r\n                    localCandidateType,\r\n                    remoteCandidateType,\r\n                    rtt\r\n                });\r\n            }\r\n            continue;\r\n        }\r\n\r\n        if (now.type === 'candidatepair') {\r\n            // we need succeeded and selected pairs only\r\n            if (now.state !== 'succeeded' || !now.selected) {\r\n                continue;\r\n            }\r\n\r\n            const local = this.currentStatsReport[now.localCandidateId];\r\n            const remote = this.currentStatsReport[now.remoteCandidateId];\r\n\r\n            this.conferenceStats.transport.push({\r\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\r\n                type: local.transport,\r\n                localip: `${local.ipAddress}:${local.portNumber}`,\r\n                p2p: this.peerconnection.isP2P,\r\n                localCandidateType: local.candidateType,\r\n                remoteCandidateType: remote.candidateType\r\n            });\r\n        }\r\n\r\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\r\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\r\n            continue;\r\n        }\r\n\r\n        const before = this.previousStatsReport[idx];\r\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\r\n\r\n        // If type=\"track\", take the first SSRC from ssrcIds.\r\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\r\n            ssrc = Number(now.ssrcIds[0]);\r\n        }\r\n\r\n        if (!before || !ssrc) {\r\n            continue;\r\n        }\r\n\r\n        // isRemote is available only in FF and is ignored in case of chrome\r\n        // according to the spec\r\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\r\n        // when isRemote is true indicates that the measurements were done at\r\n        // the remote endpoint and reported in an RTCP RR/XR.\r\n        // Fixes a problem where we are calculating local stats wrong adding\r\n        // the sent bytes to the local download bitrate.\r\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\r\n        // property.\r\n        if (now.isRemote === true || now.remoteSource === true) {\r\n            continue;\r\n        }\r\n\r\n        let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n        if (!ssrcStats) {\r\n            ssrcStats = new SsrcStats();\r\n            this.ssrc2stats.set(ssrc, ssrcStats);\r\n        }\r\n\r\n        let isDownloadStream = true;\r\n        let key = 'packetsReceived';\r\n        let packetsNow = getStatValue(now, key);\r\n\r\n        if (typeof packetsNow === 'undefined'\r\n            || packetsNow === null || packetsNow === '') {\r\n            isDownloadStream = false;\r\n            key = 'packetsSent';\r\n            packetsNow = getStatValue(now, key);\r\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\r\n                logger.warn('No packetsReceived nor packetsSent stat found');\r\n            }\r\n        }\r\n        if (!packetsNow || packetsNow < 0) {\r\n            packetsNow = 0;\r\n        }\r\n\r\n        const packetsBefore = this.getNonNegativeStat(before, key);\r\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\r\n\r\n        const packetsLostNow\r\n            = this.getNonNegativeStat(now, 'packetsLost');\r\n        const packetsLostBefore\r\n            = this.getNonNegativeStat(before, 'packetsLost');\r\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\r\n\r\n        ssrcStats.setLoss({\r\n            packetsTotal: packetsDiff + packetsLostDiff,\r\n            packetsLost: packetsLostDiff,\r\n            isDownloadStream\r\n        });\r\n\r\n        const bytesReceivedNow\r\n            = this.getNonNegativeStat(now, 'bytesReceived');\r\n        const bytesReceivedBefore\r\n            = this.getNonNegativeStat(before, 'bytesReceived');\r\n        const bytesReceived\r\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\r\n\r\n        let bytesSent = 0;\r\n\r\n        // TODO: clean this mess up!\r\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\r\n\r\n        if (typeof nowBytesTransmitted === 'number'\r\n            || typeof nowBytesTransmitted === 'string') {\r\n            nowBytesTransmitted = Number(nowBytesTransmitted);\r\n            if (!isNaN(nowBytesTransmitted)) {\r\n                byteSentStats[ssrc] = nowBytesTransmitted;\r\n                if (nowBytesTransmitted > 0) {\r\n                    bytesSent = nowBytesTransmitted\r\n                        - getStatValue(before, 'bytesSent');\r\n                }\r\n            }\r\n        }\r\n        bytesSent = Math.max(0, bytesSent);\r\n\r\n        const timeMs = now.timestamp - before.timestamp;\r\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\r\n\r\n        if (timeMs > 0) {\r\n            // TODO is there any reason to round here?\r\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\r\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\r\n        }\r\n\r\n        ssrcStats.addBitrate({\r\n            'download': bitrateReceivedKbps,\r\n            'upload': bitrateSentKbps\r\n        });\r\n\r\n        const resolution = {\r\n            height: null,\r\n            width: null\r\n        };\r\n\r\n        try {\r\n            let height, width;\r\n\r\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\r\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\r\n                resolution.height = height;\r\n                resolution.width = width;\r\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\r\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\r\n                resolution.height = height;\r\n                resolution.width = width;\r\n            }\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        // Tries to get frame rate\r\n        let frameRate;\r\n\r\n        try {\r\n            frameRate = getStatValue(now, 'googFrameRateReceived')\r\n                || getStatValue(now, 'googFrameRateSent') || 0;\r\n        } catch (e) {\r\n            // if it fails with previous properties(chrome),\r\n            // let's try with another one (FF)\r\n            try {\r\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\r\n            } catch (err) { /* not supported*/ }\r\n        }\r\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\r\n\r\n        if (resolution.height && resolution.width) {\r\n            ssrcStats.setResolution(resolution);\r\n        } else {\r\n            ssrcStats.setResolution(null);\r\n        }\r\n\r\n        let codec;\r\n\r\n        // Try to get the codec for later reporting.\r\n        try {\r\n            codec = getStatValue(now, 'googCodecName') || '';\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        ssrcStats.setCodec(codec);\r\n    }\r\n\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\r\n\r\n    this._processAndEmitReport();\r\n};\r\n\r\n/**\r\n *\r\n */\r\nStatsCollector.prototype._processAndEmitReport = function() {\r\n    // process stats\r\n    const totalPackets = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    const lostPackets = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    let bitrateDownload = 0;\r\n    let bitrateUpload = 0;\r\n    const resolutions = {};\r\n    const framerates = {};\r\n    const codecs = {};\r\n    let audioBitrateDownload = 0;\r\n    let audioBitrateUpload = 0;\r\n    let audioCodec = '';\r\n    let videoBitrateDownload = 0;\r\n    let videoBitrateUpload = 0;\r\n    let videoCodec = '';\r\n\r\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\r\n        // process packet loss stats\r\n        const loss = ssrcStats.loss;\r\n        const type = loss.isDownloadStream ? 'download' : 'upload';\r\n\r\n        totalPackets[type] += loss.packetsTotal;\r\n        lostPackets[type] += loss.packetsLost;\r\n\r\n        // process bitrate stats\r\n        bitrateDownload += ssrcStats.bitrate.download;\r\n        bitrateUpload += ssrcStats.bitrate.upload;\r\n\r\n        // collect resolutions and framerates\r\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\r\n\r\n        if (track) {\r\n            if (track.isAudioTrack()) {\r\n                audioBitrateDownload += ssrcStats.bitrate.download;\r\n                audioBitrateUpload += ssrcStats.bitrate.upload;\r\n                audioCodec = ssrcStats.codec;\r\n            } else {\r\n                videoBitrateDownload += ssrcStats.bitrate.download;\r\n                videoBitrateUpload += ssrcStats.bitrate.upload;\r\n                videoCodec = ssrcStats.codec;\r\n            }\r\n\r\n            const participantId = track.getParticipantId();\r\n\r\n            if (participantId) {\r\n                const resolution = ssrcStats.resolution;\r\n\r\n                if (resolution.width\r\n                        && resolution.height\r\n                        && resolution.width !== -1\r\n                        && resolution.height !== -1) {\r\n                    const userResolutions = resolutions[participantId] || {};\r\n\r\n                    userResolutions[ssrc] = resolution;\r\n                    resolutions[participantId] = userResolutions;\r\n                }\r\n                if (ssrcStats.framerate !== 0) {\r\n                    const userFramerates = framerates[participantId] || {};\r\n\r\n                    userFramerates[ssrc] = ssrcStats.framerate;\r\n                    framerates[participantId] = userFramerates;\r\n                }\r\n                if (audioCodec.length && videoCodec.length) {\r\n                    const codecDesc = {\r\n                        'audio': audioCodec,\r\n                        'video': videoCodec\r\n                    };\r\n\r\n                    const userCodecs = codecs[participantId] || {};\r\n\r\n                    userCodecs[ssrc] = codecDesc;\r\n                    codecs[participantId] = userCodecs;\r\n                }\r\n            } else {\r\n                logger.error(`No participant ID returned by ${track}`);\r\n            }\r\n        }\r\n\r\n        ssrcStats.resetBitrate();\r\n    }\r\n\r\n    this.conferenceStats.bitrate = {\r\n        'upload': bitrateUpload,\r\n        'download': bitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.bitrate.audio = {\r\n        'upload': audioBitrateUpload,\r\n        'download': audioBitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.bitrate.video = {\r\n        'upload': videoBitrateUpload,\r\n        'download': videoBitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.packetLoss = {\r\n        total:\r\n            calculatePacketLoss(\r\n                lostPackets.download + lostPackets.upload,\r\n                totalPackets.download + totalPackets.upload),\r\n        download:\r\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\r\n        upload:\r\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\r\n    };\r\n\r\n    const avgAudioLevels = {};\r\n    let localAvgAudioLevels;\r\n\r\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\r\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\r\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\r\n\r\n        if (isLocal) {\r\n            localAvgAudioLevels = avgAudioLevel;\r\n        } else {\r\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\r\n\r\n            if (track) {\r\n                const participantId = track.getParticipantId();\r\n\r\n                if (participantId) {\r\n                    avgAudioLevels[participantId] = avgAudioLevel;\r\n                }\r\n            }\r\n        }\r\n    });\r\n    this.audioLevelReportHistory = {};\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.CONNECTION_STATS,\r\n        this.peerconnection,\r\n        {\r\n            'bandwidth': this.conferenceStats.bandwidth,\r\n            'bitrate': this.conferenceStats.bitrate,\r\n            'packetLoss': this.conferenceStats.packetLoss,\r\n            'resolution': resolutions,\r\n            'framerate': framerates,\r\n            'codec': codecs,\r\n            'transport': this.conferenceStats.transport,\r\n            localAvgAudioLevels,\r\n            avgAudioLevels\r\n        });\r\n    this.conferenceStats.transport = [];\r\n};\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processAudioLevelReport = function() {\r\n    if (!this.baselineAudioLevelsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n\r\n    for (const idx in this.currentAudioLevelsReport) {\r\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\r\n            continue;\r\n        }\r\n\r\n        const now = this.currentAudioLevelsReport[idx];\r\n\r\n        if (now.type !== 'ssrc' && now.type !== 'track') {\r\n            continue;\r\n        }\r\n\r\n        const before = this.baselineAudioLevelsReport[idx];\r\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\r\n\r\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\r\n            ssrc = Number(now.ssrcIds[0]);\r\n        }\r\n\r\n        if (!before) {\r\n            logger.warn(`${ssrc} not enough data`);\r\n            continue;\r\n        }\r\n\r\n        if (!ssrc) {\r\n            if ((Date.now() - now.timestamp) < 3000) {\r\n                logger.warn('No ssrc: ');\r\n            }\r\n            continue;\r\n        }\r\n\r\n        // Audio level\r\n        let audioLevel;\r\n\r\n        try {\r\n            audioLevel\r\n                = getStatValue(now, 'audioInputLevel')\r\n                    || getStatValue(now, 'audioOutputLevel');\r\n        } catch (e) { /* not supported*/\r\n            logger.warn('Audio Levels are not available in the statistics.');\r\n            clearInterval(this.audioLevelsIntervalId);\r\n\r\n            return;\r\n        }\r\n\r\n        if (audioLevel) {\r\n            let isLocal;\r\n\r\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\r\n            if (now.type === 'ssrc') {\r\n                isLocal = !getStatValue(now, 'packetsReceived');\r\n\r\n            // If type=\"track\", check remoteSource boolean property.\r\n            } else {\r\n                isLocal = !now.remoteSource;\r\n            }\r\n\r\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\r\n            // 0..1 range (0 == silence). However browsers don't behave that\r\n            // way so we must convert it to 0..1.\r\n            // TODO: Can't find specs about what this value really is, but it\r\n            // seems to vary between 0 and around 32k.\r\n            audioLevel = audioLevel / 32767;\r\n\r\n            if (!(ssrc in this.audioLevelReportHistory)) {\r\n                this.audioLevelReportHistory[ssrc] = {\r\n                    isLocal,\r\n                    data: []\r\n                };\r\n            }\r\n            this.audioLevelReportHistory[ssrc].data.push(audioLevel);\r\n\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.AUDIO_LEVEL,\r\n                this.peerconnection,\r\n                ssrc,\r\n                audioLevel,\r\n                isLocal);\r\n        }\r\n    }\r\n};\r\n\r\n/* eslint-enable no-continue */\r\n\r\n/**\r\n * New promised based getStats report processing.\r\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\r\n * frameRate stat is missing and calculating it using framesSent,\r\n * gives values double the values seen in webrtc-internals.\r\n * https://w3c.github.io/webrtc-stats/\r\n */\r\n\r\n/**\r\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\r\n * gets the value from a specific report returned by RTCPeerConnection#getStats\r\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\r\n * Promised based getStats.\r\n *\r\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\r\n * names to RTCPeerConnection#getStats browser-specific keys\r\n */\r\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\r\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\r\n    // to a browser-specific key of a report returned by\r\n    // RTCPeerConnection#getStats.\r\n    const keyFromName = function(name) {\r\n        const key = keys[name];\r\n\r\n        if (key) {\r\n            return key;\r\n        }\r\n\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The property '${name}' isn't supported!`;\r\n    };\r\n\r\n    // Compose the 2 functions defined above to get a function which retrieves\r\n    // the value from a specific report returned by RTCPeerConnection#getStats\r\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\r\n    return (item, name) => item[keyFromName(name)];\r\n};\r\n\r\n/**\r\n * Converts the value to a non-negative number.\r\n * If the value is either invalid or negative then 0 will be returned.\r\n * @param {*} v\r\n * @return {number}\r\n * @private\r\n */\r\nStatsCollector.prototype.getNonNegativeValue = function(v) {\r\n    let value = v;\r\n\r\n    if (typeof value !== 'number') {\r\n        value = Number(value);\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.max(0, value);\r\n};\r\n\r\n/**\r\n * Calculates bitrate between before and now using a supplied field name and its\r\n * value in the stats.\r\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\r\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\r\n * previous stats.\r\n * @param fieldName the field to use for calculations.\r\n * @return {number} the calculated bitrate between now and before.\r\n * @private\r\n */\r\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\r\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\r\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\r\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\r\n\r\n    const timeMs = now.timestamp - before.timestamp;\r\n    let bitrateKbps = 0;\r\n\r\n    if (timeMs > 0) {\r\n        // TODO is there any reason to round here?\r\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\r\n    }\r\n\r\n    return bitrateKbps;\r\n};\r\n\r\n/**\r\n * Stats processing new getStats logic.\r\n */\r\nStatsCollector.prototype.processNewStatsReport = function() {\r\n    if (!this.previousStatsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n    const byteSentStats = {};\r\n\r\n    this.currentStatsReport.forEach(now => {\r\n\r\n        // RTCIceCandidatePairStats\r\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\r\n        if (now.type === 'candidate-pair'\r\n            && now.nominated\r\n            && now.state === 'succeeded') {\r\n\r\n            const availableIncomingBitrate = now.availableIncomingBitrate;\r\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\r\n\r\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\r\n                this.conferenceStats.bandwidth = {\r\n                    'download': Math.round(availableIncomingBitrate / 1000),\r\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\r\n                };\r\n            }\r\n\r\n            const remoteUsedCandidate\r\n                = this.currentStatsReport.get(now.remoteCandidateId);\r\n            const localUsedCandidate\r\n                = this.currentStatsReport.get(now.localCandidateId);\r\n\r\n            // RTCIceCandidateStats\r\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\r\n            // safari currently does not provide ice candidates in stats\r\n            if (remoteUsedCandidate && localUsedCandidate) {\r\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\r\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\r\n                const ip = `${remoteIpAddress}:${remotePort}`;\r\n\r\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\r\n                const localPort = getStatValue(localUsedCandidate, 'port');\r\n\r\n                const localIp = `${localIpAddress}:${localPort}`;\r\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\r\n\r\n                // Save the address unless it has been saved already.\r\n                const conferenceStatsTransport = this.conferenceStats.transport;\r\n\r\n                if (!conferenceStatsTransport.some(\r\n                        t =>\r\n                            t.ip === ip\r\n                            && t.type === type\r\n                            && t.localip === localIp)) {\r\n                    conferenceStatsTransport.push({\r\n                        ip,\r\n                        type,\r\n                        localIp,\r\n                        p2p: this.peerconnection.isP2P,\r\n                        localCandidateType: localUsedCandidate.candidateType,\r\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\r\n                        networkType: localUsedCandidate.networkType,\r\n                        rtt: now.currentRoundTripTime * 1000\r\n                    });\r\n                }\r\n            }\r\n\r\n        // RTCReceivedRtpStreamStats\r\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\r\n        // RTCSentRtpStreamStats\r\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\r\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\r\n            const before = this.previousStatsReport.get(now.id);\r\n            const ssrc = this.getNonNegativeValue(now.ssrc);\r\n\r\n            if (!before || !ssrc) {\r\n                return;\r\n            }\r\n\r\n            let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n            if (!ssrcStats) {\r\n                ssrcStats = new SsrcStats();\r\n                this.ssrc2stats.set(ssrc, ssrcStats);\r\n            }\r\n\r\n            let isDownloadStream = true;\r\n            let key = 'packetsReceived';\r\n\r\n            if (now.type === 'outbound-rtp') {\r\n                isDownloadStream = false;\r\n                key = 'packetsSent';\r\n            }\r\n\r\n            let packetsNow = now[key];\r\n\r\n            if (!packetsNow || packetsNow < 0) {\r\n                packetsNow = 0;\r\n            }\r\n\r\n            const packetsBefore = this.getNonNegativeValue(before[key]);\r\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\r\n\r\n            const packetsLostNow\r\n                = this.getNonNegativeValue(now.packetsLost);\r\n            const packetsLostBefore\r\n                = this.getNonNegativeValue(before.packetsLost);\r\n            const packetsLostDiff\r\n                = Math.max(0, packetsLostNow - packetsLostBefore);\r\n\r\n            ssrcStats.setLoss({\r\n                packetsTotal: packetsDiff + packetsLostDiff,\r\n                packetsLost: packetsLostDiff,\r\n                isDownloadStream\r\n            });\r\n\r\n            if (now.type === 'inbound-rtp') {\r\n\r\n                ssrcStats.addBitrate({\r\n                    'download': this._calculateBitrate(\r\n                                    now, before, 'bytesReceived'),\r\n                    'upload': 0\r\n                });\r\n\r\n                // RTCInboundRtpStreamStats\r\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\r\n                // TODO: can we use framesDecoded for frame rate, available\r\n                // in chrome\r\n            } else {\r\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\r\n                ssrcStats.addBitrate({\r\n                    'download': 0,\r\n                    'upload': this._calculateBitrate(\r\n                                now, before, 'bytesSent')\r\n                });\r\n\r\n                // RTCOutboundRtpStreamStats\r\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\r\n                // TODO: can we use framesEncoded for frame rate, available\r\n                // in chrome\r\n            }\r\n\r\n            // FF has framerateMean out of spec\r\n            const framerateMean = now.framerateMean;\r\n\r\n            if (framerateMean) {\r\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\r\n            }\r\n\r\n        // track for resolution\r\n        // RTCVideoHandlerStats\r\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\r\n        // RTCMediaHandlerStats\r\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\r\n        } else if (now.type === 'track') {\r\n\r\n            const resolution = {\r\n                height: now.frameHeight,\r\n                width: now.frameWidth\r\n            };\r\n\r\n            // Tries to get frame rate\r\n            let frameRate = now.framesPerSecond;\r\n\r\n            if (!frameRate) {\r\n                // we need to calculate it\r\n                const before = this.previousStatsReport.get(now.id);\r\n\r\n                if (before) {\r\n                    const timeMs = now.timestamp - before.timestamp;\r\n\r\n                    if (timeMs > 0 && now.framesSent) {\r\n                        const numberOfFramesSinceBefore\r\n                            = now.framesSent - before.framesSent;\r\n\r\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\r\n                    }\r\n                }\r\n\r\n                if (!frameRate) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            const trackIdentifier = now.trackIdentifier;\r\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\r\n\r\n            if (!ssrc) {\r\n                return;\r\n            }\r\n            let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n            if (!ssrcStats) {\r\n                ssrcStats = new SsrcStats();\r\n                this.ssrc2stats.set(ssrc, ssrcStats);\r\n            }\r\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\r\n\r\n            if (resolution.height && resolution.width) {\r\n                ssrcStats.setResolution(resolution);\r\n            } else {\r\n                ssrcStats.setResolution(null);\r\n            }\r\n        }\r\n    });\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\r\n\r\n    this._processAndEmitReport();\r\n};\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processNewAudioLevelReport = function() {\r\n    if (!this.baselineAudioLevelsReport) {\r\n        return;\r\n    }\r\n\r\n    this.currentAudioLevelsReport.forEach(now => {\r\n        if (now.type !== 'track') {\r\n            return;\r\n        }\r\n\r\n        // Audio level\r\n        const audioLevel = now.audioLevel;\r\n\r\n        if (!audioLevel) {\r\n            return;\r\n        }\r\n\r\n        const trackIdentifier = now.trackIdentifier;\r\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\r\n\r\n        if (ssrc) {\r\n            const isLocal\r\n                = ssrc === this.peerconnection.getLocalSSRC(\r\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\r\n\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.AUDIO_LEVEL,\r\n                this.peerconnection,\r\n                ssrc,\r\n                audioLevel,\r\n                isLocal);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * End new promised based getStats processing methods.\r\n */\r\n","/**\r\n * Implements utility to forward events from one eventEmitter to another.\r\n * @param src {object} instance of EventEmitter or another class that implements\r\n * addListener method which will register listener to EventEmitter instance.\r\n * @param dest {object} instance of EventEmitter or another class that\r\n * implements emit method which will emit an event.\r\n */\r\nfunction EventEmitterForwarder(src, dest) {\r\n    if (!src || !dest || typeof src.addListener !== 'function'\r\n        || typeof dest.emit !== 'function') {\r\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\r\n    }\r\n    this.src = src;\r\n    this.dest = dest;\r\n}\r\n\r\n/**\r\n * Adds event to be forwarded from src to dest.\r\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\r\n * for.\r\n * @param dstEvent {string} the event that will be fired from dest.\r\n * @param arguments all other passed arguments are going to be fired with\r\n * dstEvent.\r\n */\r\nEventEmitterForwarder.prototype.forward = function(...args) {\r\n    const srcEvent = args[0];\r\n\r\n    // This will be the \"this\" value for emit function.\r\n\r\n    args[0] = this.dest;\r\n\r\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\r\n    this.src.addListener(\r\n        srcEvent,\r\n        Function.prototype.bind.apply(this.dest.emit, args));\r\n};\r\n\r\nmodule.exports = EventEmitterForwarder;\r\n","\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\n\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport { ParticipantConnectionStatus }\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport { ERROR_FEATURE_VERSION_MISMATCH } from './modules/xmpp/Caps';\r\nimport * as MediaType from './service/RTC/MediaType';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Represents a participant in (i.e. a member of) a conference.\r\n */\r\nexport default class JitsiParticipant {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Initializes a new JitsiParticipant instance.\r\n     *\r\n     * @constructor\r\n     * @param jid the conference XMPP jid\r\n     * @param conference\r\n     * @param displayName\r\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\r\n     * represent a hidden participant; otherwise, false.\r\n     * @param {string} statsID - optional participant statsID\r\n     * @param {string} status - the initial status if any.\r\n     * @param {object} identity - the xmpp identity\r\n     */\r\n    constructor(jid, conference, displayName, hidden, statsID, status, identity) {\r\n        this._jid = jid;\r\n        this._id = Strophe.getResourceFromJid(jid);\r\n        this._conference = conference;\r\n        this._displayName = displayName;\r\n        this._supportsDTMF = false;\r\n        this._tracks = [];\r\n        this._role = 'none';\r\n        this._status = status;\r\n        this._hidden = hidden;\r\n        this._statsID = statsID;\r\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\r\n        this._properties = {};\r\n        this._identity = identity;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * @returns {JitsiConference} The conference that this participant belongs\r\n     * to.\r\n     */\r\n    getConference() {\r\n        return this._conference;\r\n    }\r\n\r\n    /**\r\n     * Gets the value of a property of this participant.\r\n     */\r\n    getProperty(name) {\r\n        return this._properties[name];\r\n    }\r\n\r\n    /**\r\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\r\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\r\n     * muted status.\r\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\r\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\r\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\r\n     */\r\n    hasAnyVideoTrackWebRTCMuted() {\r\n        return (\r\n            this.getTracks().some(\r\n                jitsiTrack =>\r\n                    jitsiTrack.getType() === MediaType.VIDEO\r\n                        && jitsiTrack.isWebRTCTrackMuted()));\r\n    }\r\n\r\n    /**\r\n     * Updates participant's connection status.\r\n     * @param {string} state the current participant connection state.\r\n     * {@link ParticipantConnectionStatus}.\r\n     * @private\r\n     */\r\n    _setConnectionStatus(status) {\r\n        this._connectionStatus = status;\r\n    }\r\n\r\n    /**\r\n     * Return participant's connectivity status.\r\n     *\r\n     * @returns {string} the connection status\r\n     * <tt>ParticipantConnectionStatus</tt> of the user.\r\n     * {@link ParticipantConnectionStatus}.\r\n     */\r\n    getConnectionStatus() {\r\n        return this._connectionStatus;\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a property of this participant, and fires an event if\r\n     * the value has changed.\r\n     * @name the name of the property.\r\n     * @value the value to set.\r\n     */\r\n    setProperty(name, value) {\r\n        const oldValue = this._properties[name];\r\n\r\n        if (value !== oldValue) {\r\n            this._properties[name] = value;\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\r\n                this,\r\n                name,\r\n                oldValue,\r\n                value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\r\n     * participant.\r\n     */\r\n    getTracks() {\r\n        return this._tracks.slice();\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\r\n     * participant, for given media type.\r\n     */\r\n    getTracksByMediaType(mediaType) {\r\n        return this.getTracks().filter(track => track.getType() === mediaType);\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The ID of this participant.\r\n     */\r\n    getId() {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The JID of this participant.\r\n     */\r\n    getJid() {\r\n        return this._jid;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The human-readable display name of this participant.\r\n     */\r\n    getDisplayName() {\r\n        return this._displayName;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The stats ID of this participant.\r\n     */\r\n    getStatsID() {\r\n        return this._statsID;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The status of the participant.\r\n     */\r\n    getStatus() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant is a moderator or not.\r\n     */\r\n    isModerator() {\r\n        return this._role === 'moderator';\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\r\n     * special system participants may want to join hidden (like for example the\r\n     * recorder).\r\n     */\r\n    isHidden() {\r\n        return this._hidden;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant has muted their audio.\r\n     */\r\n    isAudioMuted() {\r\n        return this._isMediaTypeMuted(MediaType.AUDIO);\r\n    }\r\n\r\n    /**\r\n     * Determines whether all JitsiTracks which are of a specific MediaType and\r\n     * which belong to this JitsiParticipant are muted.\r\n     *\r\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\r\n     * checked.\r\n     * @private\r\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\r\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\r\n     * false.\r\n     */\r\n    _isMediaTypeMuted(mediaType) {\r\n        return this.getTracks().reduce(\r\n            (muted, track) =>\r\n                muted && (track.getType() !== mediaType || track.isMuted()),\r\n            true);\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant has muted their video.\r\n     */\r\n    isVideoMuted() {\r\n        return this._isMediaTypeMuted(MediaType.VIDEO);\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The role of this participant.\r\n     */\r\n    getRole() {\r\n        return this._role;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    supportsDTMF() {\r\n        return this._supportsDTMF;\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for the participant.\r\n     * @param {int} timeout the timeout in ms for reply from the participant.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeatures(timeout = 5000) {\r\n        if (this._getFeaturesPromise) {\r\n            return this._getFeaturesPromise;\r\n        }\r\n\r\n        this._getFeaturesPromise = this._conference.xmpp.caps.getFeatures(this._jid, timeout)\r\n            .catch(error => {\r\n                // Retry on feature version mismatch\r\n                if (error === ERROR_FEATURE_VERSION_MISMATCH) {\r\n                    return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\r\n                }\r\n\r\n                logger.warn(`Failed to discover features of ${this._jid}`, error);\r\n\r\n                return Promise.reject(error);\r\n            });\r\n\r\n        return this._getFeaturesPromise\r\n            .then(result => {\r\n                this._getFeaturesPromise = undefined;\r\n\r\n                return result;\r\n            }, error => {\r\n                this._getFeaturesPromise = undefined;\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns the bot type for the participant.\r\n     *\r\n     * @returns {string|undefined} - The bot type of the participant.\r\n     */\r\n    getBotType() {\r\n        return this._botType;\r\n    }\r\n\r\n    /**\r\n     * Returns the identity/email for the participant.\r\n     *\r\n     * @returns {string|undefined} - The identity the participant.\r\n     */\r\n    getIdentity() {\r\n        return this._identity;\r\n    }\r\n}\r\n","import {\r\n    CONNECTION_DISCONNECTED,\r\n    CONNECTION_ESTABLISHED,\r\n    CONNECTION_FAILED\r\n} from './JitsiConnectionEvents';\r\nimport XMPP from './modules/xmpp/xmpp';\r\n\r\n/**\r\n * @typedef {Object} UpgradeRoleError\r\n *\r\n * @property {JitsiConnectionErrors} [connectionError] - One of\r\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\r\n * XMPP server.\r\n * @property {String} [authenticationError] - One of XMPP error conditions\r\n * returned by Jicofo on authentication attempt. See\r\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\r\n * @property {String} [message] - More details about the error.\r\n * @property {Object} [credentials] - The credentials that failed the\r\n * authentication.\r\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\r\n * that failed the authentication.\r\n * @property {string} [credentials.password] - The password part of the\r\n * credentials that failed the authentication.\r\n *\r\n * NOTE If neither one of the errors is present, then the operation has been\r\n * canceled.\r\n */\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\n/**\r\n * Connects to the XMPP server using the specified credentials and contacts\r\n * Jicofo in order to obtain a session ID (which is then stored in the local\r\n * storage). The user's role of the parent conference will be upgraded to\r\n * moderator (by Jicofo). It's also used to join the conference when starting\r\n * from anonymous domain and only authenticated users are allowed to create new\r\n * rooms.\r\n *\r\n * @param {Object} options\r\n * @param {string} options.id - XMPP user's ID to log in. For example,\r\n * user@xmpp-server.com.\r\n * @param {string} options.password - XMPP user's password to log in with.\r\n * @param {string} [options.roomPassword] - The password to join the MUC with.\r\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\r\n * into the XMPP server was successful. The next step will be to obtain a new\r\n * session ID from Jicofo and join the MUC using it which will effectively\r\n * upgrade the user's role to moderator.\r\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\r\n * authenticating and upgrading the role of the specified XMPP user finishes and\r\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\r\n * process. If the process finishes successfully, the session ID has been stored\r\n * in the settings and the <tt>thenable</tt> is resolved. If the process\r\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\r\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\r\n * <tt>authenticationError</tt> property set depending on which of the steps has\r\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\r\n * thenable will be rejected with an empty object (i.e. no error property will\r\n * be set on the rejection reason).\r\n */\r\nexport default function authenticateAndUpgradeRole({\r\n    // 1. Log the specified XMPP user in.\r\n    id,\r\n    password,\r\n    onCreateResource,\r\n\r\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\r\n    //    successfully logged in.\r\n    onLoginSuccessful,\r\n\r\n    // 3. Join the MUC.\r\n    roomPassword\r\n}) {\r\n    let canceled = false;\r\n    let rejectPromise;\r\n    let xmpp = new XMPP(this.connection.options);\r\n\r\n    const process = new Promise((resolve, reject) => {\r\n        // The process is represented by a Thenable with a cancel method. The\r\n        // Thenable is implemented using Promise and the cancel using the\r\n        // Promise's reject function.\r\n        rejectPromise = reject;\r\n\r\n\r\n        xmpp.addListener(\r\n            CONNECTION_DISCONNECTED,\r\n            () => {\r\n                xmpp = undefined;\r\n            });\r\n        xmpp.addListener(\r\n            CONNECTION_ESTABLISHED,\r\n            () => {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                // Let the caller know that the XMPP login was successful.\r\n                onLoginSuccessful && onLoginSuccessful();\r\n\r\n                // Now authenticate with Jicofo and get a new session ID.\r\n                const room = xmpp.createRoom(\r\n                    this.options.name,\r\n                    this.options.config,\r\n                    onCreateResource\r\n                );\r\n\r\n                room.moderator.authenticate()\r\n                    .then(() => {\r\n                        xmpp && xmpp.disconnect();\r\n\r\n                        if (canceled) {\r\n                            return;\r\n                        }\r\n\r\n                        // At this point we should have the new session ID\r\n                        // stored in the settings. Jicofo will allow to join the\r\n                        // room.\r\n                        this.join(roomPassword);\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch(({ error, message }) => {\r\n                        xmpp.disconnect();\r\n\r\n                        reject({\r\n                            authenticationError: error,\r\n                            message\r\n                        });\r\n                    });\r\n            });\r\n        xmpp.addListener(\r\n            CONNECTION_FAILED,\r\n            (connectionError, message, credentials) => {\r\n                reject({\r\n                    connectionError,\r\n                    credentials,\r\n                    message\r\n                });\r\n                xmpp = undefined;\r\n            });\r\n\r\n        canceled || xmpp.connect(id, password);\r\n    });\r\n\r\n    /**\r\n     * Cancels the process, if it's in progress, of authenticating and upgrading\r\n     * the role of the local participant/user.\r\n     *\r\n     * @public\r\n     * @returns {void}\r\n     */\r\n    process.cancel = () => {\r\n        canceled = true;\r\n        rejectPromise({});\r\n        xmpp && xmpp.disconnect();\r\n    };\r\n\r\n    return process;\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Flag to set on senders / receivers to avoid setting up the encryption transform\r\n// more than once.\r\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\r\n\r\n/**\r\n * Context encapsulating the cryptography bits required for E2EE.\r\n * This uses the WebRTC Insertable Streams API which is explained in\r\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\r\n * that provides access to the encoded frames and allows them to be transformed.\r\n *\r\n * The encoded frame format is explained below in the _encodeFunction method.\r\n * High level design goals were:\r\n * - do not require changes to existing SFUs and retain (VP8) metadata.\r\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\r\n * - allow for the key to be rotated frequently.\r\n */\r\nexport default class E2EEcontext {\r\n    /**\r\n     * Build a new E2EE context instance, which will be used in a given conference.\r\n     */\r\n    constructor() {\r\n        // Determine the URL for the worker script. Relative URLs are relative to\r\n        // the entry point, not the script that launches the worker.\r\n        let baseUrl = '';\r\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\r\n\r\n        if (ljm) {\r\n            const idx = ljm.src.lastIndexOf('/');\r\n\r\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\r\n        }\r\n\r\n        // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\r\n        // synchronously load the JS.\r\n        const workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\r\n        const workerBlob\r\n            = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\r\n        const blobUrl = window.URL.createObjectURL(workerBlob);\r\n\r\n        this._worker = new Worker(blobUrl, { name: 'E2EE Worker' });\r\n        this._worker.onerror = e => logger.onerror(e);\r\n    }\r\n\r\n    /**\r\n     * Cleans up all state associated with the given participant. This is needed when a\r\n     * participant leaves the current conference.\r\n     *\r\n     * @param {string} participantId - The participant that just left.\r\n     */\r\n    cleanup(participantId) {\r\n        this._worker.postMessage({\r\n            operation: 'cleanup',\r\n            participantId\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\r\n     * a frame decoder.\r\n     *\r\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\r\n     * @param {string} kind - The kind of track this receiver belongs to.\r\n     * @param {string} participantId - The participant id that this receiver belongs to.\r\n     */\r\n    handleReceiver(receiver, kind, participantId) {\r\n        if (receiver[kJitsiE2EE]) {\r\n            return;\r\n        }\r\n        receiver[kJitsiE2EE] = true;\r\n\r\n        let receiverStreams;\r\n\r\n        if (receiver.createEncodedStreams) {\r\n            receiverStreams = receiver.createEncodedStreams();\r\n        } else {\r\n            receiverStreams = kind === 'video' ? receiver.createEncodedVideoStreams()\r\n                : receiver.createEncodedAudioStreams();\r\n        }\r\n\r\n        this._worker.postMessage({\r\n            operation: 'decode',\r\n            readableStream: receiverStreams.readable || receiverStreams.readableStream,\r\n            writableStream: receiverStreams.writable || receiverStreams.writableStream,\r\n            participantId\r\n        }, [ receiverStreams.readable || receiverStreams.readableStream,\r\n            receiverStreams.writable || receiverStreams.writableStream ]);\r\n    }\r\n\r\n    /**\r\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\r\n     * a frame encoder.\r\n     *\r\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\r\n     * @param {string} kind - The kind of track this sender belongs to.\r\n     * @param {string} participantId - The participant id that this sender belongs to.\r\n     */\r\n    handleSender(sender, kind, participantId) {\r\n        if (sender[kJitsiE2EE]) {\r\n            return;\r\n        }\r\n        sender[kJitsiE2EE] = true;\r\n\r\n        let senderStreams;\r\n\r\n        if (sender.createEncodedStreams) {\r\n            senderStreams = sender.createEncodedStreams();\r\n        } else {\r\n            senderStreams = kind === 'video' ? sender.createEncodedVideoStreams()\r\n                : sender.createEncodedAudioStreams();\r\n        }\r\n\r\n        this._worker.postMessage({\r\n            operation: 'encode',\r\n            readableStream: senderStreams.readable || senderStreams.readableStream,\r\n            writableStream: senderStreams.writable || senderStreams.writableStream,\r\n            participantId\r\n        }, [ senderStreams.readable || senderStreams.readableStream,\r\n            senderStreams.writable || senderStreams.writableStream ]);\r\n    }\r\n\r\n    /**\r\n     * Set the E2EE key for the specified participant.\r\n     *\r\n     * @param {string} participantId - the ID of the participant who's key we are setting.\r\n     * @param {Uint8Array | boolean} key - they key for the given participant.\r\n     * @param {Number} keyIndex - the key index.\r\n     */\r\n    setKey(participantId, key, keyIndex) {\r\n        this._worker.postMessage({\r\n            operation: 'setKey',\r\n            participantId,\r\n            key,\r\n            keyIndex\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set the E2EE signature key for the specified participant.\r\n     * @param {string} participantId - the ID of the participant who's key we are setting.\r\n     * @param {CryptoKey} key - the webcrypto key to set.\r\n     */\r\n    setSignatureKey(participantId, key) {\r\n        this._worker.postMessage({\r\n            operation: 'setSignatureKey',\r\n            participantId,\r\n            key\r\n        });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    default as NetworkInfo,\r\n    NETWORK_INFO_EVENT\r\n} from '../connectivity/NetworkInfo';\r\nimport { getJitterDelay } from '../util/Retry';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\r\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\r\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\r\n * the retry interval using the full jitter pattern.\r\n */\r\nexport default class ResumeTask {\r\n    /**\r\n     * Initializes new {@code RetryTask}.\r\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\r\n     */\r\n    constructor(stropheConnection) {\r\n        this._stropheConn = stropheConnection;\r\n\r\n        /**\r\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._resumeRetryN = 0;\r\n\r\n        this._retryDelay = undefined;\r\n    }\r\n\r\n    /**\r\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\r\n     * 'undefined' it means that no resume task was not scheduled.\r\n     */\r\n    get retryDelay() {\r\n        return this._retryDelay;\r\n    }\r\n\r\n    /**\r\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    schedule() {\r\n        this._cancelResume();\r\n\r\n        this._resumeRetryN += 1;\r\n\r\n        this._networkOnlineListener\r\n            = NetworkInfo.addEventListener(\r\n                NETWORK_INFO_EVENT,\r\n                ({ isOnline }) => {\r\n                    if (isOnline) {\r\n                        this._scheduleResume();\r\n                    } else {\r\n                        this._cancelResume();\r\n                    }\r\n                });\r\n\r\n        NetworkInfo.isOnline() && this._scheduleResume();\r\n    }\r\n\r\n    /**\r\n     * Schedules a delayed timeout which will execute the resume action.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _scheduleResume() {\r\n        if (this._resumeTimeout) {\r\n\r\n            // NO-OP\r\n            return;\r\n        }\r\n\r\n        // The retry delay will be:\r\n        //   1st retry: 1.5s - 3s\r\n        //   2nd retry: 3s - 9s\r\n        //   3rd and next retry: 4.5s - 27s\r\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\r\n        this._retryDelay = getJitterDelay(\r\n            /* retry */ this._resumeRetryN,\r\n            /* minDelay */ this._resumeRetryN * 1500,\r\n            3);\r\n\r\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\r\n\r\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\r\n    }\r\n\r\n    /**\r\n     * Cancels the delayed resume task.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _cancelResume() {\r\n        if (this._resumeTimeout) {\r\n            logger.info('Canceling connection resume task');\r\n            clearTimeout(this._resumeTimeout);\r\n            this._resumeTimeout = undefined;\r\n            this._retryDelay = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resumes the XMPP connection using the stream management plugin.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _resumeConnection() {\r\n        const { streamManagement } = this._stropheConn;\r\n        const resumeToken = streamManagement.getResumeToken();\r\n\r\n        // Things may have changed since when the task was scheduled\r\n        if (!resumeToken) {\r\n            return;\r\n        }\r\n\r\n        logger.info('Trying to resume the XMPP connection');\r\n\r\n        const url = new URL(this._stropheConn.service);\r\n        let { search } = url;\r\n        const pattern = /(previd=)([\\w-]+)/;\r\n        const oldToken = search.match(pattern);\r\n\r\n        // Replace previd if the previd value has changed.\r\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\r\n            search = search.replace(pattern, `$1${resumeToken}`);\r\n\r\n        // Append previd if it doesn't exist.\r\n        } else if (!oldToken) {\r\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\r\n        }\r\n\r\n        url.search = search;\r\n\r\n        this._stropheConn.service = url.toString();\r\n\r\n        streamManagement.resume();\r\n    }\r\n\r\n    /**\r\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\r\n     * example when the disconnect method is called.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    cancel() {\r\n        this._cancelResume();\r\n        this._resumeRetryN = 0;\r\n        if (this._networkOnlineListener) {\r\n            this._networkOnlineListener();\r\n            this._networkOnlineListener = null;\r\n        }\r\n    }\r\n}\r\n","/**\r\n* Gets next timeout using the full jitter pattern.\r\n*\r\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\r\n*\r\n* @param {number} retry - The retry number.\r\n* @param {number} minDelay - The minimal delay in milliseconds.\r\n* @param {number} base - The exponent base.\r\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\r\n* @private\r\n*/\r\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\r\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\r\n}\r\n","/**\r\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\r\n */\r\nexport default class LastRequestTracker {\r\n    /**\r\n     * Initializes new instance.\r\n     */\r\n    constructor() {\r\n        this._lastSuccess = null;\r\n    }\r\n\r\n    /**\r\n     * Starts tracking requests on the given connection.\r\n     *\r\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\r\n     * @param {Object} stropheConnection - Strophe connection instance.\r\n     */\r\n    startTracking(xmppConnection, stropheConnection) {\r\n        const originalRawInput = stropheConnection.rawInput;\r\n\r\n        stropheConnection.rawInput = (...args) => {\r\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\r\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\r\n            if (xmppConnection.connected) {\r\n                this._lastSuccess = Date.now();\r\n            }\r\n            originalRawInput.apply(stropheConnection, args);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns how many milliseconds have passed since the last successful BOSH request.\r\n     *\r\n     * @returns {number|null}\r\n     */\r\n    getTimeSinceLastSuccess() {\r\n        return this._lastSuccess\r\n            ? Date.now() - this._lastSuccess\r\n            : null;\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Default ping every 10 sec\r\n */\r\nconst PING_DEFAULT_INTERVAL = 10000;\r\n\r\n/**\r\n * Default ping timeout error after 5 sec of waiting.\r\n */\r\nconst PING_DEFAULT_TIMEOUT = 5000;\r\n\r\n/**\r\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\r\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\r\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\r\n */\r\nconst PING_DEFAULT_THRESHOLD = 2;\r\n\r\n/**\r\n * How often to send ping requests.\r\n */\r\nlet pingInterval;\r\n\r\n/**\r\n * The time to wait for ping responses.\r\n */\r\nlet pingTimeout;\r\n\r\n/**\r\n * How many ping failures will be tolerated before the connection is killed.\r\n */\r\nlet pingThreshold;\r\n\r\n/**\r\n * XEP-0199 ping plugin.\r\n *\r\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\r\n */\r\nexport default class PingConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     * Constructs new object\r\n     * @param {Object} options\r\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\r\n     * by the {@link PING_THRESHOLD} constant).\r\n     * @param {Function} options._getTimeSinceLastServerResponse - A function to obtain the last seen\r\n     * response from the server.\r\n     * @param {Object} options.pingOptions - The ping options if any.\r\n     * @constructor\r\n     */\r\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }) {\r\n        super();\r\n        this.failedPings = 0;\r\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\r\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\r\n\r\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\r\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\r\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\r\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\r\n\r\n        // The number of timestamps of send pings to keep.\r\n        // The current value is 2 minutes.\r\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\r\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\r\n    }\r\n\r\n    /**\r\n     * Initializes the plugin. Method called by Strophe.\r\n     * @param connection Strophe connection instance.\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Sends \"ping\" to given <tt>jid</tt>\r\n     * @param jid the JID to which ping request will be sent.\r\n     * @param success callback called on success.\r\n     * @param error callback called on error.\r\n     * @param timeout ms how long are we going to wait for the response. On\r\n     * timeout <tt>error<//t> callback is called with undefined error argument.\r\n     */\r\n    ping(jid, success, error, timeout) {\r\n        this._addPingExecutionTimestamp();\r\n\r\n        const iq = $iq({\r\n            type: 'get',\r\n            to: jid\r\n        });\r\n\r\n        iq.c('ping', { xmlns: Strophe.NS.PING });\r\n        this.connection.sendIQ2(iq, { timeout })\r\n            .then(success, error);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Starts to send ping in given interval to specified remote JID.\r\n     * This plugin supports only one such task and <tt>stopInterval</tt>\r\n     * must be called before starting a new one.\r\n     * @param remoteJid remote JID to which ping requests will be sent to.\r\n     */\r\n    startInterval(remoteJid) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = window.setInterval(() => {\r\n\r\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\r\n            // let's skip the ping\r\n\r\n            // server response is measured on raw input and ping response time is measured after all the xmpp\r\n            // processing is done, and when the last server response is a ping there can be slight misalignment of the\r\n            // times, we give it 100ms for that processing.\r\n            if (this._getTimeSinceLastServerResponse() + 100 < new Date() - this._lastServerCheck) {\r\n                // do this just to keep in sync the intervals so we can detect suspended device\r\n                this._addPingExecutionTimestamp();\r\n\r\n                this._lastServerCheck = new Date();\r\n                this.failedPings = 0;\r\n\r\n                return;\r\n            }\r\n\r\n            this.ping(remoteJid, () => {\r\n                this._lastServerCheck = new Date();\r\n\r\n                this.failedPings = 0;\r\n            }, error => {\r\n                this.failedPings += 1;\r\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\r\n\r\n                if (this.failedPings >= pingThreshold) {\r\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n                    logger.error(errmsg, error);\r\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\r\n                } else {\r\n                    logger.warn(errmsg, error);\r\n                }\r\n            }, pingTimeout);\r\n        }, this.pingInterval);\r\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\r\n    }\r\n\r\n    /**\r\n     * Stops current \"ping\"  interval task.\r\n     */\r\n    stopInterval() {\r\n        if (this.intervalId) {\r\n            window.clearInterval(this.intervalId);\r\n            this.intervalId = null;\r\n            this.failedPings = 0;\r\n            logger.info('Ping interval cleared');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the current time to the array of send ping timestamps.\r\n     * @private\r\n     */\r\n    _addPingExecutionTimestamp() {\r\n        this.pingExecIntervals.push(new Date().getTime());\r\n\r\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\r\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\r\n            this.pingExecIntervals.shift();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum time between the recent sent pings, if there is a\r\n     * big value it means the computer was inactive for some time(suspended).\r\n     * Checks the maximum gap between sending pings, considering and the\r\n     * current time. Trying to detect computer inactivity (sleep).\r\n     *\r\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\r\n     */\r\n    getPingSuspendTime() {\r\n        const pingIntervals = this.pingExecIntervals.slice();\r\n\r\n        // we need current time, as if ping was sent now\r\n        // if computer sleeps we will get correct interval after next\r\n        // scheduled ping, bet we sometimes need that interval before waiting\r\n        // for the next ping, on closing the connection on error.\r\n        pingIntervals.push(new Date().getTime());\r\n\r\n        let maxInterval = 0;\r\n        let previousTS = pingIntervals[0];\r\n\r\n        pingIntervals.forEach(e => {\r\n            const currentInterval = e - previousTS;\r\n\r\n            if (currentInterval > maxInterval) {\r\n                maxInterval = currentInterval;\r\n            }\r\n\r\n            previousTS = e;\r\n        });\r\n\r\n        // remove the interval between the ping sent\r\n        // this way in normal execution there is no suspend and the return\r\n        // will be 0 or close to 0.\r\n        maxInterval -= pingInterval;\r\n\r\n        // make sure we do not return less than 0\r\n        return Math.max(maxInterval, 0);\r\n    }\r\n}\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport ChatRoom from './ChatRoom';\r\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * MUC connection plugin.\r\n */\r\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\r\n    /**\r\n     *\r\n     * @param xmpp\r\n     */\r\n    constructor(xmpp) {\r\n        super();\r\n        this.xmpp = xmpp;\r\n        this.rooms = {};\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n\r\n        // add handlers (just once)\r\n        this.connection.addHandler(this.onPresence.bind(this), null,\r\n            'presence', null, null, null, null);\r\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\r\n            null, 'presence', 'unavailable', null);\r\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\r\n            'presence', 'error', null);\r\n        this.connection.addHandler(this.onMessage.bind(this), null,\r\n            'message', null, null);\r\n        this.connection.addHandler(this.onMute.bind(this),\r\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     * @param options\r\n     */\r\n    createRoom(jid, password, options) {\r\n        const roomJid = Strophe.getBareJidFromJid(jid);\r\n\r\n        if (this.rooms[roomJid]) {\r\n            const errmsg = 'You are already in the room!';\r\n\r\n            logger.error(errmsg);\r\n            throw new Error(errmsg);\r\n        }\r\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\r\n            password, this.xmpp, options);\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\r\n\r\n        return this.rooms[roomJid];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     */\r\n    doLeave(jid) {\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\r\n        delete this.rooms[jid];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresence(pres) {\r\n        const from = pres.getAttribute('from');\r\n\r\n        // What is this for? A workaround for something?\r\n        if (pres.getAttribute('type')) {\r\n            return true;\r\n        }\r\n\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        // Parse status.\r\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n            + '>status[code=\"201\"]').length) {\r\n            room.createNonAnonymousRoom();\r\n        }\r\n\r\n        room.onPresence(pres);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresenceUnavailable(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onPresenceUnavailable(pres, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresenceError(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onPresenceError(pres, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param msg\r\n     */\r\n    onMessage(msg) {\r\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\r\n        const from = msg.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onMessage(msg, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMute(iq) {\r\n        const from = iq.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        // Returning false would result in the listener being deregistered by Strophe\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onMute(iq);\r\n\r\n        return true;\r\n    }\r\n}\r\n","/* global $, __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport Lobby from './Lobby';\r\nimport XmppConnection from './XmppConnection';\r\nimport Moderator from './moderator';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nexport const parser = {\r\n    packet2JSON(xmlElement, nodes) {\r\n        for (const child of Array.from(xmlElement.children)) {\r\n            const node = {\r\n                attributes: {},\r\n                children: [],\r\n                tagName: child.tagName\r\n            };\r\n\r\n            for (const attr of Array.from(child.attributes)) {\r\n                node.attributes[attr.name] = attr.value;\r\n            }\r\n            const text = Strophe.getText(child);\r\n\r\n            if (text) {\r\n                // Using Strophe.getText will do work for traversing all direct\r\n                // child text nodes but returns an escaped value, which is not\r\n                // desirable at this point.\r\n                node.value = Strophe.xmlunescape(text);\r\n            }\r\n            nodes.push(node);\r\n            this.packet2JSON(child, node.children);\r\n        }\r\n    },\r\n    json2packet(nodes, packet) {\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            if (node) {\r\n                packet.c(node.tagName, node.attributes);\r\n                if (node.value) {\r\n                    packet.t(node.value);\r\n                }\r\n                if (node.children) {\r\n                    this.json2packet(node.children, packet);\r\n                }\r\n                packet.up();\r\n            }\r\n        }\r\n\r\n        // packet.up();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns array of JS objects from the presence JSON associated with the passed\r\n / nodeName\r\n * @param pres the presence JSON\r\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\r\n */\r\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < pres.length; i++) {\r\n        if (pres[i].tagName === nodeName) {\r\n            res.push(pres[i]);\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\r\n// of chaining function calls, allow long function call chains.\r\n/* eslint-disable newline-per-chained-call */\r\n\r\n/**\r\n * Array of affiliations that are allowed in members only room.\r\n * @type {string[]}\r\n */\r\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\r\n\r\n/**\r\n *\r\n */\r\nexport default class ChatRoom extends Listenable {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param {XmppConnection} connection - The XMPP connection instance.\r\n     * @param jid\r\n     * @param password\r\n     * @param XMPP\r\n     * @param options\r\n     * @param {boolean} options.disableFocus - when set to {@code false} will\r\n     * not invite Jicofo into the room.\r\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\r\n     * This is intended to be used only for lobby rooms.\r\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\r\n     */\r\n    constructor(connection, jid, password, XMPP, options) {\r\n        super();\r\n        this.xmpp = XMPP;\r\n        this.connection = connection;\r\n        this.roomjid = Strophe.getBareJidFromJid(jid);\r\n        this.myroomjid = jid;\r\n        this.password = password;\r\n        logger.info(`Joined MUC as ${this.myroomjid}`);\r\n        this.members = {};\r\n        this.presMap = {};\r\n        this.presHandlers = {};\r\n        this._removeConnListeners = [];\r\n        this.joined = false;\r\n        this.role = null;\r\n        this.focusMucJid = null;\r\n        this.noBridgeAvailable = false;\r\n        this.options = options || {};\r\n        this.moderator\r\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\r\n                connection: this.xmpp.options,\r\n                conference: this.options\r\n            });\r\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\r\n            this.lobby = new Lobby(this);\r\n        }\r\n        this.initPresenceMap(options);\r\n        this.lastPresences = {};\r\n        this.phoneNumber = null;\r\n        this.phonePin = null;\r\n        this.connectionTimes = {};\r\n        this.participantPropertyListener = null;\r\n\r\n        this.locked = false;\r\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     */\r\n    initPresenceMap(options = {}) {\r\n        this.presMap.to = this.myroomjid;\r\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\r\n        this.presMap.nodes = [];\r\n\r\n        if (options.statsId) {\r\n            this.presMap.nodes.push({\r\n                'tagName': 'stats-id',\r\n                'value': options.statsId\r\n            });\r\n        }\r\n\r\n        // We need to broadcast 'videomuted' status from the beginning, cause\r\n        // Jicofo makes decisions based on that. Initialize it with 'false'\r\n        // here.\r\n        this.addVideoInfoToPresence(false);\r\n\r\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\r\n            this.presMap.nodes.push({\r\n                'tagName': 'region',\r\n                'attributes': {\r\n                    id: options.deploymentInfo.userRegion,\r\n                    xmlns: 'http://jitsi.org/jitsi-meet'\r\n                }\r\n            });\r\n        }\r\n\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    /**\r\n     * Joins the chat room.\r\n     * @param {string} password - Password to unlock room on joining.\r\n     * @param {Object} customJoinPresenceExtensions - Key values object to be used\r\n     * for the initial presence, they key will be an xmpp node and its text is the value,\r\n     * and those will be added to the initial <x xmlns='http://jabber.org/protocol/muc'/>\r\n     * @returns {Promise} - resolved when join completes. At the time of this\r\n     * writing it's never rejected.\r\n     */\r\n    join(password, customJoinPresenceExtensions) {\r\n        this.password = password;\r\n\r\n        return new Promise(resolve => {\r\n            this.options.disableFocus\r\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\r\n\r\n            const preJoin\r\n                = this.options.disableFocus\r\n                    ? Promise.resolve()\r\n                    : this.moderator.allocateConferenceFocus();\r\n\r\n            preJoin.then(() => {\r\n                this.sendPresence(true, customJoinPresenceExtensions);\r\n                this._removeConnListeners.push(\r\n                    this.connection.addEventListener(\r\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\r\n                        this.onConnStatusChanged.bind(this))\r\n                );\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param fromJoin - Whether this is initial presence to join the room.\r\n     * @param customJoinPresenceExtensions - Object of key values to be added to the initial presence only.\r\n     */\r\n    sendPresence(fromJoin, customJoinPresenceExtensions) {\r\n        const to = this.presMap.to;\r\n\r\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\r\n            // Too early to send presence - not initialized\r\n            return;\r\n        }\r\n\r\n        const pres = $pres({ to });\r\n\r\n        // xep-0045 defines: \"including in the initial presence stanza an empty\r\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\r\n        // namespace\" and subsequent presences should not include that or it can\r\n        // be considered as joining, and server can send us the message history\r\n        // for the room on every presence\r\n        if (fromJoin) {\r\n            pres.c('x', { xmlns: this.presMap.xns });\r\n\r\n            if (this.password) {\r\n                pres.c('password').t(this.password).up();\r\n            }\r\n            if (customJoinPresenceExtensions) {\r\n                Object.keys(customJoinPresenceExtensions).forEach(key => {\r\n                    pres.c(key).t(customJoinPresenceExtensions[key]).up();\r\n                });\r\n            }\r\n            pres.up();\r\n        }\r\n\r\n        parser.json2packet(this.presMap.nodes, pres);\r\n\r\n        // we store time we last synced presence state\r\n        this.presenceSyncTime = Date.now();\r\n\r\n        this.connection.send(pres);\r\n        if (fromJoin) {\r\n            // XXX We're pressed for time here because we're beginning a complex\r\n            // and/or lengthy conference-establishment process which supposedly\r\n            // involves multiple RTTs. We don't have the time to wait for\r\n            // Strophe to decide to send our IQ.\r\n            this.connection.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the presence unavailable, signaling the server\r\n     * we want to leave the room.\r\n     */\r\n    doLeave() {\r\n        logger.log('do leave', this.myroomjid);\r\n        const pres = $pres({ to: this.myroomjid,\r\n            type: 'unavailable' });\r\n\r\n        this.presMap.length = 0;\r\n\r\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\r\n        // means that there may not be enough time to send the unavailable\r\n        // presence. Switching Strophe to synchronous sending is not much of an\r\n        // option because it may lead to a noticeable delay in navigating away\r\n        // from the current location. As a compromise, we will try to increase\r\n        // the chances of sending the unavailable presence within the short time\r\n        // span that we have upon unloading by invoking flush() on the\r\n        // connection. We flush() once before sending/queuing the unavailable\r\n        // presence in order to attemtp to have the unavailable presence at the\r\n        // top of the send queue. We flush() once more after sending/queuing the\r\n        // unavailable presence in order to attempt to have it sent as soon as\r\n        // possible.\r\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\r\n        !this.connection.isUsingWebSocket && this.connection.flush();\r\n        this.connection.send(pres);\r\n        this.connection.flush();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    discoRoomInfo() {\r\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\r\n\r\n        const getInfo\r\n            = $iq({\r\n                type: 'get',\r\n                to: this.roomjid\r\n            })\r\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\r\n\r\n        this.connection.sendIQ(getInfo, result => {\r\n            const locked\r\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\r\n                    .length\r\n                    === 1;\r\n\r\n            if (locked !== this.locked) {\r\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\r\n                this.locked = locked;\r\n            }\r\n\r\n            const meetingIdValEl\r\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\r\n\r\n            if (meetingIdValEl.length) {\r\n                this.setMeetingId(meetingIdValEl.text());\r\n            } else {\r\n                logger.warn('No meeting ID from backend');\r\n            }\r\n\r\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\r\n\r\n            const lobbyRoomField\r\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\r\n\r\n            if (this.lobby) {\r\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\r\n            }\r\n\r\n            if (membersOnly !== this.membersOnlyEnabled) {\r\n                this.membersOnlyEnabled = membersOnly;\r\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\r\n            }\r\n\r\n        }, error => {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n            logger.error('Error getting room info: ', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the meeting unique Id (received from the backend).\r\n     *\r\n     * @param {string} meetingId - The new meetings id.\r\n     * @returns {void}\r\n     */\r\n    setMeetingId(meetingId) {\r\n        if (this.meetingId !== meetingId) {\r\n            if (this.meetingId) {\r\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\r\n            }\r\n            this.meetingId = meetingId;\r\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    createNonAnonymousRoom() {\r\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\r\n\r\n        if (this.options.disableDiscoInfo) {\r\n            return;\r\n        }\r\n\r\n        const getForm = $iq({ type: 'get',\r\n            to: this.roomjid })\r\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\r\n            .c('x', { xmlns: 'jabber:x:data',\r\n                type: 'submit' });\r\n\r\n        this.connection.sendIQ(getForm, form => {\r\n            if (!$(form).find(\r\n                    '>query>x[xmlns=\"jabber:x:data\"]'\r\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\r\n                const errmsg = 'non-anonymous rooms not supported';\r\n\r\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n                logger.error(errmsg);\r\n\r\n                return;\r\n            }\r\n\r\n            const formSubmit = $iq({ to: this.roomjid,\r\n                type: 'set' })\r\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\r\n\r\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\r\n                type: 'submit' });\r\n\r\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\r\n                .c('value')\r\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\r\n\r\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\r\n                .c('value').t('anyone').up().up();\r\n\r\n            this.connection.sendIQ(formSubmit);\r\n\r\n        }, error => {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n            logger.error('Error getting room configuration form: ', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles Xmpp Connection status updates.\r\n     *\r\n     * @param {Strophe.Status} status - The Strophe connection status.\r\n     */\r\n    onConnStatusChanged(status) {\r\n        // Send cached presence when the XMPP connection is re-established.\r\n        if (status === XmppConnection.Status.CONNECTED) {\r\n            this.sendPresence();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresence(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const member = {};\r\n        const statusEl = pres.getElementsByTagName('status')[0];\r\n\r\n        if (statusEl) {\r\n            member.status = statusEl.textContent || '';\r\n        }\r\n        let hasStatusUpdate = false;\r\n        let hasVersionUpdate = false;\r\n        const xElement\r\n            = pres.getElementsByTagNameNS(\r\n                'http://jabber.org/protocol/muc#user', 'x')[0];\r\n        const mucUserItem\r\n            = xElement && xElement.getElementsByTagName('item')[0];\r\n\r\n        member.affiliation\r\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\r\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\r\n\r\n        // Focus recognition\r\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\r\n\r\n        member.jid = jid;\r\n        member.isFocus\r\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\r\n        member.isHiddenDomain\r\n            = jid && jid.indexOf('@') > 0\r\n                && this.options.hiddenDomain\r\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\r\n\r\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\r\n            fromHiddenDomain: member.isHiddenDomain,\r\n            presence: pres\r\n        });\r\n\r\n        const xEl = pres.querySelector('x');\r\n\r\n        if (xEl) {\r\n            xEl.remove();\r\n        }\r\n\r\n        const nodes = [];\r\n\r\n        parser.packet2JSON(pres, nodes);\r\n        this.lastPresences[from] = nodes;\r\n\r\n        // process nodes to extract data needed for MUC_JOINED and\r\n        // MUC_MEMBER_JOINED events\r\n        const extractIdentityInformation = node => {\r\n            const identity = {};\r\n            const userInfo = node.children.find(c => c.tagName === 'user');\r\n\r\n            if (userInfo) {\r\n                identity.user = {};\r\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\r\n                    const child\r\n                        = userInfo.children.find(c => c.tagName === tag);\r\n\r\n                    if (child) {\r\n                        identity.user[tag] = child.value;\r\n                    }\r\n                }\r\n            }\r\n            const groupInfo = node.children.find(c => c.tagName === 'group');\r\n\r\n            if (groupInfo) {\r\n                identity.group = groupInfo.value;\r\n            }\r\n\r\n            return identity;\r\n        };\r\n\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            switch (node.tagName) {\r\n            case 'bot': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n                const { type } = attributes;\r\n\r\n                member.botType = type;\r\n                break;\r\n            }\r\n            case 'nick':\r\n                member.nick = node.value;\r\n                break;\r\n            case 'email':\r\n                member.email = node.value;\r\n                break;\r\n            case 'userId':\r\n                member.id = node.value;\r\n                break;\r\n            case 'stats-id':\r\n                member.statsID = node.value;\r\n                break;\r\n            case 'identity':\r\n                member.identity = extractIdentityInformation(node);\r\n                break;\r\n            case 'stat': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n                const { name } = attributes;\r\n\r\n                if (name === 'version') {\r\n                    member.version = attributes.value;\r\n                }\r\n                break;\r\n            }\r\n            }\r\n        }\r\n\r\n        if (from === this.myroomjid) {\r\n            const newRole\r\n                = member.affiliation === 'owner' ? member.role : 'none';\r\n\r\n            if (this.role !== newRole) {\r\n                this.role = newRole;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\r\n                    this.role);\r\n            }\r\n            if (!this.joined) {\r\n                this.joined = true;\r\n                const now = this.connectionTimes['muc.joined']\r\n                    = window.performance.now();\r\n\r\n                logger.log('(TIME) MUC joined:\\t', now);\r\n\r\n                // set correct initial state of locked\r\n                if (this.password) {\r\n                    this.locked = true;\r\n                }\r\n\r\n                // Re-send presence in case any presence updates were added,\r\n                // but blocked from sending, during the join process.\r\n                // send the presence only if there was a modification after we had synced it\r\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\r\n                    this.sendPresence();\r\n                }\r\n\r\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\r\n\r\n                // Now let's check the disco-info to retrieve the\r\n                // meeting Id if any\r\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\r\n            }\r\n        } else if (jid === undefined) {\r\n            logger.info('Ignoring member with undefined JID');\r\n        } else if (this.members[from] === undefined) {\r\n            // new participant\r\n            this.members[from] = member;\r\n            logger.log('entered', from, member);\r\n            hasStatusUpdate = member.status !== undefined;\r\n            hasVersionUpdate = member.version !== undefined;\r\n            if (member.isFocus) {\r\n                this._initFocus(from, jid);\r\n            } else {\r\n                // identity is being added to member joined, so external\r\n                // services can be notified for that (currently identity is\r\n                // not used inside library)\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_MEMBER_JOINED,\r\n                    from,\r\n                    member.nick,\r\n                    member.role,\r\n                    member.isHiddenDomain,\r\n                    member.statsID,\r\n                    member.status,\r\n                    member.identity ? member.identity : member.email,\r\n                    member.botType,\r\n                    member.jid);\r\n\r\n                // we are reporting the status with the join\r\n                // so we do not want a second event about status update\r\n                hasStatusUpdate = false;\r\n            }\r\n        } else {\r\n            // Presence update for existing participant\r\n            // Watch role change:\r\n            const memberOfThis = this.members[from];\r\n\r\n            if (memberOfThis.role !== member.role) {\r\n                memberOfThis.role = member.role;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\r\n            }\r\n\r\n            // affiliation changed\r\n            if (memberOfThis.affiliation !== member.affiliation) {\r\n                memberOfThis.affiliation = member.affiliation;\r\n            }\r\n\r\n            // fire event that botType had changed\r\n            if (memberOfThis.botType !== member.botType) {\r\n                memberOfThis.botType = member.botType;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\r\n                    from,\r\n                    member.botType);\r\n            }\r\n\r\n            if (member.isFocus) {\r\n                // From time to time first few presences of the focus are not\r\n                // containing it's jid. That way we can mark later the focus\r\n                // member instead of not marking it at all and not starting the\r\n                // conference.\r\n                // FIXME: Maybe there is a better way to handle this issue. It\r\n                // seems there is some period of time in prosody that the\r\n                // configuration form is received but not applied. And if any\r\n                // participant joins during that period of time the first\r\n                // presence from the focus won't contain\r\n                // <item jid=\"focus...\" />.\r\n                memberOfThis.isFocus = true;\r\n                this._initFocus(from, jid);\r\n            }\r\n\r\n            // store the new display name\r\n            if (member.displayName) {\r\n                memberOfThis.displayName = member.displayName;\r\n            }\r\n\r\n            // update stored status message to be able to detect changes\r\n            if (memberOfThis.status !== member.status) {\r\n                hasStatusUpdate = true;\r\n                memberOfThis.status = member.status;\r\n            }\r\n\r\n            if (memberOfThis.version !== member.version) {\r\n                hasVersionUpdate = true;\r\n                memberOfThis.version = member.version;\r\n            }\r\n        }\r\n\r\n        // after we had fired member or room joined events, lets fire events\r\n        // for the rest info we got in presence\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            switch (node.tagName) {\r\n            case 'nick':\r\n                if (!member.isFocus) {\r\n                    const displayName\r\n                        = this.xmpp.options.displayJids\r\n                            ? Strophe.getResourceFromJid(from)\r\n                            : member.nick;\r\n\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\r\n                        from,\r\n                        displayName);\r\n                }\r\n                break;\r\n            case 'bridgeNotAvailable':\r\n                if (member.isFocus && !this.noBridgeAvailable) {\r\n                    this.noBridgeAvailable = true;\r\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\r\n                }\r\n                break;\r\n            case 'conference-properties':\r\n                if (member.isFocus) {\r\n                    const properties = {};\r\n\r\n                    for (let j = 0; j < node.children.length; j++) {\r\n                        const { attributes } = node.children[j];\r\n\r\n                        if (attributes && attributes.key) {\r\n                            properties[attributes.key] = attributes.value;\r\n                        }\r\n                    }\r\n\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\r\n                }\r\n                break;\r\n            case 'transcription-status': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n\r\n                const { status } = attributes;\r\n\r\n                if (status && status !== this.transcriptionStatus) {\r\n                    this.transcriptionStatus = status;\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\r\n                        status\r\n                    );\r\n                }\r\n\r\n\r\n                break;\r\n            }\r\n            case 'call-control': {\r\n                const att = node.attributes;\r\n\r\n                if (!att) {\r\n                    break;\r\n                }\r\n                this.phoneNumber = att.phone || null;\r\n                this.phonePin = att.pin || null;\r\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\r\n                break;\r\n            }\r\n            default:\r\n                this.processNode(node, from);\r\n            }\r\n        }\r\n\r\n        // Trigger status message update if necessary\r\n        if (hasStatusUpdate) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.PRESENCE_STATUS,\r\n                from,\r\n                member.status);\r\n        }\r\n\r\n        if (hasVersionUpdate) {\r\n            logger.info(`Received version for ${jid}: ${member.version}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize some properties when the focus participant is verified.\r\n     * @param from jid of the focus\r\n     * @param mucJid the jid of the focus in the muc\r\n     */\r\n    _initFocus(from, mucJid) {\r\n        this.focusMucJid = from;\r\n\r\n        logger.info(`Ignore focus: ${from}, real JID: ${mucJid}`);\r\n        this.xmpp.caps.getFeatures(mucJid, 15000).then(features => {\r\n            this.focusFeatures = features;\r\n            logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\r\n        }, error => {\r\n            logger.error('Failed to discover Jicofo features', error && error.message);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the special listener to be used for \"command\"s whose name starts\r\n     * with \"jitsi_participant_\".\r\n     */\r\n    setParticipantPropertyListener(listener) {\r\n        this.participantPropertyListener = listener;\r\n    }\r\n\r\n    /**\r\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\r\n     * @returns {boolean}\r\n     */\r\n    supportsRestartByTerminate() {\r\n        return this.focusFeatures\r\n            ? this.focusFeatures.has('https://jitsi.org/meet/jicofo/terminate-restart')\r\n            : false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param node\r\n     * @param from\r\n     */\r\n    processNode(node, from) {\r\n        // make sure we catch all errors coming from any handler\r\n        // otherwise we can remove the presence handler from strophe\r\n        try {\r\n            let tagHandlers = this.presHandlers[node.tagName];\r\n\r\n            if (node.tagName.startsWith('jitsi_participant_')) {\r\n                tagHandlers = [ this.participantPropertyListener ];\r\n            }\r\n\r\n            if (tagHandlers) {\r\n                tagHandlers.forEach(handler => {\r\n                    handler(node, Strophe.getResourceFromJid(from), from);\r\n                });\r\n            }\r\n        } catch (e) {\r\n            GlobalOnErrorHandler.callErrorHandler(e);\r\n            logger.error(`Error processing:${node.tagName} node.`, e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send text message to the other participants in the conference\r\n     * @param message\r\n     * @param elementName\r\n     * @param nickname\r\n     */\r\n    sendMessage(message, elementName, nickname) {\r\n        const msg = $msg({ to: this.roomjid,\r\n            type: 'groupchat' });\r\n\r\n        // We are adding the message in a packet extension. If this element\r\n        // is different from 'body', we add a custom namespace.\r\n        // e.g. for 'json-message' extension of message stanza.\r\n        if (elementName === 'body') {\r\n            msg.c(elementName, message).up();\r\n        } else {\r\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\r\n                .up();\r\n        }\r\n        if (nickname) {\r\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\r\n                .t(nickname)\r\n                .up()\r\n                .up();\r\n        }\r\n        this.connection.send(msg);\r\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Send private text message to another participant of the conference\r\n     * @param id id/muc resource of the receiver\r\n     * @param message\r\n     * @param elementName\r\n     * @param nickname\r\n     */\r\n    sendPrivateMessage(id, message, elementName, nickname) {\r\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\r\n            type: 'chat' });\r\n\r\n        // We are adding the message in packet. If this element is different\r\n        // from 'body', we add our custom namespace for the same.\r\n        // e.g. for 'json-message' message extension.\r\n        if (elementName === 'body') {\r\n            msg.c(elementName, message).up();\r\n        } else {\r\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\r\n                .up();\r\n        }\r\n        if (nickname) {\r\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\r\n                .t(nickname)\r\n                .up()\r\n                .up();\r\n        }\r\n\r\n        this.connection.send(msg);\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\r\n    }\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param subject\r\n     */\r\n    setSubject(subject) {\r\n        const msg = $msg({ to: this.roomjid,\r\n            type: 'groupchat' });\r\n\r\n        msg.c('subject', subject);\r\n        this.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Called when participant leaves.\r\n     * @param jid the jid of the participant that leaves\r\n     * @param skipEvents optional params to skip any events, including check\r\n     * whether this is the focus that left\r\n     */\r\n    onParticipantLeft(jid, skipEvents) {\r\n        delete this.lastPresences[jid];\r\n\r\n        if (skipEvents) {\r\n            return;\r\n        }\r\n\r\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\r\n\r\n        this.moderator.onMucMemberLeft(jid);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     * @param from\r\n     */\r\n    onPresenceUnavailable(pres, from) {\r\n        // ignore presence\r\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\r\n            return true;\r\n        }\r\n\r\n        // room destroyed ?\r\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\r\n\r\n        if (destroySelect.length) {\r\n            let reason;\r\n            const reasonSelect\r\n                = $(pres).find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n                        + '>destroy>reason');\r\n\r\n            if (reasonSelect.length) {\r\n                reason = reasonSelect.text();\r\n            }\r\n\r\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\r\n            this.connection.emuc.doLeave(this.roomjid);\r\n\r\n            return true;\r\n        }\r\n\r\n        // Status code 110 indicates that this notification is \"self-presence\".\r\n        const isSelfPresence\r\n            = $(pres)\r\n                .find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\r\n                        + 'status[code=\"110\"]')\r\n                .length;\r\n        const isKick\r\n            = $(pres)\r\n                .find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n                        + '>status[code=\"307\"]')\r\n                .length;\r\n        const membersKeys = Object.keys(this.members);\r\n\r\n        if (isKick) {\r\n            const actorSelect\r\n                = $(pres)\r\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\r\n\r\n            let actorNick;\r\n\r\n            if (actorSelect.length) {\r\n                actorNick = actorSelect.attr('nick');\r\n            }\r\n\r\n            // we first fire the kicked so we can show the participant\r\n            // who kicked, before notifying that participant left\r\n            // we fire kicked for us and for any participant kicked\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.KICKED,\r\n                isSelfPresence,\r\n                actorNick,\r\n                Strophe.getResourceFromJid(from));\r\n        }\r\n\r\n        if (isSelfPresence) {\r\n            // If the status code is 110 this means we're leaving and we would\r\n            // like to remove everyone else from our view, so we trigger the\r\n            // event.\r\n            membersKeys.forEach(jid => {\r\n                const member = this.members[jid];\r\n\r\n                delete this.members[jid];\r\n                this.onParticipantLeft(jid, member.isFocus);\r\n            });\r\n            this.connection.emuc.doLeave(this.roomjid);\r\n\r\n            // we fire muc_left only if this is not a kick,\r\n            // kick has both statuses 110 and 307.\r\n            if (!isKick) {\r\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\r\n            }\r\n        } else {\r\n            delete this.members[from];\r\n            this.onParticipantLeft(from, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param msg\r\n     * @param from\r\n     */\r\n    onMessage(msg, from) {\r\n        const nick\r\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\r\n                .text()\r\n            || Strophe.getResourceFromJid(from);\r\n\r\n        const type = msg.getAttribute('type');\r\n\r\n        if (type === 'error') {\r\n            const errorMsg = $(msg).find('>error>text').text();\r\n\r\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\r\n\r\n            return true;\r\n        }\r\n\r\n        const txt = $(msg).find('>body').text();\r\n        const subject = $(msg).find('>subject');\r\n\r\n        if (subject.length) {\r\n            const subjectText = subject.text();\r\n\r\n            if (subjectText || subjectText === '') {\r\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\r\n                logger.log(`Subject is changed to ${subjectText}`);\r\n            }\r\n        }\r\n\r\n        // xep-0203 delay\r\n        let stamp = $(msg).find('>delay').attr('stamp');\r\n\r\n        if (!stamp) {\r\n            // or xep-0091 delay, UTC timestamp\r\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\r\n\r\n            if (stamp) {\r\n                // the format is CCYYMMDDThh:mm:ss\r\n                const dateParts\r\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\r\n\r\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\r\n            }\r\n        }\r\n\r\n        if (from === this.roomjid) {\r\n            let invite;\r\n\r\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\r\n                this.discoRoomInfo();\r\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\r\n                        && invite.length) {\r\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\r\n                let password;\r\n\r\n                if (passwordSelect && passwordSelect.length) {\r\n                    password = passwordSelect.text();\r\n                }\r\n\r\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\r\n                    from, invite.attr('from'), txt, password);\r\n            }\r\n        }\r\n\r\n        const jsonMessage = $(msg).find('>json-message').text();\r\n\r\n        if (jsonMessage) {\r\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\r\n\r\n            // We emit this event if the message is a valid json, and is not\r\n            // delivered after a delay, i.e. stamp is undefined.\r\n            // e.g. - subtitles should not be displayed if delayed.\r\n            if (parsedJson && stamp === undefined) {\r\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\r\n                    from, parsedJson);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (txt) {\r\n            if (type === 'chat') {\r\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\r\n                        from, nick, txt, this.myroomjid, stamp);\r\n            } else if (type === 'groupchat') {\r\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\r\n                        from, nick, txt, this.myroomjid, stamp);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     * @param from\r\n     */\r\n    onPresenceError(pres, from) {\r\n        if ($(pres)\r\n                .find(\r\n                    '>error[type=\"auth\"]'\r\n                        + '>not-authorized['\r\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\r\n                .length) {\r\n            logger.log('on password required', from);\r\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\r\n        } else if ($(pres)\r\n                .find(\r\n                    '>error[type=\"cancel\"]'\r\n                        + '>not-allowed['\r\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\r\n                .length) {\r\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\r\n\r\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\r\n                // enter the room by replying with 'not-authorized'. This would\r\n                // result in reconnection from authorized domain.\r\n                // We're either missing Jicofo/Prosody config for anonymous\r\n                // domains or something is wrong.\r\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\r\n\r\n            } else {\r\n                logger.warn('onPresError ', pres);\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\r\n            }\r\n        } else if ($(pres).find('>error>service-unavailable').length) {\r\n            logger.warn('Maximum users limit for the room has been reached',\r\n                pres);\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\r\n        } else if ($(pres)\r\n            .find(\r\n                '>error[type=\"auth\"]'\r\n                + '>registration-required['\r\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\r\n\r\n            // let's extract the lobby jid from the custom field\r\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\r\n            let lobbyRoomJid;\r\n\r\n            if (lobbyRoomNode.length) {\r\n                lobbyRoomJid = lobbyRoomNode.text();\r\n            }\r\n\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\r\n        } else {\r\n            logger.warn('onPresError ', pres);\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param affiliation\r\n     */\r\n    setAffiliation(jid, affiliation) {\r\n        const grantIQ = $iq({\r\n            to: this.roomjid,\r\n            type: 'set'\r\n        })\r\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n        .c('item', {\r\n            affiliation,\r\n            nick: Strophe.getResourceFromJid(jid)\r\n        })\r\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\r\n        .up().up().up();\r\n\r\n        this.connection.sendIQ(\r\n            grantIQ,\r\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\r\n            error => logger.log('Set affiliation of participant error: ', error));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     */\r\n    kick(jid) {\r\n        const kickIQ = $iq({ to: this.roomjid,\r\n            type: 'set' })\r\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\r\n                role: 'none' })\r\n            .c('reason').t('You have been kicked.').up().up().up();\r\n\r\n        this.connection.sendIQ(\r\n            kickIQ,\r\n            result => logger.log('Kick participant with jid: ', jid, result),\r\n            error => logger.log('Kick participant error: ', error));\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @param onNotSupported\r\n     */\r\n    lockRoom(key, onSuccess, onError, onNotSupported) {\r\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\r\n        this.connection.sendIQ(\r\n            $iq({\r\n                to: this.roomjid,\r\n                type: 'get'\r\n            })\r\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\r\n            res => {\r\n                if ($(res)\r\n                        .find(\r\n                            '>query>x[xmlns=\"jabber:x:data\"]'\r\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\r\n                        .length) {\r\n                    const formsubmit\r\n                        = $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set'\r\n                        })\r\n                            .c('query', {\r\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\r\n                            });\r\n\r\n                    formsubmit.c('x', {\r\n                        xmlns: 'jabber:x:data',\r\n                        type: 'submit'\r\n                    });\r\n                    formsubmit\r\n                        .c('field', { 'var': 'FORM_TYPE' })\r\n                        .c('value')\r\n                        .t('http://jabber.org/protocol/muc#roomconfig')\r\n                        .up()\r\n                        .up();\r\n                    formsubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\r\n                        .c('value')\r\n                        .t(key)\r\n                        .up()\r\n                        .up();\r\n                    formsubmit\r\n                        .c('field',\r\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\r\n                        .c('value')\r\n                        .t(key === null || key.length === 0 ? '0' : '1')\r\n                        .up()\r\n                        .up();\r\n\r\n                    // if members only enabled\r\n                    if (this.membersOnlyEnabled) {\r\n                        formsubmit\r\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\r\n                            .c('value')\r\n                            .t('true')\r\n                            .up()\r\n                            .up();\r\n                    }\r\n\r\n                    // Fixes a bug in prosody 0.9.+\r\n                    // https://prosody.im/issues/issue/373\r\n                    formsubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\r\n                        .c('value')\r\n                        .t('anyone')\r\n                        .up()\r\n                        .up();\r\n\r\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\r\n                } else {\r\n                    onNotSupported();\r\n                }\r\n            },\r\n            onError);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Turns off or on the members only config for the main room.\r\n     *\r\n     * @param {boolean} enabled - Whether to turn it on or off.\r\n     * @param onSuccess - optional callback.\r\n     * @param onError - optional callback.\r\n     */\r\n    setMembersOnly(enabled, onSuccess, onError) {\r\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\r\n            // first grant membership to all that are in the room\r\n            // currently there is a bug in prosody where it handles only the first item\r\n            // that's why we will send iq per member\r\n            Object.values(this.members).forEach(m => {\r\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\r\n                    this.xmpp.connection.sendIQ(\r\n                        $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set' })\r\n                        .c('query', {\r\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n                        .c('item', {\r\n                            'affiliation': 'member',\r\n                            'jid': m.jid\r\n                        }).up().up());\r\n                }\r\n            });\r\n        }\r\n\r\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\r\n\r\n        this.xmpp.connection.sendIQ(\r\n            $iq({\r\n                to: this.roomjid,\r\n                type: 'get'\r\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\r\n            res => {\r\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\r\n                    const formToSubmit\r\n                        = $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set'\r\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\r\n\r\n                    formToSubmit.c('x', {\r\n                        xmlns: 'jabber:x:data',\r\n                        type: 'submit'\r\n                    });\r\n                    formToSubmit\r\n                        .c('field', { 'var': 'FORM_TYPE' })\r\n                        .c('value')\r\n                        .t('http://jabber.org/protocol/muc#roomconfig')\r\n                        .up()\r\n                        .up();\r\n                    formToSubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\r\n                        .c('value')\r\n                        .t(enabled ? 'true' : 'false')\r\n                        .up()\r\n                        .up();\r\n\r\n                    // if room is locked from other participant or we are locking it\r\n                    if (this.locked) {\r\n                        formToSubmit\r\n                            .c('field',\r\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\r\n                            .c('value')\r\n                            .t('1')\r\n                            .up()\r\n                            .up();\r\n                    }\r\n\r\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\r\n                } else {\r\n                    errorCallback(new Error('Setting members only room not supported!'));\r\n                }\r\n            },\r\n            errorCallback);\r\n    }\r\n\r\n    /**\r\n     * Adds the key to the presence map, overriding any previous value.\r\n     * @param key\r\n     * @param values\r\n     */\r\n    addToPresence(key, values) {\r\n        values.tagName = key;\r\n        this.removeFromPresence(key);\r\n        this.presMap.nodes.push(values);\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    /**\r\n     * Retrieves a value from the presence map.\r\n     *\r\n     * @param {string} key - The key to find the value for.\r\n     * @returns {Object?}\r\n     */\r\n    getFromPresence(key) {\r\n        return this.presMap.nodes.find(node => key === node.tagName);\r\n    }\r\n\r\n    /**\r\n     * Removes a key from the presence map.\r\n     * @param key\r\n     */\r\n    removeFromPresence(key) {\r\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\r\n\r\n        this.presMap.nodes = nodes;\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name\r\n     * @param handler\r\n     */\r\n    addPresenceListener(name, handler) {\r\n        if (typeof handler !== 'function') {\r\n            throw new Error('\"handler\" is not a function');\r\n        }\r\n        let tagHandlers = this.presHandlers[name];\r\n\r\n        if (!tagHandlers) {\r\n            this.presHandlers[name] = tagHandlers = [];\r\n        }\r\n        if (tagHandlers.indexOf(handler) === -1) {\r\n            tagHandlers.push(handler);\r\n        } else {\r\n            logger.warn(\r\n                `Trying to add the same handler more than once for: ${name}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name\r\n     * @param handler\r\n     */\r\n    removePresenceListener(name, handler) {\r\n        const tagHandlers = this.presHandlers[name];\r\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\r\n\r\n        // eslint-disable-next-line no-negated-condition\r\n        if (handlerIdx !== -1) {\r\n            tagHandlers.splice(handlerIdx, 1);\r\n        } else {\r\n            logger.warn(`Handler for: ${name} was not registered`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\r\n     * focus.\r\n     * @param mucJid the full MUC address of the user to be checked.\r\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\r\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\r\n     * the MUC then <tt>null</tt> is returned.\r\n     */\r\n    isFocus(mucJid) {\r\n        const member = this.members[mucJid];\r\n\r\n        if (member) {\r\n            return member.isFocus;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    isModerator() {\r\n        return this.role === 'moderator';\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param peerJid\r\n     */\r\n    getMemberRole(peerJid) {\r\n        if (this.members[peerJid]) {\r\n            return this.members[peerJid].role;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    setVideoMute(mute, callback) {\r\n        this.sendVideoInfoPresence(mute);\r\n        if (callback) {\r\n            callback(mute);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    setAudioMute(mute, callback) {\r\n        return this.sendAudioInfoPresence(mute, callback);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    addAudioInfoToPresence(mute) {\r\n        this.addToPresence(\r\n            'audiomuted',\r\n            {\r\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\r\n                value: mute.toString()\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    sendAudioInfoPresence(mute, callback) {\r\n        this.addAudioInfoToPresence(mute);\r\n\r\n        // FIXME resend presence on CONNECTED\r\n        this.sendPresence();\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    addVideoInfoToPresence(mute) {\r\n        this.addToPresence(\r\n            'videomuted',\r\n            {\r\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\r\n                value: mute.toString()\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    sendVideoInfoPresence(mute) {\r\n        this.addVideoInfoToPresence(mute);\r\n        this.sendPresence();\r\n    }\r\n\r\n    /**\r\n     * Obtains the info about given media advertised in the MUC presence of\r\n     * the participant identified by the given endpoint JID.\r\n     * @param {string} endpointId the endpoint ID mapped to the participant\r\n     * which corresponds to MUC nickname.\r\n     * @param {MediaType} mediaType the type of the media for which presence\r\n     * info will be obtained.\r\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\r\n     * info or <tt>null</tt> either if there is no presence available or if\r\n     * the media type given is invalid.\r\n     */\r\n    getMediaPresenceInfo(endpointId, mediaType) {\r\n        // Will figure out current muted status by looking up owner's presence\r\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\r\n\r\n        if (!pres) {\r\n            // No presence available\r\n            return null;\r\n        }\r\n        const data = {\r\n            muted: false, // unmuted by default\r\n            videoType: undefined // no video type by default\r\n        };\r\n        let mutedNode = null;\r\n\r\n        if (mediaType === MediaType.AUDIO) {\r\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\r\n        } else if (mediaType === MediaType.VIDEO) {\r\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\r\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\r\n\r\n            if (videoTypeNode.length > 0) {\r\n                data.videoType = videoTypeNode[0].value;\r\n            }\r\n        } else {\r\n            logger.error(`Unsupported media type: ${mediaType}`);\r\n\r\n            return null;\r\n        }\r\n\r\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the SIP calls are supported and false otherwise\r\n     */\r\n    isSIPCallingSupported() {\r\n        if (this.moderator) {\r\n            return this.moderator.isSipGatewayEnabled();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Dials a number.\r\n     * @param number the number\r\n     */\r\n    dial(number) {\r\n        return this.connection.rayo.dial(number, 'fromnumber',\r\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\r\n            this.focusMucJid);\r\n    }\r\n\r\n    /**\r\n     * Hangup an existing call\r\n     */\r\n    hangup() {\r\n        return this.connection.rayo.hangup();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Lobby}\r\n     */\r\n    getLobby() {\r\n        return this.lobby;\r\n    }\r\n\r\n    /**\r\n     * Returns the phone number for joining the conference.\r\n     */\r\n    getPhoneNumber() {\r\n        return this.phoneNumber;\r\n    }\r\n\r\n    /**\r\n     * Returns the pin for joining the conference with phone.\r\n     */\r\n    getPhonePin() {\r\n        return this.phonePin;\r\n    }\r\n\r\n    /**\r\n     * Returns the meeting unique ID if any came from backend.\r\n     *\r\n     * @returns {string} - The meeting ID.\r\n     */\r\n    getMeetingId() {\r\n        return this.meetingId;\r\n    }\r\n\r\n    /**\r\n     * Mutes remote participant.\r\n     * @param jid of the participant\r\n     * @param mute\r\n     */\r\n    muteParticipant(jid, mute) {\r\n        logger.info('set mute', mute);\r\n        const iqToFocus = $iq(\r\n            { to: this.focusMucJid,\r\n                type: 'set' })\r\n            .c('mute', {\r\n                xmlns: 'http://jitsi.org/jitmeet/audio',\r\n                jid\r\n            })\r\n            .t(mute.toString())\r\n            .up();\r\n\r\n        this.connection.sendIQ(\r\n            iqToFocus,\r\n            result => logger.log('set mute', result),\r\n            error => logger.log('set mute error', error));\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMute(iq) {\r\n        const from = iq.getAttribute('from');\r\n\r\n        if (from !== this.focusMucJid) {\r\n            logger.warn('Ignored mute from non focus peer');\r\n\r\n            return;\r\n        }\r\n        const mute = $(iq).find('mute');\r\n\r\n        if (mute.length && mute.text() === 'true') {\r\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\r\n        } else {\r\n            // XXX Why do we support anything but muting? Why do we encode the\r\n            // value in the text of the element? Why do we use a separate XML\r\n            // namespace?\r\n            logger.warn('Ignoring a mute request which does not explicitly '\r\n                + 'specify a positive mute command.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clean any listeners or resources, executed on leaving.\r\n     */\r\n    clean() {\r\n        this._removeConnListeners.forEach(remove => remove());\r\n        this._removeConnListeners = [];\r\n\r\n        this.joined = false;\r\n    }\r\n\r\n    /**\r\n     * Leaves the room. Closes the jingle session.\r\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\r\n     * less than 5s after sending presence unavailable. Otherwise the promise is\r\n     * rejected.\r\n     */\r\n    leave() {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\r\n            const eventEmitter = this.eventEmitter;\r\n\r\n            this.clean();\r\n\r\n            /**\r\n             *\r\n             * @param doReject\r\n             */\r\n            function onMucLeft(doReject = false) {\r\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\r\n                clearTimeout(timeout);\r\n                if (doReject) {\r\n                    // the timeout expired\r\n                    reject(new Error('The timeout for the confirmation about '\r\n                        + 'leaving the room expired.'));\r\n                } else {\r\n                    resolve();\r\n                }\r\n            }\r\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\r\n            this.doLeave();\r\n        });\r\n    }\r\n}\r\n\r\n/* eslint-enable newline-per-chained-call */\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $msg, Strophe } from 'strophe.js';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The command type for updating a lobby participant's e-mail address.\r\n *\r\n * @type {string}\r\n */\r\nconst EMAIL_COMMAND = 'email';\r\n\r\n/**\r\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\r\n * approving or denying access to participants from the lobby room.\r\n */\r\nexport default class Lobby {\r\n\r\n    /**\r\n     * Constructs lobby room.\r\n     *\r\n     * @param {ChatRoom} room the main room.\r\n     */\r\n    constructor(room) {\r\n        this.xmpp = room.xmpp;\r\n        this.mainRoom = room;\r\n\r\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.LOCAL_ROLE_CHANGED,\r\n            maybeJoinLobbyRoom);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\r\n            maybeJoinLobbyRoom);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\r\n            jid => {\r\n                this.lobbyRoomJid = jid;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Whether lobby is supported on backend.\r\n     *\r\n     * @returns {boolean} whether lobby is supported on backend.\r\n     */\r\n    isSupported() {\r\n        return this.xmpp.lobbySupported;\r\n    }\r\n\r\n    /**\r\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    enable() {\r\n        if (!this.isSupported()) {\r\n            return Promise.reject(new Error('Lobby not supported!'));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.mainRoom.setMembersOnly(true, resolve, reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    disable() {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()\r\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\r\n            return;\r\n        }\r\n\r\n        this.mainRoom.setMembersOnly(false);\r\n    }\r\n\r\n    /**\r\n     * Leaves the lobby room.\r\n     * @private\r\n     */\r\n    _leaveLobbyRoom() {\r\n        if (this.lobbyRoom) {\r\n            this.lobbyRoom.leave()\r\n                .then(() => {\r\n                    this.lobbyRoom = undefined;\r\n                    logger.info('Lobby room left!');\r\n                })\r\n                .catch(() => {}); // eslint-disable-line no-empty-function\r\n        }\r\n    }\r\n\r\n    /**\r\n     * We had received a jid for the lobby room.\r\n     *\r\n     * @param jid the lobby room jid to join.\r\n     */\r\n    setLobbyRoomJid(jid) {\r\n        this.lobbyRoomJid = jid;\r\n    }\r\n\r\n    /**\r\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\r\n     * @private\r\n     */\r\n    _maybeJoinLobbyRoom() {\r\n        if (!this.isSupported()) {\r\n            return;\r\n        }\r\n\r\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\r\n\r\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\r\n            // join the lobby\r\n            this.join()\r\n                .then(() => logger.info('Joined lobby room'))\r\n                .catch(e => logger.error('Failed joining lobby', e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\r\n     *\r\n     * @param {string} username is required.\r\n     * @param {string} email is optional.\r\n     * @returns {Promise} resolves once we join the room.\r\n     */\r\n    join(displayName, email) {\r\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\r\n\r\n        if (!this.lobbyRoomJid) {\r\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\r\n        }\r\n\r\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\r\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\r\n\r\n        this.lobbyRoom = this.xmpp.createRoom(\r\n            roomName, {\r\n                customDomain,\r\n                disableDiscoInfo: true,\r\n                disableFocus: true,\r\n                enableLobby: false\r\n            }\r\n        );\r\n\r\n        if (displayName) {\r\n            // remove previously set nickname\r\n            this.lobbyRoom.removeFromPresence('nick');\r\n            this.lobbyRoom.addToPresence('nick', {\r\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\r\n                value: displayName\r\n            });\r\n        }\r\n\r\n        if (isModerator) {\r\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\r\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\r\n            });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_MEMBER_JOINED,\r\n                // eslint-disable-next-line max-params\r\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\r\n                    // we need to ignore joins on lobby for participants that are already in the main room\r\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\r\n                        return;\r\n                    }\r\n\r\n                    // we emit the new event on the main room so we can propagate\r\n                    // events to the conference\r\n                    this.mainRoom.eventEmitter.emit(\r\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\r\n                        Strophe.getResourceFromJid(from),\r\n                        nick,\r\n                        identity ? identity.avatar : undefined\r\n                    );\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\r\n                    // we emit the new event on the main room so we can propagate\r\n                    // events to the conference\r\n                    this.mainRoom.eventEmitter.emit(\r\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\r\n                        Strophe.getResourceFromJid(from)\r\n                    );\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_DESTROYED,\r\n                () => {\r\n                    // let's make sure we emit that all lobby users had left\r\n                    Object.keys(this.lobbyRoom.members)\r\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\r\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    this.lobbyRoom = undefined;\r\n                    logger.info('Lobby room left(destroyed)!');\r\n                });\r\n        } else {\r\n            // this should only be handled by those waiting in lobby\r\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\r\n                if (isSelfPresence) {\r\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    return;\r\n                }\r\n            });\r\n\r\n            // As there is still reference of the main room\r\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\r\n            // the invite message should be received directly to the xmpp conn in general\r\n            this.mainRoom.addEventListener(\r\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\r\n                (roomJid, from, txt, invitePassword) => {\r\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\r\n                    if (roomJid === this.mainRoom.roomjid) {\r\n                        // we are now allowed let's join and leave lobby\r\n                        this.mainRoom.join(invitePassword);\r\n\r\n                        this._leaveLobbyRoom();\r\n                    }\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_DESTROYED,\r\n                (reason, jid) => {\r\n                    // we are receiving the jid of the main room\r\n                    // means we are invited to join, maybe lobby was disabled\r\n                    if (jid && jid === this.mainRoom.roomjid) {\r\n                        this.mainRoom.join();\r\n\r\n                        return;\r\n                    }\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\r\n                });\r\n\r\n            // If participant retries joining shared password while waiting in the lobby\r\n            // and succeeds make sure we leave lobby\r\n            this.mainRoom.addEventListener(\r\n                XMPPEvents.MUC_JOINED,\r\n                () => {\r\n                    this._leaveLobbyRoom();\r\n                });\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\r\n                resolve();\r\n\r\n                // send our email, as we do not handle this on initial presence we need a second one\r\n                if (email && !isModerator) {\r\n                    this.lobbyRoom.removeFromPresence(EMAIL_COMMAND);\r\n                    this.lobbyRoom.addToPresence(EMAIL_COMMAND, { value: email });\r\n                    this.lobbyRoom.sendPresence();\r\n                }\r\n            });\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\r\n\r\n            this.lobbyRoom.join();\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Should be possible only for moderators.\r\n     * @param id\r\n     */\r\n    denyAccess(id) {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\r\n            return;\r\n        }\r\n\r\n        const jid = Object.keys(this.lobbyRoom.members)\r\n            .find(j => Strophe.getResourceFromJid(j) === id);\r\n\r\n        if (jid) {\r\n            this.lobbyRoom.kick(jid);\r\n        } else {\r\n            logger.error(`Not found member for ${id} in lobby room.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Should be possible only for moderators.\r\n     * @param id\r\n     */\r\n    approveAccess(id) {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\r\n            return;\r\n        }\r\n\r\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\r\n            .find(j => Strophe.getResourceFromJid(j) === id);\r\n\r\n        if (memberRoomJid) {\r\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\r\n            const msgToSend\r\n                = $msg({ to: this.mainRoom.roomjid })\r\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\r\n                    .c('invite', { to: jid });\r\n\r\n            this.xmpp.connection.sendIQ(msgToSend,\r\n                () => { }, // eslint-disable-line no-empty-function\r\n                e => {\r\n                    logger.error(`Error sending invite for ${jid}`, e);\r\n                });\r\n        } else {\r\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\r\n        }\r\n    }\r\n}\r\n","/* global $, Promise */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport Settings from '../settings/Settings';\r\n\r\nconst AuthenticationEvents\r\n    = require('../../service/authentication/AuthenticationEvents');\r\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\r\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n *\r\n * @param step\r\n */\r\nfunction createExpBackoffTimer(step) {\r\n    let count = 1;\r\n\r\n    return function(reset) {\r\n        // Reset call\r\n        if (reset) {\r\n            count = 1;\r\n\r\n            return;\r\n        }\r\n\r\n        // Calculate next timeout\r\n        const timeout = Math.pow(2, count - 1);\r\n\r\n        count += 1;\r\n\r\n        return timeout * step;\r\n    };\r\n}\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n *\r\n * @param roomName\r\n * @param xmpp\r\n * @param emitter\r\n * @param options\r\n */\r\nexport default function Moderator(roomName, xmpp, emitter, options) {\r\n    this.roomName = roomName;\r\n    this.xmppService = xmpp;\r\n    this.getNextTimeout = createExpBackoffTimer(1000);\r\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\r\n\r\n    // External authentication stuff\r\n    this.externalAuthEnabled = false;\r\n    this.options = options;\r\n\r\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\r\n    // it will be enabled automatically if focus detects the component through\r\n    // service discovery.\r\n    this.sipGatewayEnabled\r\n        = this.options.connection.hosts\r\n            && this.options.connection.hosts.call_control !== undefined;\r\n\r\n    this.eventEmitter = emitter;\r\n\r\n    this.connection = this.xmppService.connection;\r\n\r\n    // FIXME: Message listener that talks to POPUP window\r\n    /**\r\n     *\r\n     * @param event\r\n     */\r\n    function listener(event) {\r\n        if (event.data && event.data.sessionId) {\r\n            if (event.origin !== window.location.origin) {\r\n                logger.warn(\r\n                    `Ignoring sessionId from different origin: ${\r\n                        event.origin}`);\r\n\r\n                return;\r\n            }\r\n            Settings.sessionId = event.data.sessionId;\r\n\r\n            // After popup is closed we will authenticate\r\n        }\r\n    }\r\n\r\n    // Register\r\n    if (window.addEventListener) {\r\n        window.addEventListener('message', listener, false);\r\n    } else {\r\n        window.attachEvent('onmessage', listener);\r\n    }\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\nModerator.prototype.isExternalAuthEnabled = function() {\r\n    return this.externalAuthEnabled;\r\n};\r\n\r\nModerator.prototype.isSipGatewayEnabled = function() {\r\n    return this.sipGatewayEnabled;\r\n};\r\n\r\nModerator.prototype.onMucMemberLeft = function(jid) {\r\n    logger.info(`Someone left is it focus ? ${jid}`);\r\n    const resource = Strophe.getResourceFromJid(jid);\r\n\r\n    if (resource === 'focus') {\r\n        logger.info(\r\n            'Focus has left the room - leaving conference');\r\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\r\n    }\r\n};\r\n\r\nModerator.prototype.setFocusUserJid = function(focusJid) {\r\n    if (!this.focusUserJid) {\r\n        this.focusUserJid = focusJid;\r\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\r\n    }\r\n};\r\n\r\nModerator.prototype.getFocusUserJid = function() {\r\n    return this.focusUserJid;\r\n};\r\n\r\nModerator.prototype.getFocusComponent = function() {\r\n    // Get focus component address\r\n    let focusComponent = this.options.connection.hosts.focus;\r\n\r\n    // If not specified use default:  'focus.domain'\r\n\r\n    if (!focusComponent) {\r\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\r\n    }\r\n\r\n    return focusComponent;\r\n};\r\n\r\nModerator.prototype.createConferenceIq = function() {\r\n    // Generate create conference IQ\r\n    const elem = $iq({ to: this.getFocusComponent(),\r\n        type: 'set' });\r\n\r\n    // Session Id used for authentication\r\n    const { sessionId } = Settings;\r\n    const machineUID = Settings.machineId;\r\n    const config = this.options.conference;\r\n\r\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\r\n\r\n    elem.c('conference', {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        room: this.roomName,\r\n        'machine-uid': machineUID\r\n    });\r\n\r\n    if (sessionId) {\r\n        elem.attrs({ 'session-id': sessionId });\r\n    }\r\n    if (this.options.connection.enforcedBridge !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'enforcedBridge',\r\n                value: this.options.connection.enforcedBridge\r\n            }).up();\r\n    }\r\n\r\n    // Tell the focus we have Jigasi configured\r\n    if (this.options.connection.hosts !== undefined\r\n        && this.options.connection.hosts.call_control !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'call_control',\r\n                value: this.options.connection.hosts.call_control\r\n            }).up();\r\n    }\r\n    if (config.channelLastN !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'channelLastN',\r\n                value: config.channelLastN\r\n            }).up();\r\n    }\r\n    elem.c(\r\n        'property', {\r\n            name: 'disableRtx',\r\n            value: Boolean(config.disableRtx)\r\n        }).up();\r\n\r\n    if (config.enableTcc !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableTcc',\r\n                    value: Boolean(config.enableTcc)\r\n                }).up();\r\n    }\r\n    if (config.enableRemb !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableRemb',\r\n                    value: Boolean(config.enableRemb)\r\n                }).up();\r\n    }\r\n    if (config.enableOpusRed === true) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableOpusRed',\r\n                    value: true\r\n                }).up();\r\n    }\r\n    if (config.minParticipants !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'minParticipants',\r\n                    value: config.minParticipants\r\n                }).up();\r\n    }\r\n\r\n    elem.c(\r\n        'property', {\r\n            name: 'enableLipSync',\r\n            value: this.options.connection.enableLipSync === true\r\n        }).up();\r\n    if (config.audioPacketDelay !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'audioPacketDelay',\r\n                value: config.audioPacketDelay\r\n            }).up();\r\n    }\r\n    if (config.startBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startBitrate',\r\n                value: config.startBitrate\r\n            }).up();\r\n    }\r\n    if (config.minBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'minBitrate',\r\n                value: config.minBitrate\r\n            }).up();\r\n    }\r\n    if (config.testing && config.testing.octo\r\n        && typeof config.testing.octo.probability === 'number') {\r\n        if (Math.random() < config.testing.octo.probability) {\r\n            elem.c(\r\n                'property', {\r\n                    name: 'octo',\r\n                    value: true\r\n                }).up();\r\n        }\r\n    }\r\n\r\n    let openSctp;\r\n\r\n    switch (this.options.conference.openBridgeChannel) {\r\n    case 'datachannel':\r\n    case true:\r\n    case undefined:\r\n        openSctp = true;\r\n        break;\r\n    case 'websocket':\r\n        openSctp = false;\r\n        break;\r\n    }\r\n\r\n    elem.c(\r\n        'property', {\r\n            name: 'openSctp',\r\n            value: openSctp\r\n        }).up();\r\n\r\n    if (config.opusMaxAverageBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'opusMaxAverageBitrate',\r\n                value: config.opusMaxAverageBitrate\r\n            }).up();\r\n    }\r\n    if (this.options.conference.startAudioMuted !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startAudioMuted',\r\n                value: this.options.conference.startAudioMuted\r\n            }).up();\r\n    }\r\n    if (this.options.conference.startVideoMuted !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startVideoMuted',\r\n                value: this.options.conference.startVideoMuted\r\n            }).up();\r\n    }\r\n    if (this.options.conference.stereo !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'stereo',\r\n                value: this.options.conference.stereo\r\n            }).up();\r\n    }\r\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'useRoomAsSharedDocumentName',\r\n                value: this.options.conference.useRoomAsSharedDocumentName\r\n            }).up();\r\n    }\r\n    elem.up();\r\n\r\n    return elem;\r\n};\r\n\r\n\r\nModerator.prototype.parseSessionId = function(resultIq) {\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    const sessionId = $(resultIq).find('conference').attr('session-id');\r\n\r\n    if (sessionId) {\r\n        logger.info(`Received sessionId:  ${sessionId}`);\r\n        Settings.sessionId = sessionId;\r\n    }\r\n};\r\n\r\nModerator.prototype.parseConfigOptions = function(resultIq) {\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\r\n\r\n    const authenticationEnabled\r\n        = $(resultIq).find(\r\n            '>conference>property'\r\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\r\n\r\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\r\n\r\n    this.externalAuthEnabled = $(resultIq).find(\r\n        '>conference>property'\r\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\r\n\r\n    logger.info(\r\n        `External authentication enabled: ${this.externalAuthEnabled}`);\r\n\r\n    if (!this.externalAuthEnabled) {\r\n        // We expect to receive sessionId in 'internal' authentication mode\r\n        this.parseSessionId(resultIq);\r\n    }\r\n\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\r\n\r\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\r\n        authenticationEnabled, authIdentity);\r\n\r\n    // Check if focus has auto-detected Jigasi component(this will be also\r\n    // included if we have passed our host from the config)\r\n    if ($(resultIq).find(\r\n        '>conference>property'\r\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\r\n        this.sipGatewayEnabled = true;\r\n    }\r\n\r\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\r\n};\r\n\r\n// FIXME We need to show the fact that we're waiting for the focus to the user\r\n// (or that the focus is not available)\r\n/**\r\n * Allocates the conference focus.\r\n *\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\r\n * rejected and it'll keep on pinging Jicofo forever.\r\n */\r\nModerator.prototype.allocateConferenceFocus = function() {\r\n    return new Promise(resolve => {\r\n        // Try to use focus user JID from the config\r\n        this.setFocusUserJid(this.options.connection.focusUserJid);\r\n\r\n        // Send create conference IQ\r\n        this.connection.sendIQ(\r\n            this.createConferenceIq(),\r\n            result => this._allocateConferenceFocusSuccess(result, resolve),\r\n            error => this._allocateConferenceFocusError(error, resolve));\r\n\r\n        // XXX We're pressed for time here because we're beginning a complex\r\n        // and/or lengthy conference-establishment process which supposedly\r\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\r\n        // decide to send our IQ.\r\n        this.connection.flush();\r\n    });\r\n};\r\n\r\n/**\r\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\r\n * error result.\r\n *\r\n * @param error - the error result of the request that\r\n * {@link #allocateConferenceFocus} sent\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n */\r\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\r\n    // If the session is invalid, remove and try again without session ID to get\r\n    // a new one\r\n    const invalidSession\r\n        = $(error).find('>error>session-invalid').length\r\n            || $(error).find('>error>not-acceptable').length;\r\n\r\n    if (invalidSession) {\r\n        logger.info('Session expired! - removing');\r\n        Settings.sessionId = undefined;\r\n    }\r\n    if ($(error).find('>error>graceful-shutdown').length) {\r\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\r\n\r\n        return;\r\n    }\r\n\r\n    // Check for error returned by the reservation system\r\n    const reservationErr = $(error).find('>error>reservation-error');\r\n\r\n    if (reservationErr.length) {\r\n        // Trigger error event\r\n        const errorCode = reservationErr.attr('error-code');\r\n        const errorTextNode = $(error).find('>error>text');\r\n        let errorMsg;\r\n\r\n        if (errorTextNode) {\r\n            errorMsg = errorTextNode.text();\r\n        }\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.RESERVATION_ERROR,\r\n            errorCode,\r\n            errorMsg);\r\n\r\n        return;\r\n    }\r\n\r\n    // Not authorized to create new room\r\n    if ($(error).find('>error>not-authorized').length) {\r\n        logger.warn('Unauthorized to start the conference', error);\r\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\r\n\r\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\r\n            // FIXME \"is external\" should come either from the focus or\r\n            // config.js\r\n            this.externalAuthEnabled = true;\r\n        }\r\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\r\n\r\n        return;\r\n    }\r\n    const waitMs = this.getNextErrorTimeout();\r\n    const errmsg = `Focus error, retry after ${waitMs}`;\r\n\r\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n    logger.error(errmsg, error);\r\n\r\n    // Show message\r\n    const focusComponent = this.getFocusComponent();\r\n    const retrySec = waitMs / 1000;\r\n\r\n    // FIXME: message is duplicated ? Do not show in case of session invalid\r\n    // which means just a retry\r\n\r\n    if (!invalidSession) {\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.FOCUS_DISCONNECTED,\r\n            focusComponent,\r\n            retrySec);\r\n    }\r\n\r\n    // Reset response timeout\r\n    this.getNextTimeout(true);\r\n    window.setTimeout(\r\n        () => this.allocateConferenceFocus().then(callback),\r\n        waitMs);\r\n};\r\n\r\n/**\r\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\r\n * success (i.e. non-error) result.\r\n *\r\n * @param result - the success (i.e. non-error) result of the request that\r\n * {@link #allocateConferenceFocus} sent\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n */\r\nModerator.prototype._allocateConferenceFocusSuccess = function(\r\n        result,\r\n        callback) {\r\n    // Setup config options\r\n    this.parseConfigOptions(result);\r\n\r\n    // Reset the error timeout (because we haven't failed here).\r\n    this.getNextErrorTimeout(true);\r\n\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    if ($(result).find('conference').attr('ready') === 'true') {\r\n        // Reset the non-error timeout (because we've succeeded here).\r\n        this.getNextTimeout(true);\r\n\r\n        // Exec callback\r\n        callback();\r\n    } else {\r\n        const waitMs = this.getNextTimeout();\r\n\r\n        logger.info(`Waiting for the focus... ${waitMs}`);\r\n        window.setTimeout(\r\n            () => this.allocateConferenceFocus().then(callback),\r\n            waitMs);\r\n    }\r\n};\r\n\r\nModerator.prototype.authenticate = function() {\r\n    return new Promise((resolve, reject) => {\r\n        this.connection.sendIQ(\r\n            this.createConferenceIq(),\r\n            result => {\r\n                this.parseSessionId(result);\r\n                resolve();\r\n            },\r\n            errorIq => reject({\r\n                error: $(errorIq).find('iq>error :first')\r\n                    .prop('tagName'),\r\n                message: $(errorIq).find('iq>error>text')\r\n                    .text()\r\n            })\r\n        );\r\n    });\r\n};\r\n\r\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\r\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\r\n};\r\n\r\n/**\r\n *\r\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\r\n * {@link Moderator#getPopupLoginUrl}\r\n * @param urlCb\r\n * @param failureCb\r\n */\r\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\r\n    const iq = $iq({ to: this.getFocusComponent(),\r\n        type: 'get' });\r\n    const attrs = {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        room: this.roomName,\r\n        'machine-uid': Settings.machineId\r\n    };\r\n    let str = 'auth url'; // for logger\r\n\r\n    if (popup) {\r\n        attrs.popup = true;\r\n        str = `POPUP ${str}`;\r\n    }\r\n    iq.c('login-url', attrs);\r\n\r\n    /**\r\n     * Implements a failure callback which reports an error message and an error\r\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\r\n     *\r\n     * @param {string} errmsg the error messsage to report\r\n     * @param {*} error the error to report (in addition to errmsg)\r\n     */\r\n    function reportError(errmsg, err) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n        logger.error(errmsg, err);\r\n        failureCb(err);\r\n    }\r\n    this.connection.sendIQ(\r\n        iq,\r\n        result => {\r\n            // eslint-disable-next-line newline-per-chained-call\r\n            let url = $(result).find('login-url').attr('url');\r\n\r\n            url = decodeURIComponent(url);\r\n            if (url) {\r\n                logger.info(`Got ${str}: ${url}`);\r\n                urlCb(url);\r\n            } else {\r\n                reportError(`Failed to get ${str} from the focus`, result);\r\n            }\r\n        },\r\n        reportError.bind(undefined, `Get ${str} error`)\r\n    );\r\n};\r\n\r\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\r\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\r\n};\r\n\r\nModerator.prototype.logout = function(callback) {\r\n    const iq = $iq({ to: this.getFocusComponent(),\r\n        type: 'set' });\r\n    const { sessionId } = Settings;\r\n\r\n    if (!sessionId) {\r\n        callback();\r\n\r\n        return;\r\n    }\r\n    iq.c('logout', {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        'session-id': sessionId\r\n    });\r\n    this.connection.sendIQ(\r\n        iq,\r\n        result => {\r\n            // eslint-disable-next-line newline-per-chained-call\r\n            let logoutUrl = $(result).find('logout').attr('logout-url');\r\n\r\n            if (logoutUrl) {\r\n                logoutUrl = decodeURIComponent(logoutUrl);\r\n            }\r\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\r\n            Settings.sessionId = undefined;\r\n            callback(logoutUrl);\r\n        },\r\n        error => {\r\n            const errmsg = 'Logout error';\r\n\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n            logger.error(errmsg, error);\r\n        }\r\n    );\r\n};\r\n","const RandomUtil = require('./RandomUtil');\r\n\r\n/**\r\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\r\n * MIT License\r\n * http://github.com/marak/faker.js/\r\n *\r\n * @const\r\n */\r\nconst names = [\r\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\r\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\r\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\r\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\r\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\r\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\r\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\r\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\r\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\r\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\r\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\r\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\r\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\r\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\r\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\r\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\r\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\r\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\r\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\r\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\r\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\r\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\r\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\r\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\r\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\r\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\r\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\r\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\r\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\r\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\r\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\r\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\r\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\r\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\r\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\r\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\r\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\r\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\r\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\r\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\r\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\r\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\r\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\r\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\r\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\r\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\r\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\r\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\r\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\r\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\r\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\r\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\r\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\r\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\r\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\r\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\r\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\r\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\r\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\r\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\r\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\r\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\r\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\r\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\r\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\r\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\r\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\r\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\r\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\r\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\r\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\r\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\r\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\r\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\r\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\r\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\r\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\r\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\r\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\r\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\r\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\r\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\r\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\r\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\r\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\r\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\r\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\r\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\r\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\r\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\r\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\r\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\r\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\r\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\r\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\r\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\r\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\r\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\r\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\r\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\r\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\r\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\r\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\r\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\r\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\r\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\r\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\r\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\r\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\r\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\r\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\r\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\r\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\r\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\r\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\r\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\r\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\r\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\r\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\r\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\r\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\r\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\r\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\r\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\r\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\r\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\r\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\r\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\r\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\r\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\r\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\r\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\r\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\r\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\r\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\r\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\r\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\r\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\r\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\r\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\r\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\r\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\r\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\r\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\r\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\r\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\r\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\r\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\r\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\r\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\r\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\r\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\r\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\r\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\r\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\r\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\r\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\r\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\r\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\r\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\r\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\r\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\r\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\r\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\r\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\r\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\r\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\r\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\r\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\r\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\r\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\r\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\r\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\r\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\r\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\r\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\r\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\r\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\r\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\r\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\r\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\r\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\r\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\r\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\r\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\r\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\r\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\r\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\r\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\r\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\r\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\r\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\r\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\r\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\r\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\r\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\r\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\r\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\r\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\r\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\r\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\r\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\r\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\r\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\r\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\r\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\r\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\r\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\r\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\r\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\r\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\r\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\r\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\r\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\r\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\r\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\r\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\r\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\r\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\r\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\r\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\r\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\r\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\r\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\r\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\r\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\r\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\r\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\r\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\r\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\r\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\r\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\r\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\r\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\r\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\r\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\r\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\r\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\r\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\r\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\r\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\r\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\r\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\r\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\r\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\r\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\r\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\r\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\r\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\r\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\r\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\r\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\r\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\r\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\r\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\r\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\r\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\r\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\r\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\r\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\r\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\r\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\r\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\r\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\r\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\r\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\r\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\r\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\r\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\r\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\r\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\r\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\r\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\r\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\r\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\r\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\r\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\r\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\r\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\r\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\r\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\r\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\r\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\r\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\r\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\r\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\r\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\r\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\r\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\r\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\r\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\r\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\r\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\r\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\r\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\r\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\r\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\r\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\r\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\r\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\r\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\r\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\r\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\r\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\r\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\r\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\r\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\r\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\r\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\r\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\r\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\r\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\r\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\r\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\r\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\r\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\r\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\r\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\r\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\r\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\r\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\r\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\r\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\r\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\r\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\r\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\r\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\r\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\r\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\r\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\r\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\r\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\r\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\r\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\r\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\r\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\r\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\r\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\r\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\r\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\r\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\r\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\r\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\r\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\r\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\r\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\r\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\r\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\r\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\r\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\r\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\r\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\r\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\r\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\r\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\r\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\r\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\r\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\r\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\r\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\r\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\r\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\r\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\r\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\r\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\r\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\r\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\r\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\r\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\r\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\r\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\r\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\r\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\r\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\r\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\r\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\r\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\r\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\r\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\r\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\r\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\r\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\r\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\r\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\r\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\r\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\r\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\r\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\r\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\r\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\r\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\r\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\r\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\r\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\r\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\r\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\r\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\r\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\r\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\r\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\r\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\r\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\r\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\r\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\r\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\r\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\r\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\r\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\r\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\r\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\r\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\r\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\r\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\r\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\r\n    'Zoila', 'Zola', 'Zora', 'Zula'\r\n];\r\n\r\n/**\r\n * Generate random username.\r\n * @returns {string} random username\r\n */\r\nfunction generateUsername() {\r\n    const name = RandomUtil.randomElement(names);\r\n    const suffix = RandomUtil.randomAlphanumStr(3);\r\n\r\n    return `${name}-${suffix}`;\r\n}\r\n\r\nmodule.exports = {\r\n    generateUsername\r\n};\r\n","/* global $, __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport {\r\n    ACTION_JINGLE_TR_RECEIVED,\r\n    ACTION_JINGLE_TR_SUCCESS,\r\n    createJingleEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\nimport JingleSessionPC from './JingleSessionPC';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// XXX Strophe is build around the idea of chaining function calls so allow long\r\n// function call chains.\r\n/* eslint-disable newline-per-chained-call */\r\n\r\n/**\r\n *\r\n */\r\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     * Creates new <tt>JingleConnectionPlugin</tt>\r\n     * @param {XMPP} xmpp\r\n     * @param {EventEmitter} eventEmitter\r\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\r\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\r\n     */\r\n    constructor(xmpp, eventEmitter, iceConfig) {\r\n        super();\r\n        this.xmpp = xmpp;\r\n        this.eventEmitter = eventEmitter;\r\n        this.sessions = {};\r\n        this.jvbIceConfig = iceConfig.jvb;\r\n        this.p2pIceConfig = iceConfig.p2p;\r\n        this.mediaConstraints = {\r\n            offerToReceiveAudio: true,\r\n            offerToReceiveVideo: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        this.connection.addHandler(this.onJingle.bind(this),\r\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param iq\r\n     */\r\n    onJingle(iq) {\r\n        const sid = $(iq).find('jingle').attr('sid');\r\n        const action = $(iq).find('jingle').attr('action');\r\n        const fromJid = iq.getAttribute('from');\r\n\r\n        // send ack first\r\n        const ack = $iq({ type: 'result',\r\n            to: fromJid,\r\n            id: iq.getAttribute('id')\r\n        });\r\n\r\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\r\n        let sess = this.sessions[sid];\r\n\r\n        if (action !== 'session-initiate') {\r\n            if (!sess) {\r\n                ack.attrs({ type: 'error' });\r\n                ack.c('error', { type: 'cancel' })\r\n                    .c('item-not-found', {\r\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                    })\r\n                    .up()\r\n                    .c('unknown-session', {\r\n                        xmlns: 'urn:xmpp:jingle:errors:1'\r\n                    });\r\n                logger.warn('invalid session id', iq);\r\n                this.connection.send(ack);\r\n\r\n                return true;\r\n            }\r\n\r\n            // local jid is not checked\r\n            if (fromJid !== sess.remoteJid) {\r\n                logger.warn(\r\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\r\n                ack.attrs({ type: 'error' });\r\n                ack.c('error', { type: 'cancel' })\r\n                    .c('item-not-found', {\r\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                    })\r\n                    .up()\r\n                    .c('unknown-session', {\r\n                        xmlns: 'urn:xmpp:jingle:errors:1'\r\n                    });\r\n                this.connection.send(ack);\r\n\r\n                return true;\r\n            }\r\n        } else if (sess !== undefined) {\r\n            // Existing session with same session id. This might be out-of-order\r\n            // if the sess.remoteJid is the same as from.\r\n            ack.attrs({ type: 'error' });\r\n            ack.c('error', { type: 'cancel' })\r\n                .c('service-unavailable', {\r\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                })\r\n                .up();\r\n            logger.warn('duplicate session id', sid, iq);\r\n            this.connection.send(ack);\r\n\r\n            return true;\r\n        }\r\n        const now = window.performance.now();\r\n\r\n        // FIXME that should work most of the time, but we'd have to\r\n        // think how secure it is to assume that user with \"focus\"\r\n        // nickname is Jicofo.\r\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\r\n\r\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\r\n\r\n        switch (action) {\r\n        case 'session-initiate': {\r\n            logger.log('(TIME) received session-initiate:\\t', now);\r\n            const startMuted = $(iq).find('jingle>startmuted');\r\n\r\n            if (startMuted && startMuted.length > 0) {\r\n                const audioMuted = startMuted.attr('audio');\r\n                const videoMuted = startMuted.attr('video');\r\n\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\r\n                    audioMuted === 'true',\r\n                    videoMuted === 'true');\r\n            }\r\n\r\n            logger.info(\r\n                `Marking session from ${fromJid\r\n                } as ${isP2P ? '' : '*not*'} P2P`);\r\n\r\n            const iceConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\r\n\r\n            sess\r\n                = new JingleSessionPC(\r\n                    $(iq).find('jingle').attr('sid'),\r\n                    $(iq).attr('to'),\r\n                    fromJid,\r\n                    this.connection,\r\n                    this.mediaConstraints,\r\n\r\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\r\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\r\n                    JSON.parse(JSON.stringify(iceConfig)),\r\n                    isP2P,\r\n                    /* initiator */ false);\r\n\r\n            this.sessions[sess.sid] = sess;\r\n\r\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\r\n                sess, $(iq).find('>jingle'), now);\r\n            break;\r\n        }\r\n        case 'session-accept': {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'content-modify': {\r\n            sess.modifyContents($(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'transport-info': {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'session-terminate': {\r\n            logger.log('terminating...', sess.sid);\r\n            let reasonCondition = null;\r\n            let reasonText = null;\r\n\r\n            if ($(iq).find('>jingle>reason').length) {\r\n                reasonCondition\r\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\r\n                reasonText = $(iq).find('>jingle>reason>text').text();\r\n            }\r\n            this.terminate(sess.sid, reasonCondition, reasonText);\r\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\r\n                sess, reasonCondition, reasonText);\r\n            break;\r\n        }\r\n        case 'transport-replace':\r\n            logger.info('(TIME) Start transport replace:\\t', now);\r\n            Statistics.sendAnalytics(createJingleEvent(\r\n                ACTION_JINGLE_TR_RECEIVED,\r\n                {\r\n                    p2p: isP2P,\r\n                    value: now\r\n                }));\r\n\r\n            sess.replaceTransport($(iq).find('>jingle'), () => {\r\n                const successTime = window.performance.now();\r\n\r\n                logger.info('(TIME) Transport replace success:\\t', successTime);\r\n                Statistics.sendAnalytics(createJingleEvent(\r\n                    ACTION_JINGLE_TR_SUCCESS,\r\n                    {\r\n                        p2p: isP2P,\r\n                        value: successTime\r\n                    }));\r\n            }, error => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error('Transport replace failed', error);\r\n                sess.sendTransportReject();\r\n            });\r\n            break;\r\n        case 'addsource': // FIXME: proprietary, un-jingleish\r\n        case 'source-add': // FIXME: proprietary\r\n            sess.addRemoteStream($(iq).find('>jingle>content'));\r\n            break;\r\n        case 'removesource': // FIXME: proprietary, un-jingleish\r\n        case 'source-remove': // FIXME: proprietary\r\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\r\n            break;\r\n        default:\r\n            logger.warn('jingle action not implemented', action);\r\n            ack.attrs({ type: 'error' });\r\n            ack.c('error', { type: 'cancel' })\r\n                .c('bad-request',\r\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\r\n                .up();\r\n            break;\r\n        }\r\n        this.connection.send(ack);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\r\n     * connection, configured as 'initiator'.\r\n     * @param {string} me our JID\r\n     * @param {string} peer remote participant's JID\r\n     * @return {JingleSessionPC}\r\n     */\r\n    newP2PJingleSession(me, peer) {\r\n        const sess\r\n            = new JingleSessionPC(\r\n                RandomUtil.randomHexString(12),\r\n                me,\r\n                peer,\r\n                this.connection,\r\n                this.mediaConstraints,\r\n                this.p2pIceConfig,\r\n                /* P2P */ true,\r\n                /* initiator */ true);\r\n\r\n        this.sessions[sess.sid] = sess;\r\n\r\n        return sess;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param sid\r\n     * @param reasonCondition\r\n     * @param reasonText\r\n     */\r\n    terminate(sid, reasonCondition, reasonText) {\r\n        if (this.sessions.hasOwnProperty(sid)) {\r\n            if (this.sessions[sid].state !== 'ended') {\r\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\r\n            }\r\n            delete this.sessions[sid];\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getStunAndTurnCredentials() {\r\n        // get stun and turn configuration from server via xep-0215\r\n        // uses time-limited credentials as described in\r\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\r\n        //\r\n        // See https://modules.prosody.im/mod_turncredentials.html\r\n        // for a prosody module which implements this.\r\n        //\r\n        // Currently, this doesn't work with updateIce and therefore credentials\r\n        // with a long validity have to be fetched before creating the\r\n        // peerconnection.\r\n        // TODO: implement refresh via updateIce as described in\r\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\r\n        this.connection.sendIQ(\r\n            $iq({ type: 'get',\r\n                to: this.connection.domain })\r\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\r\n            res => {\r\n                const iceservers = [];\r\n\r\n                $(res).find('>services>service').each((idx, el) => {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    el = $(el);\r\n                    const dict = {};\r\n                    const type = el.attr('type');\r\n\r\n                    switch (type) {\r\n                    case 'stun':\r\n                        dict.urls = `stun:${el.attr('host')}`;\r\n                        if (el.attr('port')) {\r\n                            dict.urls += `:${el.attr('port')}`;\r\n                        }\r\n                        iceservers.push(dict);\r\n                        break;\r\n                    case 'turn':\r\n                    case 'turns': {\r\n                        dict.urls = `${type}:`;\r\n                        const username = el.attr('username');\r\n\r\n                        // https://code.google.com/p/webrtc/issues/detail\r\n                        // ?id=1508\r\n\r\n                        if (username) {\r\n                            const match\r\n                                = navigator.userAgent.match(\r\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\r\n\r\n                            if (match && parseInt(match[2], 10) < 28) {\r\n                                dict.urls += `${username}@`;\r\n                            } else {\r\n                                // only works in M28\r\n                                dict.username = username;\r\n                            }\r\n                        }\r\n                        dict.urls += el.attr('host');\r\n                        const port = el.attr('port');\r\n\r\n                        if (port) {\r\n                            dict.urls += `:${el.attr('port')}`;\r\n                        }\r\n                        const transport = el.attr('transport');\r\n\r\n                        if (transport && transport !== 'udp') {\r\n                            dict.urls += `?transport=${transport}`;\r\n                        }\r\n\r\n                        dict.credential = el.attr('password')\r\n                                || dict.credential;\r\n                        iceservers.push(dict);\r\n                        break;\r\n                    }\r\n                    }\r\n                });\r\n\r\n                const options = this.xmpp.options;\r\n\r\n                // Shuffle ICEServers for loadbalancing\r\n                for (let i = iceservers.length - 1; i > 0; i--) {\r\n                    const j = Math.floor(Math.random() * (i + 1));\r\n                    const temp = iceservers[i];\r\n\r\n                    iceservers[i] = iceservers[j];\r\n                    iceservers[j] = temp;\r\n                }\r\n\r\n                let filter;\r\n\r\n                if (options.useTurnUdp) {\r\n                    filter = s => s.urls.startsWith('turn');\r\n                } else {\r\n                    // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\r\n                    filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\r\n                }\r\n\r\n                this.jvbIceConfig.iceServers = iceservers.filter(filter);\r\n                this.p2pIceConfig.iceServers = iceservers;\r\n            }, err => {\r\n                logger.warn('getting turn credentials failed', err);\r\n                logger.warn('is mod_turncredentials or similar installed?');\r\n            });\r\n\r\n        // implement push?\r\n    }\r\n\r\n    /**\r\n     * Returns the data saved in 'updateLog' in a format to be logged.\r\n     */\r\n    getLog() {\r\n        const data = {};\r\n\r\n        Object.keys(this.sessions).forEach(sid => {\r\n            const session = this.sessions[sid];\r\n            const pc = session.peerconnection;\r\n\r\n            if (pc && pc.updateLog) {\r\n                // FIXME: should probably be a .dump call\r\n                data[`jingle_${sid}`] = {\r\n                    updateLog: pc.updateLog,\r\n                    stats: pc.stats,\r\n                    url: window.location.href\r\n                };\r\n            }\r\n        });\r\n\r\n        return data;\r\n    }\r\n}\r\n\r\n/* eslint-enable newline-per-chained-call */\r\n","import async from 'async';\r\n\r\n/**\r\n * A queue for async task execution.\r\n */\r\nexport default class AsyncQueue {\r\n    /**\r\n     * Creates new instance.\r\n     */\r\n    constructor() {\r\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\r\n        this._stopped = false;\r\n    }\r\n\r\n    /**\r\n     * Removes any pending tasks from the queue.\r\n     */\r\n    clear() {\r\n        this._queue.kill();\r\n    }\r\n\r\n    /**\r\n     * Internal task processing implementation which makes things work.\r\n     */\r\n    _processQueueTasks(task, finishedCallback) {\r\n        task(finishedCallback);\r\n    }\r\n\r\n    /**\r\n     * The 'task' function will be given a callback it MUST call with either:\r\n     *  1) No arguments if it was successful or\r\n     *  2) An error argument if there was an error\r\n     * If the task wants to process the success or failure of the task, it\r\n     * should pass the {@code callback} to the push function, e.g.:\r\n     * queue.push(task, (err) => {\r\n     *     if (err) {\r\n     *         // error handling\r\n     *     } else {\r\n     *         // success handling\r\n     *     }\r\n     * });\r\n     *\r\n     * @param {function} task - The task to be executed. See the description above.\r\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\r\n     */\r\n    push(task, callback) {\r\n        if (this._stopped) {\r\n            callback && callback(new Error('The queue has been stopped'));\r\n\r\n            return;\r\n        }\r\n        this._queue.push(task, callback);\r\n    }\r\n\r\n    /**\r\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\r\n     * after the queue has been shutdown then the callback will be called with an error.\r\n     */\r\n    shutdown() {\r\n        this._stopped = true;\r\n    }\r\n}\r\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/**\r\n * Implements a simple hash code for a string (see\r\n * https://en.wikipedia.org/wiki/Java_hashCode()).\r\n *\r\n * @param {string} The string to return a hash of.\r\n * @return {Number} the integer hash code of the string.\r\n */\r\nfunction integerHash(string) {\r\n    if (!string) {\r\n        return 0;\r\n    }\r\n\r\n    let char, hash = 0, i;\r\n\r\n    for (i = 0; i < string.length; i++) {\r\n        char = string.charCodeAt(i);\r\n        hash += char * Math.pow(31, string.length - 1 - i);\r\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\r\n    }\r\n\r\n    return hash;\r\n}\r\n\r\nmodule.exports = { integerHash };\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport * as JingleSessionState from './JingleSessionState';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * JingleSession provides an API to manage a single Jingle session. We will\r\n * have different implementations depending on the underlying interface used\r\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\r\n */\r\nexport default class JingleSession extends Listenable {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>JingleSession</tt>.\r\n     * @param {string} sid the Jingle session identifier\r\n     * @param {string} localJid our JID\r\n     * @param {string} remoteJid the JID of the remote peer\r\n     * @param {XmppConnection} connection the XMPP connection\r\n     * @param {Object} mediaConstraints the media constraints object passed to\r\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\r\n     * @param {Object} iceConfig the ICE servers config object as defined by\r\n     * the WebRTC. Passed to the PeerConnection's constructor.\r\n     * @param {boolean} isInitiator indicates if it will be the side which\r\n     * initiates the session.\r\n     */\r\n    constructor(\r\n            sid,\r\n            localJid,\r\n            remoteJid,\r\n            connection,\r\n            mediaConstraints,\r\n            iceConfig,\r\n            isInitiator) {\r\n        super();\r\n        this.sid = sid;\r\n        this.localJid = localJid;\r\n        this.remoteJid = remoteJid;\r\n        this.connection = connection;\r\n        this.mediaConstraints = mediaConstraints;\r\n        this.iceConfig = iceConfig;\r\n\r\n        /**\r\n         * Indicates whether this instance is an initiator or an answerer of\r\n         * the Jingle session.\r\n         * @type {boolean}\r\n         */\r\n        this.isInitiator = isInitiator;\r\n\r\n        /**\r\n         * Whether to use dripping or not. Dripping is sending trickle\r\n         * candidates not one-by-one.\r\n         */\r\n        this.usedrip = true;\r\n\r\n        /**\r\n         *  When dripping is used, stores ICE candidates which are to be sent.\r\n         */\r\n        this.dripContainer = [];\r\n\r\n        /**\r\n         * The chat room instance associated with the session.\r\n         * @type {ChatRoom}\r\n         */\r\n        this.room = null;\r\n\r\n        /**\r\n         * Jingle session state - uninitialized until {@link initialize} is\r\n         * called @type {JingleSessionState}\r\n         */\r\n        this.state = null;\r\n\r\n        /**\r\n         * The RTC service instance\r\n         * @type {RTC}\r\n         */\r\n        this.rtc = null;\r\n    }\r\n\r\n    /**\r\n     * Returns XMPP address of this session's initiator.\r\n     * @return {string}\r\n     */\r\n    get initiatorJid() {\r\n        return this.isInitiator ? this.localJid : this.remoteJid;\r\n    }\r\n\r\n    /**\r\n     * Returns XMPP address of this session's responder.\r\n     * @return {string}\r\n     */\r\n    get responderJid() {\r\n        return this.isInitiator ? this.remoteJid : this.localJid;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Prepares this object to initiate a session.\r\n     * @param {ChatRoom} room the chat room for the conference associated with\r\n     * this session\r\n     * @param {RTC} rtc the RTC service instance\r\n     * @param {object} options - the options, see implementing class's\r\n     * {@link #doInitialize} description for more details.\r\n     */\r\n    initialize(room, rtc, options) {\r\n        if (this.state !== null) {\r\n            const errmsg\r\n                = `attempt to initiate on session ${this.sid}\r\n                   in state ${this.state}`;\r\n\r\n            logger.error(errmsg);\r\n            throw new Error(errmsg);\r\n        }\r\n        this.room = room;\r\n        this.rtc = rtc;\r\n        this.state = JingleSessionState.PENDING;\r\n        this.doInitialize(options);\r\n    }\r\n\r\n    /**\r\n     * The implementing class finishes initialization here. Called at the end of\r\n     * {@link initialize}.\r\n     * @param {Object} options - The options specific to the implementing class.\r\n     * @protected\r\n     */\r\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\r\n\r\n    /* eslint-disable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Adds the ICE candidates found in the 'contents' array as remote\r\n     * candidates?\r\n     * Note: currently only used on transport-info\r\n     *\r\n     * @param contents\r\n     */\r\n    addIceCandidates(contents) {}\r\n\r\n    /* eslint-enable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Returns current state of this <tt>JingleSession</tt> instance.\r\n     * @returns {JingleSessionState} the current state of this session instance.\r\n     */\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    /* eslint-disable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Handles an 'add-source' event.\r\n     *\r\n     * @param contents an array of Jingle 'content' elements.\r\n     */\r\n    addSources(contents) {}\r\n\r\n    /**\r\n     * Handles a 'remove-source' event.\r\n     *\r\n     * @param contents an array of Jingle 'content' elements.\r\n     */\r\n    removeSources(contents) {}\r\n\r\n    /**\r\n     * Terminates this Jingle session by sending session-terminate\r\n     * @param success a callback called once the 'session-terminate' packet has\r\n     * been acknowledged with RESULT.\r\n     * @param failure a callback called when either timeout occurs or ERROR\r\n     * response is received.\r\n     * @param {Object} options\r\n     * @param {string} [options.reason] XMPP Jingle error condition\r\n     * @param {string} [options.reasonDescription] some meaningful error message\r\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\r\n     * terminated.\r\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\r\n     * sending session-terminate. It may not make sense to send it if the XMPP\r\n     * connection has been closed already or if the remote peer has disconnected\r\n     */\r\n    terminate(success, failure, options) {}\r\n\r\n    /**\r\n     * Handles an offer from the remote peer (prepares to accept a session).\r\n     * @param jingle the 'jingle' XML element.\r\n     * @param success callback called when we the incoming session has been\r\n     * accepted\r\n     * @param failure callback called when we fail for any reason, will supply\r\n     * error object with details(which is meant more to be printed to the logger\r\n     * than analysed in the code, as the error is unrecoverable anyway)\r\n     */\r\n    acceptOffer(jingle, success, failure) {}\r\n\r\n    /**\r\n     * Returns the JID of the initiator of the jingle session.\r\n     */\r\n    _getInitiatorJid() {\r\n        return this.isInitiator ? this.localJid : this.remoteJid;\r\n    }\r\n\r\n    /* eslint-enable no-unused-vars, no-empty-function */\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\r\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\r\n * the data from the MUC presence.\r\n */\r\nexport default class SignalingLayerImpl extends SignalingLayer {\r\n    /**\r\n     * Creates new instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * A map that stores SSRCs of remote streams. And is used only locally\r\n         * We store the mapping when jingle is received, and later is used\r\n         * onaddstream webrtc event where we have only the ssrc\r\n         * FIXME: This map got filled and never cleaned and can grow during long\r\n         * conference\r\n         * @type {Map<number, string>} maps SSRC number to jid\r\n         */\r\n        this.ssrcOwners = new Map();\r\n\r\n        /**\r\n         *\r\n         * @type {ChatRoom|null}\r\n         */\r\n        this.chatRoom = null;\r\n    }\r\n\r\n    /**\r\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\r\n     * @param {ChatRoom} room\r\n     */\r\n    setChatRoom(room) {\r\n        const oldChatRoom = this.chatRoom;\r\n\r\n        this.chatRoom = room;\r\n        if (oldChatRoom) {\r\n            oldChatRoom.removePresenceListener(\r\n                'audiomuted', this._audioMuteHandler);\r\n            oldChatRoom.removePresenceListener(\r\n                'videomuted', this._videoMuteHandler);\r\n            oldChatRoom.removePresenceListener(\r\n                'videoType', this._videoTypeHandler);\r\n        }\r\n        if (room) {\r\n            // SignalingEvents\r\n            this._audioMuteHandler = (node, from) => {\r\n                this.eventEmitter.emit(\r\n                    SignalingEvents.PEER_MUTED_CHANGED,\r\n                    from, MediaType.AUDIO, node.value === 'true');\r\n            };\r\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\r\n\r\n            this._videoMuteHandler = (node, from) => {\r\n                this.eventEmitter.emit(\r\n                    SignalingEvents.PEER_MUTED_CHANGED,\r\n                    from, MediaType.VIDEO, node.value === 'true');\r\n            };\r\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\r\n\r\n            this._videoTypeHandler = (node, from) => {\r\n                this.eventEmitter.emit(\r\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n                    from, node.value);\r\n            };\r\n            room.addPresenceListener('videoType', this._videoTypeHandler);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getPeerMediaInfo(owner, mediaType) {\r\n        if (this.chatRoom) {\r\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\r\n        }\r\n        logger.error('Requested peer media info, before room was set');\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getSSRCOwner(ssrc) {\r\n        return this.ssrcOwners.get(ssrc);\r\n    }\r\n\r\n    /**\r\n     * Set an SSRC owner.\r\n     * @param {number} ssrc an SSRC to be owned\r\n     * @param {string} endpointId owner's ID (MUC nickname)\r\n     * @throws TypeError if <tt>ssrc</tt> is not a number\r\n     */\r\n    setSSRCOwner(ssrc, endpointId) {\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\r\n        }\r\n        this.ssrcOwners.set(ssrc, endpointId);\r\n    }\r\n}\r\n","\r\nimport Listenable from '../../modules/util/Listenable';\r\n\r\n/**\r\n * An object that carries the info about specific media type advertised by\r\n * participant in the signaling channel.\r\n * @typedef {Object} PeerMediaInfo\r\n * @property {boolean} muted indicates if the media is currently muted\r\n * @property {VideoType|undefined} videoType the type of the video if applicable\r\n */\r\n\r\n/**\r\n * Interface used to expose the information carried over the signaling channel\r\n * which is not available to the RTC module in the media SDP.\r\n *\r\n * @interface SignalingLayer\r\n */\r\nexport default class SignalingLayer extends Listenable {\r\n\r\n    /**\r\n     * Obtains the endpoint ID for given SSRC.\r\n     * @param {number} ssrc the SSRC number.\r\n     * @return {string|null} the endpoint ID for given media SSRC.\r\n     */\r\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    /**\r\n     * Obtains the info about given media advertised in the MUC presence of\r\n     * the participant identified by the given MUC JID.\r\n     * @param {string} owner the MUC jid of the participant for whom\r\n     * {@link PeerMediaInfo} will be obtained.\r\n     * @param {MediaType} mediaType the type of the media for which presence\r\n     * info will be obtained.\r\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\r\n     * info or <tt>null</tt> either if there is no presence available for given\r\n     * JID or if the media type given is invalid.\r\n     */\r\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\r\n        throw new Error('not implemented');\r\n    }\r\n}\r\n","import { Strophe } from 'strophe.js';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\n/**\r\n *  Logs raw stanzas and makes them available for download as JSON\r\n */\r\nclass StropheLogger extends ConnectionPlugin {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.log = [];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        this.connection.rawInput = this.logIncoming.bind(this);\r\n        this.connection.rawOutput = this.logOutgoing.bind(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stanza\r\n     */\r\n    logIncoming(stanza) {\r\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stanza\r\n     */\r\n    logOutgoing(stanza) {\r\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport default function() {\r\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\r\n}\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\r\n\r\n/**\r\n *\r\n */\r\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n\r\n        this.connection.addHandler(\r\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param iq\r\n     */\r\n    onRayo(iq) {\r\n        logger.info('Rayo IQ', iq);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param to\r\n     * @param from\r\n     * @param roomName\r\n     * @param roomPass\r\n     * @param focusMucJid\r\n     */\r\n    dial(to, from, roomName, roomPass, focusMucJid) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!focusMucJid) {\r\n                reject(new Error('Internal error!'));\r\n\r\n                return;\r\n            }\r\n            const req = $iq({\r\n                type: 'set',\r\n                to: focusMucJid\r\n            });\r\n\r\n            req.c('dial', {\r\n                xmlns: RAYO_XMLNS,\r\n                to,\r\n                from\r\n            });\r\n            req.c('header', {\r\n                name: 'JvbRoomName',\r\n                value: roomName\r\n            }).up();\r\n\r\n            if (roomPass && roomPass.length) {\r\n                req.c('header', {\r\n                    name: 'JvbRoomPassword',\r\n                    value: roomPass\r\n                }).up();\r\n            }\r\n\r\n            this.connection.sendIQ(\r\n                req,\r\n                result => {\r\n                    logger.info('Dial result ', result);\r\n\r\n                    // eslint-disable-next-line newline-per-chained-call\r\n                    const resource = $(result).find('ref').attr('uri');\r\n\r\n                    this.callResource = resource.substr('xmpp:'.length);\r\n                    logger.info(`Received call resource: ${this.callResource}`);\r\n                    resolve();\r\n                },\r\n                error => {\r\n                    logger.info('Dial error ', error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     */\r\n    hangup() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.callResource) {\r\n                reject(new Error('No call in progress'));\r\n                logger.warn('No call in progress');\r\n\r\n                return;\r\n            }\r\n\r\n            const req = $iq({\r\n                type: 'set',\r\n                to: this.callResource\r\n            });\r\n\r\n            req.c('hangup', {\r\n                xmlns: RAYO_XMLNS\r\n            });\r\n\r\n            this.connection.sendIQ(req, result => {\r\n                logger.info('Hangup result ', result);\r\n                this.callResource = null;\r\n                resolve();\r\n            }, error => {\r\n                logger.info('Hangup error ', error);\r\n                this.callResource = null;\r\n                reject(new Error('Hangup error '));\r\n            });\r\n        });\r\n    }\r\n}\r\n","/* global __filename */\r\n/**\r\n * Strophe logger implementation. Logs from level WARN and above.\r\n */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This is the last HTTP error status captured from Strophe debug logs.\r\n * The purpose of storing it is to distinguish between the network and\r\n * infrastructure reason for connection being dropped (see connectionHandler in\r\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\r\n * which means that the failure could be transient.\r\n *\r\n * FIXME in the latest Strophe (not released on npm) there is API to handle\r\n * particular HTTP errors, but there is no way to learn if the subsequent\r\n * request succeeded in order to tell if the error was one time incident or if\r\n * it was the reason for dropping the connection by Strophe (the connection is\r\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\r\n * details about the reason on why the connection stopped.\r\n *\r\n * @type {number}\r\n */\r\nlet lastErrorStatus = -1;\r\n\r\n/**\r\n * A regular expression used to catch Strophe's log message indicating that the\r\n * last BOSH request was successful. When there is such message seen the\r\n * {@link lastErrorStatus} will be set back to '-1'.\r\n * @type {RegExp}\r\n */\r\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\r\n\r\n/**\r\n * A regular expression used to capture the current value of the BOSH request\r\n * error status (HTTP error code or '0' or something else).\r\n * @type {RegExp}\r\n */\r\nconst lastErrorStatusRegExpr\r\n    = /request errored, status: (\\d+), number of errors: \\d+/;\r\n\r\n/**\r\n *\r\n */\r\nexport default function() {\r\n\r\n    Strophe.log = function(level, msg) {\r\n        // Our global handler reports uncaught errors to the stats which may\r\n        // interpret those as partial call failure.\r\n        // Strophe log entry about secondary request timeout does not mean that\r\n        // it's a final failure(the request will be restarted), so we lower it's\r\n        // level here to a warning.\r\n        logger.trace('Strophe', level, msg);\r\n        if (typeof msg === 'string'\r\n                && msg.indexOf('Request ') !== -1\r\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            level = Strophe.LogLevel.WARN;\r\n        }\r\n\r\n        /* eslint-disable no-case-declarations */\r\n        switch (level) {\r\n        case Strophe.LogLevel.DEBUG:\r\n            // The log message which reports successful status is logged on\r\n            // Strophe's DEBUG level.\r\n            if (lastErrorStatus !== -1\r\n                    && resetLastErrorStatusRegExpr.test(msg)) {\r\n                logger.debug('Reset lastErrorStatus');\r\n                lastErrorStatus = -1;\r\n            }\r\n            break;\r\n        case Strophe.LogLevel.WARN:\r\n            logger.warn(`Strophe: ${msg}`);\r\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\r\n\r\n            if (errStatusCapture && errStatusCapture.length === 2) {\r\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\r\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\r\n            }\r\n            break;\r\n        case Strophe.LogLevel.ERROR:\r\n        case Strophe.LogLevel.FATAL:\r\n            // eslint-disable-next-line no-param-reassign\r\n            msg = `Strophe: ${msg}`;\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\r\n            logger.error(msg);\r\n            break;\r\n        }\r\n\r\n        /* eslint-enable no-case-declarations */\r\n    };\r\n\r\n    /**\r\n     * Returns error status (HTTP error code) of the last BOSH request.\r\n     *\r\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\r\n     * (this is a hack).\r\n     */\r\n    Strophe.getLastErrorStatus = function() {\r\n        return lastErrorStatus;\r\n    };\r\n\r\n    Strophe.getStatusString = function(status) {\r\n        switch (status) {\r\n        case Strophe.Status.BINDREQUIRED:\r\n            return 'BINDREQUIRED';\r\n        case Strophe.Status.ERROR:\r\n            return 'ERROR';\r\n        case Strophe.Status.CONNECTING:\r\n            return 'CONNECTING';\r\n        case Strophe.Status.CONNFAIL:\r\n            return 'CONNFAIL';\r\n        case Strophe.Status.AUTHENTICATING:\r\n            return 'AUTHENTICATING';\r\n        case Strophe.Status.AUTHFAIL:\r\n            return 'AUTHFAIL';\r\n        case Strophe.Status.CONNECTED:\r\n            return 'CONNECTED';\r\n        case Strophe.Status.DISCONNECTED:\r\n            return 'DISCONNECTED';\r\n        case Strophe.Status.DISCONNECTING:\r\n            return 'DISCONNECTING';\r\n        case Strophe.Status.ATTACHED:\r\n            return 'ATTACHED';\r\n        default:\r\n            return 'unknown';\r\n        }\r\n    };\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\r\n * with the videobridge.\r\n */\r\nexport default class BridgeChannel {\r\n    /**\r\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\r\n     * instance, or creates a WebSocket connection with the videobridge.\r\n     * At least one of both, peerconnection or wsUrl parameters, must be\r\n     * given.\r\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\r\n     * instance.\r\n     * @param {string} [wsUrl] WebSocket URL.\r\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\r\n     * @param {function} senderVideoConstraintsChanged callback to call when the sender video constraints change.\r\n     */\r\n    constructor(peerconnection, wsUrl, emitter, senderVideoConstraintsChanged) {\r\n        if (!peerconnection && !wsUrl) {\r\n            throw new TypeError('At least peerconnection or wsUrl must be given');\r\n        } else if (peerconnection && wsUrl) {\r\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\r\n        }\r\n\r\n        if (peerconnection) {\r\n            logger.debug('constructor() with peerconnection');\r\n        } else {\r\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\r\n        }\r\n\r\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\r\n        // @type {RTCDataChannel|WebSocket}\r\n        this._channel = null;\r\n\r\n        // @type {EventEmitter}\r\n        this._eventEmitter = emitter;\r\n\r\n        // Whether a RTCDataChannel or WebSocket is internally used.\r\n        // @type {string} \"datachannel\" / \"websocket\"\r\n        this._mode = null;\r\n\r\n        // Indicates whether the connection retries are enabled or not.\r\n        this._areRetriesEnabled = false;\r\n\r\n        // Indicates whether the connection was closed from the client or not.\r\n        this._closedFromClient = false;\r\n\r\n        this._senderVideoConstraintsChanged = senderVideoConstraintsChanged;\r\n\r\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\r\n        // event.\r\n        if (peerconnection) {\r\n            const datachannel\r\n                = peerconnection.createDataChannel(\r\n                    'JVB data channel', {\r\n                        protocol: 'http://jitsi.org/protocols/colibri'\r\n                    });\r\n\r\n            // Handle the RTCDataChannel.\r\n            this._handleChannel(datachannel);\r\n            this._mode = 'datachannel';\r\n\r\n        // Otherwise create a WebSocket connection.\r\n        } else if (wsUrl) {\r\n            this._areRetriesEnabled = true;\r\n            this._wsUrl = wsUrl;\r\n            this._initWebSocket();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the web socket channel.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _initWebSocket() {\r\n        // Create a WebSocket instance.\r\n        const ws = new WebSocket(this._wsUrl);\r\n\r\n        // Handle the WebSocket.\r\n        this._handleChannel(ws);\r\n        this._mode = 'websocket';\r\n    }\r\n\r\n    /**\r\n     * Starts the websocket connection retries.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _startConnectionRetries() {\r\n        let timeoutS = 1;\r\n\r\n        const reload = () => {\r\n            if (this.isOpen()) {\r\n                return;\r\n            }\r\n            this._initWebSocket(this._wsUrl);\r\n            timeoutS = Math.min(timeoutS * 2, 60);\r\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\r\n        };\r\n\r\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\r\n    }\r\n\r\n    /**\r\n     * Stops the websocket connection retries.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _stopConnectionRetries() {\r\n        if (this._retryTimeout) {\r\n            clearTimeout(this._retryTimeout);\r\n            this._retryTimeout = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retries to establish the websocket connection after the connection was closed by the server.\r\n     *\r\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\r\n     * @returns {void}\r\n     */\r\n    _retryWebSocketConnection(closeEvent) {\r\n        if (!this._areRetriesEnabled) {\r\n            return;\r\n        }\r\n        const { code, reason } = closeEvent;\r\n\r\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\r\n        this._areRetriesEnabled = false;\r\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\r\n            this._stopConnectionRetries();\r\n            this._areRetriesEnabled = true;\r\n        });\r\n        this._startConnectionRetries();\r\n    }\r\n\r\n    /**\r\n     * The channel mode.\r\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\r\n     */\r\n    get mode() {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Closes the currently opened channel.\r\n     */\r\n    close() {\r\n        this._closedFromClient = true;\r\n        this._stopConnectionRetries();\r\n        this._areRetriesEnabled = false;\r\n        if (this._channel) {\r\n            try {\r\n                this._channel.close();\r\n            } catch (error) {} // eslint-disable-line no-empty\r\n\r\n            this._channel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\r\n     * open.\r\n     * @return {boolean}\r\n     */\r\n    isOpen() {\r\n        return this._channel && (this._channel.readyState === 'open'\r\n            || this._channel.readyState === WebSocket.OPEN);\r\n    }\r\n\r\n    /**\r\n     * Sends message via the channel.\r\n     * @param {string} to The id of the endpoint that should receive the\r\n     * message. If \"\" the message will be sent to all participants.\r\n     * @param  {object} payload The payload of the message.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendMessage(to, payload) {\r\n        this._send({\r\n            colibriClass: 'EndpointMessage',\r\n            msgPayload: payload,\r\n            to\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"lastN value changed\" message via the channel.\r\n     * @param {number} value The new value for lastN. -1 means unlimited.\r\n     */\r\n    sendSetLastNMessage(value) {\r\n        logger.log(`Sending lastN=${value}.`);\r\n\r\n        this._send({\r\n            colibriClass: 'LastNChangedEvent',\r\n            lastN: value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"pinned endpoint changed\" message via the channel.\r\n     * @param {string} endpointId The id of the pinned endpoint.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendPinnedEndpointMessage(endpointId) {\r\n        logger.log(`Sending pinned endpoint: ${endpointId}.`);\r\n\r\n        this._send({\r\n            colibriClass: 'PinnedEndpointChangedEvent',\r\n            pinnedEndpoint: endpointId || null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"selected endpoints changed\" message via the channel.\r\n     *\r\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendSelectedEndpointsMessage(endpointIds) {\r\n        logger.log(`Sending selected endpoints: ${endpointIds}.`);\r\n\r\n        this._send({\r\n            colibriClass: 'SelectedEndpointsChangedEvent',\r\n            selectedEndpoints: endpointIds\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"receiver video constraint\" message via the channel.\r\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\r\n     * in pixels, this receiver is willing to receive\r\n     */\r\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\r\n        logger.log(`Sending ReceiverVideoConstraint with maxFrameHeight=${maxFrameHeightPixels}px`);\r\n        this._send({\r\n            colibriClass: 'ReceiverVideoConstraint',\r\n            maxFrameHeight: maxFrameHeightPixels\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set events on the given RTCDataChannel or WebSocket instance.\r\n     */\r\n    _handleChannel(channel) {\r\n        const emitter = this._eventEmitter;\r\n\r\n        channel.onopen = () => {\r\n            logger.info(`${this._mode} channel opened`);\r\n\r\n            // Code sample for sending string and/or binary data.\r\n            // Sends string message to the bridge:\r\n            //     channel.send(\"Hello bridge!\");\r\n            // Sends 12 bytes binary message to the bridge:\r\n            //     channel.send(new ArrayBuffer(12));\r\n\r\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\r\n        };\r\n\r\n        channel.onerror = event => {\r\n            // WS error events contain no information about the failure (this is available in the onclose event) and\r\n            // the event references the WS object itself, which causes hangs on mobile.\r\n            if (this._mode !== 'websocket') {\r\n                logger.error(`Channel error: ${event.message}`);\r\n            }\r\n        };\r\n\r\n        channel.onmessage = ({ data }) => {\r\n            // JSON object.\r\n            let obj;\r\n\r\n            try {\r\n                obj = JSON.parse(data);\r\n            } catch (error) {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error('Failed to parse channel message as JSON: ', data, error);\r\n\r\n                return;\r\n            }\r\n\r\n            const colibriClass = obj.colibriClass;\r\n\r\n            switch (colibriClass) {\r\n            case 'DominantSpeakerEndpointChangeEvent': {\r\n                // Endpoint ID from the Videobridge.\r\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\r\n\r\n                logger.info(`New dominant speaker: ${dominantSpeakerEndpoint}.`);\r\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint);\r\n                break;\r\n            }\r\n            case 'EndpointConnectivityStatusChangeEvent': {\r\n                const endpoint = obj.endpoint;\r\n                const isActive = obj.active === 'true';\r\n\r\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\r\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\r\n\r\n                break;\r\n            }\r\n            case 'EndpointMessage': {\r\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\r\n\r\n                break;\r\n            }\r\n            case 'LastNEndpointsChangeEvent': {\r\n                // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending video).\r\n                const lastNEndpoints = obj.lastNEndpoints;\r\n\r\n                logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\r\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\r\n\r\n                break;\r\n            }\r\n            case 'SenderVideoConstraints': {\r\n                const videoConstraints = obj.videoConstraints;\r\n\r\n                if (videoConstraints) {\r\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\r\n                    this._senderVideoConstraintsChanged(videoConstraints);\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                logger.debug('Channel JSON-formatted message: ', obj);\r\n\r\n                // The received message appears to be appropriately formatted\r\n                // (i.e. is a JSON object which assigns a value to the\r\n                // mandatory property colibriClass) so don't just swallow it,\r\n                // expose it to public consumption.\r\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\r\n            }\r\n            }\r\n        };\r\n\r\n        channel.onclose = event => {\r\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\r\n\r\n            if (this._mode === 'websocket') {\r\n                if (!this._closedFromClient) {\r\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\r\n                    this._retryWebSocketConnection(event);\r\n                }\r\n            }\r\n\r\n            // Remove the channel.\r\n            this._channel = null;\r\n        };\r\n\r\n        // Store the channel.\r\n        this._channel = channel;\r\n    }\r\n\r\n    /**\r\n     * Sends passed object via the channel.\r\n     * @param {object} jsonObject The object that will be sent.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    _send(jsonObject) {\r\n        const channel = this._channel;\r\n\r\n        if (!this.isOpen()) {\r\n            logger.error('Bridge Channel send: no opened channel.');\r\n            throw new Error('No opened channel');\r\n        }\r\n\r\n        channel.send(JSON.stringify(jsonObject));\r\n    }\r\n}\r\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nfunction fixStatsType(stat) {\n  return {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  }[stat.type] || stat.type;\n}\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    var trackId = transceiver.rtpSender._initialTrackId ||\n        transceiver.rtpSender.track.id;\n    transceiver.rtpSender._initialTrackId = trackId;\n    // spec.\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n        trackId + '\\r\\n';\n    sdp += 'a=' + msid;\n    // for Chrome. Legacy should no longer be required.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n\n    // RTX\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n}\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function(server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n      var isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(function(url) {\n        var validTurn = url.indexOf('turn:') === 0 &&\n            url.indexOf('transport=udp') !== -1 &&\n            url.indexOf('turn:[') === -1 &&\n            !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n            url.indexOf('?transport=udp') === -1;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n\n// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function(pt, codecs) {\n    pt = parseInt(pt, 10);\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt ||\n          codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec &&\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function(lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n          lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' &&\n            lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec,\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n        rCodec.numChannels = Math.min(lCodec.numChannels,\n            rCodec.numChannels);\n        // push rCodec so we reply with offerer payload type\n        commonCapabilities.codecs.push(rCodec);\n\n        // determine common feedback mechanisms\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n          return false;\n        });\n        // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n        break;\n      }\n    }\n  });\n\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n         i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  });\n\n  // FIXME: fecMechanisms\n  return commonCapabilities;\n}\n\n// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates()\n      .find(function(remoteCandidate) {\n        return candidate.foundation === remoteCandidate.foundation &&\n            candidate.ip === remoteCandidate.ip &&\n            candidate.port === remoteCandidate.port &&\n            candidate.priority === remoteCandidate.priority &&\n            candidate.protocol === remoteCandidate.protocol &&\n            candidate.type === remoteCandidate.type;\n      });\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n  return !alreadyAdded;\n}\n\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name;\n  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\n  e.code = {\n    NotSupportedError: 9,\n    InvalidStateError: 11,\n    InvalidAccessError: 15,\n    TypeError: undefined,\n    OperationError: undefined\n  }[name];\n  return e;\n}\n\nmodule.exports = function(window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n        {track: track}));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n        {track: track}));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {receiver: receiver};\n    trackEvent.streams = streams;\n    window.setTimeout(function() {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n        .forEach(function(method) {\n          pc[method] = _eventTarget[method].bind(_eventTarget);\n        });\n\n    this.canTrickleIceCandidates = null;\n\n    this.needNegotiation = false;\n\n    this.localStreams = [];\n    this.remoteStreams = [];\n\n    this._localDescription = null;\n    this._remoteDescription = null;\n\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.connectionState = 'new';\n    this.iceGatheringState = 'new';\n\n    config = JSON.parse(JSON.stringify(config || {}));\n\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw(makeError('NotSupportedError',\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n    this._iceGatherers = [];\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config;\n\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n    this.transceivers = [];\n\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\n    configurable: true,\n    get: function() {\n      return this._localDescription;\n    }\n  });\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\n    configurable: true,\n    get: function() {\n      return this._remoteDescription;\n    }\n  });\n\n  // set up event handlers on prototype\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\n    if (this._isClosed) {\n      return;\n    }\n    this.dispatchEvent(event);\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\n    var event = new Event('icegatheringstatechange');\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function() {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function() {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\n    return this.remoteStreams;\n  };\n\n  // internal helper to create a transceiver object.\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\n  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n    if (!doNotAdd) {\n      this.transceivers.push(transceiver);\n    }\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function(s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track &&\n          this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track,\n        transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function(stream) {\n    var pc = this;\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function(track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function(track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n          'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function(t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError',\n          'Sender was not created by this connection.');\n    }\n    var stream = transceiver.stream;\n\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null;\n\n    // remove the stream from the set of local streams\n    var localStreams = this.transceivers.map(function(t) {\n      return t.stream;\n    });\n    if (localStreams.indexOf(stream) === -1 &&\n        this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function(stream) {\n    var pc = this;\n    stream.getTracks().forEach(function(track) {\n      var sender = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpSender;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpReceiver;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\n      usingBundle) {\n    var pc = this;\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state',\n        {value: 'new', writable: true}\n    );\n\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\n      // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n      iceGatherer.state = end ? 'completed' : 'gathering';\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n    iceGatherer.addEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  };\n\n  // start gathering from an RTCIceGatherer.\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n    var bufferedCandidateEvents =\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    iceGatherer.onlocalcandidate = function(evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n      var event = new Event('icecandidate');\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n      var cand = evt.candidate;\n      // Edge emits an empty object for RTCIceCandidateComplete‥\n      var end = !cand || Object.keys(cand).length === 0;\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        }\n        // RTCIceCandidate doesn't have a component, needs to be added\n        cand.component = 1;\n        // also the usernameFragment. TODO: update SDP to take both variants.\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\n\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate,\n            SDPUtils.parseCandidate(serializedCandidate));\n\n        event.candidate.candidate = serializedCandidate;\n        event.candidate.toJSON = function() {\n          return {\n            candidate: event.candidate.candidate,\n            sdpMid: event.candidate.sdpMid,\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\n            usernameFragment: event.candidate.usernameFragment\n          };\n        };\n      }\n\n      // update local description.\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=end-of-candidates\\r\\n';\n      }\n      pc._localDescription.sdp =\n          SDPUtils.getDescription(pc._localDescription.sdp) +\n          sections.join('');\n      var complete = pc.transceivers.every(function(transceiver) {\n        return transceiver.iceGatherer &&\n            transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n        pc._emitGatheringStateChange();\n      }\n\n      // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n        pc.iceGatheringState = 'complete';\n        pc._emitGatheringStateChange();\n      }\n    };\n\n    // emit already gathered candidates.\n    window.setTimeout(function() {\n      bufferedCandidateEvents.forEach(function(e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  };\n\n  // Create ICE transport and DTLS transport.\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n    iceTransport.onicestatechange = function() {\n      pc._updateIceConnectionState();\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n    dtlsTransport.ondtlsstatechange = function() {\n      pc._updateConnectionState();\n    };\n    dtlsTransport.onerror = function() {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state',\n          {value: 'failed', writable: true});\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  };\n\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\n      sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  };\n\n  // Start the RTP Sender and Receiver for a transceiver.\n  RTCPeerConnection.prototype._transceive = function(transceiver,\n      send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities,\n        transceiver.remoteCapabilities);\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpSender.send(params);\n    }\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video'\n          && transceiver.recvEncodingParameters\n          && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function(p) {\n          delete p.rtx;\n        });\n      }\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      } else {\n        params.encodings = [{}];\n      }\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set local ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\n          'a=ice-lite').length > 0;\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities;\n\n        // treat bundle-only as not-rejected.\n        var rejected = SDPUtils.isRejected(mediaSection) &&\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.rejected) {\n          var remoteIceParameters = SDPUtils.getIceParameters(\n              mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n              mediaSection, sessionpart);\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters,\n                  isIceLite ? 'controlling' : 'controlled');\n            }\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          }\n\n          // Calculate intersection of capabilities.\n          var params = getCommonCapabilities(localCapabilities,\n              remoteCapabilities);\n\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n          pc._transceive(transceiver,\n              params.codecs.length > 0,\n              false);\n        }\n      });\n    }\n\n    pc._localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set remote ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function(stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n        'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-options:')[0];\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n          .indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection);\n      // treat bundle-only as not-rejected.\n      var rejected = SDPUtils.isRejected(mediaSection) &&\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n      // Reject datachannels which are not implemented yet.\n      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||\n          protocol === 'UDP/DTLS/SCTP'))) {\n        // TODO: this is dangerous in the case where a non-rejected m-line\n        //     becomes rejected.\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          kind: kind,\n          protocol: protocol,\n          rejected: true\n        };\n        return;\n      }\n\n      if (!rejected && pc.transceivers[sdpMLineIndex] &&\n          pc.transceivers[sdpMLineIndex].rejected) {\n        // recycle a rejected transceiver.\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n\n      var track;\n      // FIXME: ensure the mediaSection has rtcp-mux set.\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n      recvEncodingParameters =\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\n          'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n          .map(function(cand) {\n            return SDPUtils.parseCandidate(cand);\n          })\n          .filter(function(cand) {\n            return cand.component === 1;\n          });\n\n      // Check if we can use BUNDLE and dispose transports.\n      if ((description.type === 'offer' || description.type === 'answer') &&\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\n          pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n        pc.transceivers[sdpMLineIndex].iceGatherer =\n            pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport =\n            pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\n            pc.transceivers[0].dtlsTransport;\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n      }\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] ||\n            pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n              usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(\n              function(codec) {\n                return codec.name !== 'rtx';\n              });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }];\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        var isNewTrack = false;\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver ||\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track;\n            // FIXME: does not work with Plan B.\n            if (remoteMsid && remoteMsid.stream === '-') {\n              // no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n              Object.defineProperty(track, 'id', {\n                get: function() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n              stream = streams.default;\n            }\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\n            var nativeTrack = s.getTracks().find(function(t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters;\n\n        // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n        pc._transceive(pc.transceivers[sdpMLineIndex],\n            false,\n            isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n            recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\n            remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) &&\n              (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters,\n                'controlling');\n          }\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        }\n\n        // If the offer contained RTX but the answer did not,\n        // remove RTX from sendEncodingParameters.\n        var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n        var hasRtx = commonCapabilities.codecs.filter(function(c) {\n          return c.name.toLowerCase() === 'rtx';\n        }).length;\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n          delete transceiver.sendEncodingParameters[0].rtx;\n        }\n\n        pc._transceive(transceiver,\n            direction === 'sendrecv' || direction === 'recvonly',\n            direction === 'sendrecv' || direction === 'sendonly');\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        if (rtpReceiver &&\n            (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc._remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n    Object.keys(streams).forEach(function(sid) {\n      var stream = streams[sid];\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function() {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function(item) {\n          var track = item[0];\n          var receiver = item[1];\n          if (stream.id !== item[2].id) {\n            return;\n          }\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function(item) {\n      if (item[2]) {\n        return;\n      }\n      fireAddTrack(pc, item[0], item[1], []);\n    });\n\n    // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n    window.setTimeout(function() {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n      pc.transceivers.forEach(function(transceiver) {\n        if (transceiver.iceTransport &&\n            transceiver.iceTransport.state === 'new' &&\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n              'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function() {\n    this.transceivers.forEach(function(transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    });\n    // FIXME: clean up tracks, local streams, remote streams, etc\n    this._isClosed = true;\n    this._updateSignalingState('closed');\n  };\n\n  // Update the signaling state.\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n    this._dispatchEvent('signalingstatechange', event);\n  };\n\n  // Determine whether to fire the negotiationneeded event.\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\n    var pc = this;\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n    this.needNegotiation = true;\n    window.setTimeout(function() {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  };\n\n  // Update the ice connection state.\n  RTCPeerConnection.prototype._updateIceConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n      }\n    });\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.checking > 0) {\n      newState = 'checking';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    } else if (states.completed > 0) {\n      newState = 'completed';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  };\n\n  // Update the connection state.\n  RTCPeerConnection.prototype._updateConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && transceiver.dtlsTransport &&\n          !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      }\n    });\n    // ICETransport.completed and connected are the same for this purpose.\n    states.connected += states.completed;\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.connectionState) {\n      this.connectionState = newState;\n      var event = new Event('connectionstatechange');\n      this._dispatchEvent('connectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'video';\n    }).length;\n\n    // Determine number of audio and video tracks we need to send/recv.\n    var offerOptions = arguments[0];\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError(\n            'Legacy mandatory/optional constraints not supported.');\n      }\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function(transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    });\n\n    // Create M-lines for recvonly streams.\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n        numAudioTracks--;\n      }\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n            pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n      // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n      }\n      localCapabilities.codecs.forEach(function(codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' &&\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        }\n\n        // for subsequent offers, we might have to re-use the payload\n        // type of the last offer.\n        if (transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.codecs) {\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\n                codec.clockRate === remoteCodec.clockRate) {\n              codec.preferredPayloadType = remoteCodec.payloadType;\n            }\n          });\n        }\n      });\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\n        var remoteExtensions = transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.headerExtensions || [];\n        remoteExtensions.forEach(function(rHdrExt) {\n          if (hdrExt.uri === rHdrExt.uri) {\n            hdrExt.id = rHdrExt.id;\n          }\n        });\n      });\n\n      // generate an ssrc now, to be used later in rtpSender.send\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' &&\n            !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\n            transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    });\n\n    // always offer BUNDLE and dispose on return if not supported.\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n          'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer after close'));\n    }\n\n    if (!(pc.signalingState === 'have-remote-offer' ||\n        pc.signalingState === 'have-local-pranswer')) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer in signalingState ' + pc.signalingState));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\n        pc._remoteDescription.sdp).length;\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n      if (transceiver.rejected) {\n        if (transceiver.kind === 'application') {\n          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\n          } else {\n            sdp += 'm=application 0 ' + transceiver.protocol +\n                ' webrtc-datachannel\\r\\n';\n          }\n        } else if (transceiver.kind === 'audio') {\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\n              'a=rtpmap:0 PCMU/8000\\r\\n';\n        } else if (transceiver.kind === 'video') {\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\n              'a=rtpmap:120 VP8/90000\\r\\n';\n        }\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\n            'a=inactive\\r\\n' +\n            'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      }\n\n      // FIXME: look at direction.\n      if (transceiver.stream) {\n        var localTrack;\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n              !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      }\n\n      // Calculate intersection of capabilities.\n      var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities,\n          'answer', transceiver.stream, pc._dtlsRole);\n      if (transceiver.rtcpParameters &&\n          transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n    var pc = this;\n    var sections;\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n        candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    }\n\n    // TODO: needs to go into ops queue.\n    return new Promise(function(resolve, reject) {\n      if (!pc._remoteDescription) {\n        return reject(makeError('InvalidStateError',\n            'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].rejected) {\n            continue;\n          }\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[j] += 'a=end-of-candidates\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        if (transceiver) {\n          if (transceiver.rejected) {\n            return resolve();\n          }\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          }\n          // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError',\n                  'Can not add ICE candidate'));\n            }\n          }\n\n          // update the remoteDescription.\n          var candidateString = candidate.candidate.trim();\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[sdpMLineIndex] += 'a=' +\n              (cand.type ? candidateString : 'end-of-candidates')\n              + '\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n        } else {\n          return reject(makeError('OperationError',\n              'Can not add ICE candidate'));\n        }\n      }\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function(selector) {\n    if (selector && selector instanceof window.MediaStreamTrack) {\n      var senderOrReceiver = null;\n      this.transceivers.forEach(function(transceiver) {\n        if (transceiver.rtpSender &&\n            transceiver.rtpSender.track === selector) {\n          senderOrReceiver = transceiver.rtpSender;\n        } else if (transceiver.rtpReceiver &&\n            transceiver.rtpReceiver.track === selector) {\n          senderOrReceiver = transceiver.rtpReceiver;\n        }\n      });\n      if (!senderOrReceiver) {\n        throw makeError('InvalidAccessError', 'Invalid selector.');\n      }\n      return senderOrReceiver.getStats();\n    }\n\n    var promises = [];\n    this.transceivers.forEach(function(transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n          'dtlsTransport'].forEach(function(method) {\n            if (transceiver[method]) {\n              promises.push(transceiver[method].getStats());\n            }\n          });\n    });\n    return Promise.all(promises).then(function(allStats) {\n      var results = new Map();\n      allStats.forEach(function(stats) {\n        stats.forEach(function(stat) {\n          results.set(stat.id, stat);\n        });\n      });\n      return results;\n    });\n  };\n\n  // fix low-level stat names and return Map instead of object.\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\n    'RTCIceTransport', 'RTCDtlsTransport'];\n  ortcObjects.forEach(function(ortcObjectName) {\n    var obj = window[ortcObjectName];\n    if (obj && obj.prototype && obj.prototype.getStats) {\n      var nativeGetstats = obj.prototype.getStats;\n      obj.prototype.getStats = function() {\n        return nativeGetstats.apply(this)\n        .then(function(nativeStats) {\n          var mapStats = new Map();\n          Object.keys(nativeStats).forEach(function(id) {\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\n            mapStats.set(id, nativeStats[id]);\n          });\n          return mapStats;\n        });\n      };\n    }\n  });\n\n  // legacy callback shims. Should be moved to adapter.js some days.\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[0] === 'function' ||\n          typeof args[1] === 'function') { // legacy\n        return nativeMethod.apply(this, [arguments[2]])\n        .then(function(description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function(error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function' ||\n          typeof args[2] === 'function') { // legacy\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function(error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n  ['getStats'].forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  return RTCPeerConnection;\n};\n","/* global __filename, RTCSessionDescription */\r\n\r\nimport { Interop } from '@jitsi/sdp-interop';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport transform from 'sdp-transform';\r\n\r\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\r\nimport * as VideoType from '../../service/RTC/VideoType';\r\nimport browser from '../browser';\r\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport RtxModifier from '../xmpp/RtxModifier';\r\nimport SDP from '../xmpp/SDP';\r\nimport SDPUtil from '../xmpp/SDPUtil';\r\nimport SdpConsistency from '../xmpp/SdpConsistency';\r\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\r\n\r\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\r\nimport LocalSdpMunger from './LocalSdpMunger';\r\nimport RTC from './RTC';\r\nimport RTCUtils from './RTCUtils';\r\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\r\n\r\n// FIXME SDP tools should end up in some kind of util module\r\n\r\nconst logger = getLogger(__filename);\r\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\r\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\r\nconst DESKTOP_SHARE_RATE = 500000;\r\nconst HD_BITRATE = 2500000;\r\nconst LD_BITRATE = 200000;\r\nconst SD_BITRATE = 700000;\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Creates new instance of 'TraceablePeerConnection'.\r\n *\r\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\r\n * @param {number} id the peer connection id assigned by the parent RTC module.\r\n * @param {SignalingLayer} signalingLayer the signaling layer instance\r\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\r\n * @param {object} constraints WebRTC 'PeerConnection' constraints\r\n * @param {boolean} isP2P indicates whether or not the new instance will be used\r\n * in a peer to peer connection\r\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\r\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\r\n * the simulcast.\r\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\r\n * @param {boolean} options.capScreenshareBitrate if set to 'true' simulcast will\r\n * be disabled for screenshare and a max bitrate of 500Kbps will applied on the\r\n * stream.\r\n * @param {string} options.disabledCodec the mime type of the code that should\r\n * not be negotiated on the peerconnection.\r\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\r\n *      disabled by removing it from the SDP (deprecated)\r\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\r\n * over other video codecs. (deprecated)\r\n * @param {string} options.preferredCodec the mime type of the codec that needs\r\n * to be made the preferred codec for the connection.\r\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\r\n *\r\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\r\n * debug the peer connection. Since many other responsibilities have been added\r\n * it would make sense to extract a separate class from it and come up with\r\n * a more suitable name.\r\n *\r\n * @constructor\r\n */\r\nexport default function TraceablePeerConnection(\r\n        rtc,\r\n        id,\r\n        signalingLayer,\r\n        iceConfig,\r\n        constraints,\r\n        isP2P,\r\n        options) {\r\n\r\n    /**\r\n     * Indicates whether or not this peer connection instance is actively\r\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\r\n     * media direction will be adjusted to 'inactive' in order to suspend\r\n     * the transmission.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.audioTransferActive = !(options.startSilent === true);\r\n\r\n    /**\r\n     * The DTMF sender instance used to send DTMF tones.\r\n     *\r\n     * @type {RTCDTMFSender|undefined}\r\n     * @private\r\n     */\r\n    this._dtmfSender = undefined;\r\n\r\n    /**\r\n     * @typedef {Object} TouchToneRequest\r\n     * @property {string} tones - The DTMF tones string as defined by\r\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\r\n     * @property {number} duration - The amount of time in milliseconds that\r\n     * each DTMF should last.\r\n     * @property {string} interToneGap - The length of time in miliseconds to\r\n     * wait between tones.\r\n     */\r\n    /**\r\n     * TouchToneRequests which are waiting to be played. This queue is filled\r\n     * if there are touch tones currently being played.\r\n     *\r\n     * @type {Array<TouchToneRequest>}\r\n     * @private\r\n     */\r\n    this._dtmfTonesQueue = [];\r\n\r\n    /**\r\n     * Indicates whether or not this peer connection instance is actively\r\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\r\n     * media direction will be adjusted to 'inactive' in order to suspend\r\n     * the transmission.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.videoTransferActive = true;\r\n\r\n    /**\r\n     * The parent instance of RTC service which created this\r\n     * <tt>TracablePeerConnection</tt>.\r\n     * @type {RTC}\r\n     */\r\n    this.rtc = rtc;\r\n\r\n    /**\r\n     * The peer connection identifier assigned by the RTC module.\r\n     * @type {number}\r\n     */\r\n    this.id = id;\r\n\r\n    /**\r\n     * Indicates whether or not this instance is used in a peer to peer\r\n     * connection.\r\n     * @type {boolean}\r\n     */\r\n    this.isP2P = isP2P;\r\n\r\n    // FIXME: We should support multiple streams per jid.\r\n    /**\r\n     * The map holds remote tracks associated with this peer connection.\r\n     * It maps user's JID to media type and remote track\r\n     * (one track per media type per user's JID).\r\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\r\n     */\r\n    this.remoteTracks = new Map();\r\n\r\n    /**\r\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\r\n     * @type {Map<number, JitsiLocalTrack>}\r\n     */\r\n    this.localTracks = new Map();\r\n\r\n    /**\r\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\r\n     * the underlying WebRTC PeerConnection.\r\n     * @type {Array}\r\n     * @private\r\n     */\r\n    this._addedStreams = [];\r\n\r\n    /**\r\n     * @typedef {Object} TPCGroupInfo\r\n     * @property {string} semantics the SSRC groups semantics\r\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\r\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\r\n     * on...\r\n     */\r\n    /**\r\n     * @typedef {Object} TPCSSRCInfo\r\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\r\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\r\n     * groups\r\n     */\r\n    /**\r\n     * Holds the info about local track's SSRCs mapped per their\r\n     * {@link JitsiLocalTrack.rtcId}\r\n     * @type {Map<number, TPCSSRCInfo>}\r\n     */\r\n    this.localSSRCs = new Map();\r\n\r\n    /**\r\n     * The local ICE username fragment for this session.\r\n     */\r\n    this.localUfrag = null;\r\n\r\n    /**\r\n     * The remote ICE username fragment for this session.\r\n     */\r\n    this.remoteUfrag = null;\r\n\r\n    /**\r\n     * The signaling layer which operates this peer connection.\r\n     * @type {SignalingLayer}\r\n     */\r\n    this.signalingLayer = signalingLayer;\r\n\r\n    // SignalingLayer listeners\r\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\r\n    this.signalingLayer.on(\r\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n        this._peerVideoTypeChanged);\r\n\r\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\r\n    this.signalingLayer.on(\r\n        SignalingEvents.PEER_MUTED_CHANGED,\r\n        this._peerMutedChanged);\r\n    this.options = options;\r\n\r\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\r\n    // connection is P2P to rtcstats.\r\n    const safeConstraints = constraints || {};\r\n\r\n    safeConstraints.optional = safeConstraints.optional || [];\r\n\r\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\r\n    // Firefox and Safari just ignore it.\r\n    if (Array.isArray(safeConstraints.optional)) {\r\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\r\n    } else {\r\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\r\n    }\r\n\r\n    this.peerconnection\r\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, safeConstraints);\r\n\r\n    // The standard video bitrates are used in Unified plan when switching\r\n    // between camera/desktop tracks on the same sender.\r\n    const standardVideoBitrates = {\r\n        low: LD_BITRATE,\r\n        standard: SD_BITRATE,\r\n        high: HD_BITRATE\r\n    };\r\n\r\n    // Check if the max. bitrates for video are specified through config.js videoQuality settings.\r\n    // These bitrates will be applied on all browsers for camera sources in both simulcast and p2p mode.\r\n    this.videoBitrates = this.options.videoQuality && this.options.videoQuality.maxBitratesVideo\r\n        ? this.options.videoQuality.maxBitratesVideo\r\n        : standardVideoBitrates;\r\n\r\n    this.tpcUtils = new TPCUtils(this, this.videoBitrates);\r\n    this.updateLog = [];\r\n    this.stats = {};\r\n    this.statsinterval = null;\r\n\r\n    /**\r\n     * @type {number} The max number of stats to keep in this.stats. Limit to\r\n     * 300 values, i.e. 5 minutes; set to 0 to disable\r\n     */\r\n    this.maxstats = options.maxstats;\r\n\r\n    this.interop = new Interop();\r\n    const Simulcast = require('@jitsi/sdp-simulcast');\r\n\r\n    this.simulcast = new Simulcast(\r\n        {\r\n            numOfLayers: SIM_LAYER_RIDS.length,\r\n            explodeRemoteSimulcast: false,\r\n            usesUnifiedPlan: browser.usesUnifiedPlan()\r\n        });\r\n    this.sdpConsistency = new SdpConsistency(this.toString());\r\n\r\n    /**\r\n     * Munges local SDP provided to the Jingle Session in order to prevent from\r\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\r\n     * @type {LocalSdpMunger}\r\n     */\r\n    this.localSdpMunger = new LocalSdpMunger(this);\r\n\r\n    /**\r\n     * TracablePeerConnection uses RTC's eventEmitter\r\n     * @type {EventEmitter}\r\n     */\r\n    this.eventEmitter = rtc.eventEmitter;\r\n    this.rtxModifier = new RtxModifier();\r\n\r\n    /**\r\n     * The height constraint applied on the video sender.\r\n     */\r\n    this.senderVideoMaxHeight = null;\r\n\r\n    // We currently support preferring/disabling video codecs only.\r\n    const getCodecMimeType = codec => {\r\n        if (typeof codec === 'string') {\r\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    // Set the codec preference that will be applied on the SDP based on the config.js settings.\r\n    let preferredCodec = getCodecMimeType(\r\n        this.options.preferredCodec || (this.options.preferH264 && CodecMimeType.H264)\r\n    );\r\n\r\n    // Do not prefer VP9 on Firefox because of the following bug.\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1633876\r\n    if (browser.isFirefox() && preferredCodec === CodecMimeType.VP9) {\r\n        preferredCodec = null;\r\n    }\r\n\r\n    // Determine the codec that needs to be disabled based on config.js settings.\r\n    let disabledCodec = getCodecMimeType(\r\n        this.options.disabledCodec || (this.options.disableH264 && CodecMimeType.H264)\r\n    );\r\n\r\n    // Make sure we don't disable VP8 since it is a mandatory codec.\r\n    if (disabledCodec === CodecMimeType.VP8) {\r\n        logger.warn('Disabling VP8 is not permitted, setting is ignored!');\r\n        disabledCodec = null;\r\n    }\r\n\r\n    if (preferredCodec || disabledCodec) {\r\n        // If both enable and disable are set for the same codec, disable setting will prevail.\r\n        this.codecPreference = {\r\n            enable: disabledCodec === null,\r\n            mediaType: MediaType.VIDEO,\r\n            mimeType: disabledCodec ? disabledCodec : preferredCodec\r\n        };\r\n    }\r\n\r\n    // override as desired\r\n    this.trace = (what, info) => {\r\n        logger.debug(what, info);\r\n\r\n        this.updateLog.push({\r\n            time: new Date(),\r\n            type: what,\r\n            value: info || ''\r\n        });\r\n    };\r\n    this.onicecandidate = null;\r\n    this.peerconnection.onicecandidate = event => {\r\n        this.trace(\r\n            'onicecandidate',\r\n            JSON.stringify(event.candidate, null, ' '));\r\n\r\n        if (this.onicecandidate !== null) {\r\n            this.onicecandidate(event);\r\n        }\r\n    };\r\n\r\n    // Use stream events in plan-b and track events in unified plan.\r\n    if (browser.usesPlanB()) {\r\n        this.peerconnection.onaddstream\r\n            = event => this._remoteStreamAdded(event.stream);\r\n        this.peerconnection.onremovestream\r\n            = event => this._remoteStreamRemoved(event.stream);\r\n    } else {\r\n        this.peerconnection.ontrack = event => {\r\n            const stream = event.streams[0];\r\n\r\n            this._remoteTrackAdded(stream, event.track, event.transceiver);\r\n            stream.onremovetrack = evt => {\r\n                this._remoteTrackRemoved(stream, evt.track);\r\n            };\r\n        };\r\n    }\r\n    this.onsignalingstatechange = null;\r\n    this.peerconnection.onsignalingstatechange = event => {\r\n        this.trace('onsignalingstatechange', this.signalingState);\r\n        if (this.onsignalingstatechange !== null) {\r\n            this.onsignalingstatechange(event);\r\n        }\r\n    };\r\n    this.oniceconnectionstatechange = null;\r\n    this.peerconnection.oniceconnectionstatechange = event => {\r\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\r\n        if (this.oniceconnectionstatechange !== null) {\r\n            this.oniceconnectionstatechange(event);\r\n        }\r\n    };\r\n    this.onnegotiationneeded = null;\r\n    this.peerconnection.onnegotiationneeded = event => {\r\n        this.trace('onnegotiationneeded');\r\n        if (this.onnegotiationneeded !== null) {\r\n            this.onnegotiationneeded(event);\r\n        }\r\n    };\r\n    this.ondatachannel = null;\r\n    this.peerconnection.ondatachannel = event => {\r\n        this.trace('ondatachannel');\r\n        if (this.ondatachannel !== null) {\r\n            this.ondatachannel(event);\r\n        }\r\n    };\r\n\r\n    if (this.maxstats) {\r\n        this.statsinterval = window.setInterval(() => {\r\n            this.getStats(stats => {\r\n                if (stats.result\r\n                    && typeof stats.result === 'function') {\r\n                    const results = stats.result();\r\n\r\n                    for (let i = 0; i < results.length; ++i) {\r\n                        const res = results[i];\r\n\r\n                        res.names().forEach(name => {\r\n                            this._processStat(res, name, res.stat(name));\r\n                        });\r\n                    }\r\n                } else {\r\n                    stats.forEach(r => this._processStat(r, '', r));\r\n                }\r\n            }, () => {\r\n\r\n                // empty error callback\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    logger.info(`Create new ${this}`);\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Process stat and adds it to the array of stats we store.\r\n * @param report the current stats report.\r\n * @param name the name of the report, if available\r\n * @param statValue the value to add.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._processStat\r\n    = function(report, name, statValue) {\r\n        const id = `${report.id}-${name}`;\r\n        let s = this.stats[id];\r\n        const now = new Date();\r\n\r\n        if (!s) {\r\n            this.stats[id] = s = {\r\n                startTime: now,\r\n                endTime: now,\r\n                values: [],\r\n                times: []\r\n            };\r\n        }\r\n        s.values.push(statValue);\r\n        s.times.push(now.getTime());\r\n        if (s.values.length > this.maxstats) {\r\n            s.values.shift();\r\n            s.times.shift();\r\n        }\r\n        s.endTime = now;\r\n    };\r\n\r\n/**\r\n * Returns a string representation of a SessionDescription object.\r\n */\r\nconst dumpSDP = function(description) {\r\n    if (typeof description === 'undefined' || description === null) {\r\n        return '';\r\n    }\r\n\r\n    return `type: ${description.type}\\r\\n${description.sdp}`;\r\n};\r\n\r\n\r\n/**\r\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\r\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\r\n * succeeded and is up and running. We never see \"completed\" state for\r\n * the JVB connection, but it started appearing for the P2P one. This method\r\n * allows to adapt old logic to this new situation.\r\n * @return {string}\r\n */\r\nTraceablePeerConnection.prototype.getConnectionState = function() {\r\n    const state = this.peerconnection.iceConnectionState;\r\n\r\n    if (state === 'completed') {\r\n        return 'connected';\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\n/**\r\n * Obtains the media direction for given {@link MediaType}. The method takes\r\n * into account whether or not there are any local tracks for media and\r\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\r\n * @param {MediaType} mediaType\r\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\r\n * etc.) which should be used when setting local description on the peer\r\n * connection.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\r\n        mediaType) {\r\n    let mediaTransferActive = true;\r\n\r\n    if (mediaType === MediaType.AUDIO) {\r\n        mediaTransferActive = this.audioTransferActive;\r\n    } else if (mediaType === MediaType.VIDEO) {\r\n        mediaTransferActive = this.videoTransferActive;\r\n    }\r\n    if (mediaTransferActive) {\r\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\r\n    }\r\n\r\n    return 'inactive';\r\n};\r\n\r\n/**\r\n * Tells whether or not this TPC instance is using Simulcast.\r\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\r\n * <tt>false</tt> if it's turned off.\r\n */\r\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\r\n    return !this.options.disableSimulcast;\r\n};\r\n\r\n/**\r\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\r\n * @param {string} endpointId the video owner's ID (MUC nickname)\r\n * @param {VideoType} videoType the new value\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\r\n        endpointId,\r\n        videoType) {\r\n    // Check if endpointId has a value to avoid action on random track\r\n    if (!endpointId) {\r\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\r\n\r\n        return;\r\n    }\r\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\r\n\r\n    if (videoTrack.length) {\r\n        // NOTE 1 track per media type is assumed\r\n        videoTrack[0]._setVideoType(videoType);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles remote track mute / unmute events.\r\n * @param {string} endpointId the track owner's identifier (MUC nickname)\r\n * @param {MediaType} mediaType \"audio\" or \"video\"\r\n * @param {boolean} isMuted the new mute state\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._peerMutedChanged = function(\r\n        endpointId,\r\n        mediaType,\r\n        isMuted) {\r\n    // Check if endpointId is a value to avoid doing action on all remote tracks\r\n    if (!endpointId) {\r\n        logger.error('On peerMuteChanged - no endpoint ID');\r\n\r\n        return;\r\n    }\r\n    const track = this.getRemoteTracks(endpointId, mediaType);\r\n\r\n    if (track.length) {\r\n        // NOTE 1 track per media type is assumed\r\n        track[0].setMute(isMuted);\r\n    }\r\n};\r\n\r\n/**\r\n * Obtains audio levels of the remote audio tracks by getting the source\r\n * information on the RTCRtpReceivers. The information relevant to the ssrc\r\n * is updated each time a RTP packet constaining the ssrc is received.\r\n * @returns {Object} containing ssrc and audio level information as a\r\n * key-value pair.\r\n */\r\nTraceablePeerConnection.prototype.getAudioLevels = function() {\r\n    const audioLevels = {};\r\n    const audioReceivers = this.peerconnection.getReceivers()\r\n        .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO);\r\n\r\n    audioReceivers.forEach(remote => {\r\n        const ssrc = remote.getSynchronizationSources();\r\n\r\n        if (ssrc && ssrc.length) {\r\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\r\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\r\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\r\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\r\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\r\n        }\r\n    });\r\n\r\n    return audioLevels;\r\n};\r\n\r\n/**\r\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\r\n * argument is omitted the list of all local tracks will be returned.\r\n * @param {MediaType} [mediaType]\r\n * @return {Array<JitsiLocalTrack>}\r\n */\r\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\r\n    let tracks = Array.from(this.localTracks.values());\r\n\r\n    if (mediaType !== undefined) {\r\n        tracks = tracks.filter(track => track.getType() === mediaType);\r\n    }\r\n\r\n    return tracks;\r\n};\r\n\r\n/**\r\n * Retrieves the local video track.\r\n *\r\n * @returns {JitsiLocalTrack|undefined} - local video track.\r\n */\r\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\r\n    return this.getLocalTracks(MediaType.VIDEO)[0];\r\n};\r\n\r\n/**\r\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\r\n * any local tracks for given <tt>mediaType</tt>.\r\n * @param {MediaType} mediaType\r\n * @return {boolean}\r\n */\r\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\r\n    if (!mediaType) {\r\n        throw new Error('\"mediaType\" is required');\r\n    }\r\n\r\n    return this.getLocalTracks(mediaType).length > 0;\r\n};\r\n\r\n/**\r\n * Obtains all remote tracks currently known to this PeerConnection instance.\r\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\r\n * @param {MediaType} [mediaType] the remote tracks will be filtered\r\n * by their media type if this argument is specified.\r\n * @return {Array<JitsiRemoteTrack>}\r\n */\r\nTraceablePeerConnection.prototype.getRemoteTracks = function(\r\n        endpointId,\r\n        mediaType) {\r\n    const remoteTracks = [];\r\n    const endpoints\r\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\r\n\r\n    for (const endpoint of endpoints) {\r\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\r\n\r\n        if (!endpointTrackMap) {\r\n\r\n            // Otherwise an empty Map() would have to be allocated above\r\n            // eslint-disable-next-line no-continue\r\n            continue;\r\n        }\r\n\r\n        for (const trackMediaType of endpointTrackMap.keys()) {\r\n            // per media type filtering\r\n            if (!mediaType || mediaType === trackMediaType) {\r\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\r\n\r\n                if (mediaTrack) {\r\n                    remoteTracks.push(mediaTrack);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return remoteTracks;\r\n};\r\n\r\n/**\r\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\r\n * local and remote tracks bound to this instance.\r\n * @param {number} ssrc\r\n * @return {JitsiTrack|null}\r\n */\r\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\r\n    if (typeof ssrc !== 'number') {\r\n        throw new Error(`SSRC ${ssrc} is not a number`);\r\n    }\r\n    for (const localTrack of this.localTracks.values()) {\r\n        if (this.getLocalSSRC(localTrack) === ssrc) {\r\n            return localTrack;\r\n        }\r\n    }\r\n    for (const remoteTrack of this.getRemoteTracks()) {\r\n        if (remoteTrack.getSSRC() === ssrc) {\r\n            return remoteTrack;\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\r\n * both local and remote tracks bound to this instance.\r\n * @param {string} id\r\n * @return {number|null}\r\n */\r\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\r\n\r\n    const findTrackById = track => track.getTrack().id === id;\r\n    const localTrack = this.getLocalTracks().find(findTrackById);\r\n\r\n    if (localTrack) {\r\n        return this.getLocalSSRC(localTrack);\r\n    }\r\n\r\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\r\n\r\n    if (remoteTrack) {\r\n        return remoteTrack.getSSRC();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Called when new remote MediaStream is added to the PeerConnection.\r\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\r\n */\r\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\r\n    const streamId = RTC.getStreamID(stream);\r\n\r\n    if (!RTC.isUserStreamById(streamId)) {\r\n        logger.info(\r\n            `${this} ignored remote 'stream added' event for non-user stream`\r\n             + `id: ${streamId}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Bind 'addtrack'/'removetrack' event handlers\r\n    if (browser.isChromiumBased()) {\r\n        stream.onaddtrack = event => {\r\n            this._remoteTrackAdded(stream, event.track);\r\n        };\r\n        stream.onremovetrack = event => {\r\n            this._remoteTrackRemoved(stream, event.track);\r\n        };\r\n    }\r\n\r\n    // Call remoteTrackAdded for each track in the stream\r\n    const streamAudioTracks = stream.getAudioTracks();\r\n\r\n    for (const audioTrack of streamAudioTracks) {\r\n        this._remoteTrackAdded(stream, audioTrack);\r\n    }\r\n    const streamVideoTracks = stream.getVideoTracks();\r\n\r\n    for (const videoTrack of streamVideoTracks) {\r\n        this._remoteTrackAdded(stream, videoTrack);\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\r\n * handle streams on per track basis). Finds the owner and the SSRC for\r\n * the track and passes that to ChatRoom for further processing.\r\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\r\n * the parent of the track\r\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\r\n * participant.\r\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\r\n * for the remote participant in unified plan.\r\n */\r\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\r\n    const streamId = RTC.getStreamID(stream);\r\n    const mediaType = track.kind;\r\n\r\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\r\n        logger.info(\r\n            `${this} ignored remote 'stream added' event for non-user stream`\r\n             + `id: ${streamId}`);\r\n\r\n        return;\r\n    }\r\n    logger.info(`${this} remote track added:`, streamId, mediaType);\r\n\r\n    // look up an associated JID for a stream id\r\n    if (!mediaType) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `MediaType undefined for remote track, stream id: ${streamId}`\r\n            ));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    const remoteSDP = browser.usesPlanB()\r\n        ? new SDP(this.remoteDescription.sdp)\r\n        : new SDP(this.peerconnection.remoteDescription.sdp);\r\n    let mediaLines;\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        if (transceiver && transceiver.mid) {\r\n            const mid = transceiver.mid;\r\n\r\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\r\n        } else {\r\n            mediaLines = remoteSDP.media.filter(mls => {\r\n                const msid = SDPUtil.findLine(mls, 'a=msid');\r\n\r\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\r\n            });\r\n        }\r\n    } else {\r\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\r\n    }\r\n\r\n    if (!mediaLines.length) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No media lines for type ${\r\n                    mediaType} found in remote SDP for remote track: ${\r\n                    streamId}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\r\n\r\n    ssrcLines\r\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\r\n    if (!ssrcLines.length) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No SSRC lines for streamId ${\r\n                    streamId} for remote track, media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\r\n    // with global error handler anyway\r\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\r\n    const trackSsrc = Number(ssrcStr);\r\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\r\n\r\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\r\n                    streamId} media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    } else if (!ownerEndpointId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No SSRC owner known for: ${\r\n                    trackSsrc} for remote track, msid: ${\r\n                    streamId} media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    logger.log(`${this} associated ssrc`, ownerEndpointId, trackSsrc);\r\n\r\n    const peerMediaInfo\r\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\r\n\r\n    if (!peerMediaInfo) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `${this}: no peer media info available for ${\r\n                    ownerEndpointId}`));\r\n\r\n        return;\r\n    }\r\n\r\n    const muted = peerMediaInfo.muted;\r\n    const videoType = peerMediaInfo.videoType; // can be undefined\r\n\r\n    this._createRemoteTrack(\r\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\r\n};\r\n\r\n// FIXME cleanup params\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Initializes a new JitsiRemoteTrack instance with the data provided by\r\n * the signaling layer and SDP.\r\n *\r\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\r\n * @param {MediaStream} stream the WebRTC stream instance\r\n * @param {MediaStreamTrack} track the WebRTC track instance\r\n * @param {MediaType} mediaType the track's type of the media\r\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\r\n * @param {number} ssrc the track's main SSRC number\r\n * @param {boolean} muted the initial muted status\r\n */\r\nTraceablePeerConnection.prototype._createRemoteTrack = function(\r\n        ownerEndpointId,\r\n        stream,\r\n        track,\r\n        mediaType,\r\n        videoType,\r\n        ssrc,\r\n        muted) {\r\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\r\n\r\n    if (!remoteTracksMap) {\r\n        remoteTracksMap = new Map();\r\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\r\n    }\r\n\r\n    const existingTrack = remoteTracksMap.get(mediaType);\r\n\r\n    // Delete the existing track and create the new one because of a known bug on Safari.\r\n    // RTCPeerConnection.ontrack fires when a new remote track is added but MediaStream.onremovetrack doesn't so\r\n    // it needs to be removed whenever a new track is received for the same endpoint id.\r\n    if (existingTrack && browser.isSafari()) {\r\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\r\n    }\r\n\r\n    if (existingTrack && existingTrack.getTrack() === track) {\r\n        // Ignore duplicated event which can originate either from\r\n        // 'onStreamAdded' or 'onTrackAdded'.\r\n        logger.info(\r\n            `${this} ignored duplicated remote track added event for: `\r\n                + `${ownerEndpointId}, ${mediaType}`);\r\n\r\n        return;\r\n    } else if (existingTrack) {\r\n        logger.error(`${this} overwriting remote track for ${ownerEndpointId} ${mediaType}`);\r\n    }\r\n\r\n    const remoteTrack\r\n        = new JitsiRemoteTrack(\r\n                this.rtc,\r\n                this.rtc.conference,\r\n                ownerEndpointId,\r\n                stream,\r\n                track,\r\n                mediaType,\r\n                videoType,\r\n                ssrc,\r\n                muted,\r\n                this.isP2P);\r\n\r\n    remoteTracksMap.set(mediaType, remoteTrack);\r\n\r\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Handles remote stream removal.\r\n * @param stream the WebRTC MediaStream object which is being removed from the\r\n * PeerConnection\r\n */\r\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\r\n    if (!RTC.isUserStream(stream)) {\r\n        const id = RTC.getStreamID(stream);\r\n\r\n        logger.info(\r\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Call remoteTrackRemoved for each track in the stream\r\n    const streamVideoTracks = stream.getVideoTracks();\r\n\r\n    for (const videoTrack of streamVideoTracks) {\r\n        this._remoteTrackRemoved(stream, videoTrack);\r\n    }\r\n    const streamAudioTracks = stream.getAudioTracks();\r\n\r\n    for (const audioTrack of streamAudioTracks) {\r\n        this._remoteTrackRemoved(stream, audioTrack);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles remote media track removal.\r\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\r\n * of the track.\r\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\r\n * removed from the PeerConnection.\r\n */\r\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\r\n        stream,\r\n        track) {\r\n    const streamId = RTC.getStreamID(stream);\r\n    const trackId = track && RTC.getTrackID(track);\r\n\r\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\r\n\r\n    if (!streamId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`${this} remote track removal failed - no stream ID`));\r\n\r\n        return;\r\n    }\r\n\r\n    if (!trackId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`${this} remote track removal failed - no track ID`));\r\n\r\n        return;\r\n    }\r\n\r\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\r\n        // NOTE this warning is always printed when user leaves the room,\r\n        // because we remove remote tracks manually on MUC member left event,\r\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\r\n        // ignore this warning, but still it's better to keep it printed for\r\n        // debugging purposes.\r\n        //\r\n        // We could change the behaviour to emit track removed only from here,\r\n        // but the order of the events will change and consuming apps could\r\n        // behave unexpectedly (the \"user left\" event would come before \"track\r\n        // removed\" events).\r\n        logger.warn(\r\n            `${this} Removed track not found for msid: ${streamId},\r\n             track id: ${trackId}`);\r\n    }\r\n};\r\n\r\n/**\r\n * Finds remote track by it's stream and track ids.\r\n * @param {string} streamId the media stream id as defined by the WebRTC\r\n * @param {string} trackId the media track id as defined by the WebRTC\r\n * @return {JitsiRemoteTrack|undefined} the track's instance or\r\n * <tt>undefined</tt> if not found.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\r\n        streamId,\r\n        trackId) {\r\n    // .find will break the loop once the first match is found\r\n    for (const endpointTrackMap of this.remoteTracks.values()) {\r\n        for (const mediaTrack of endpointTrackMap.values()) {\r\n            // FIXME verify and try to use ===\r\n            /* eslint-disable eqeqeq */\r\n            if (mediaTrack.getStreamId() == streamId\r\n                && mediaTrack.getTrackId() == trackId) {\r\n                return mediaTrack;\r\n            }\r\n\r\n            /* eslint-enable eqeqeq */\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Removes all JitsiRemoteTracks associated with given MUC nickname\r\n * (resource part of the JID). Returns array of removed tracks.\r\n *\r\n * @param {string} owner - The resource part of the MUC JID.\r\n * @returns {JitsiRemoteTrack[]}\r\n */\r\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\r\n    const removedTracks = [];\r\n    const remoteTracksMap = this.remoteTracks.get(owner);\r\n\r\n    if (remoteTracksMap) {\r\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\r\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\r\n\r\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\r\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\r\n\r\n        this.remoteTracks.delete(owner);\r\n    }\r\n\r\n    logger.debug(\r\n        `${this} removed remote tracks for ${owner} count: ${\r\n            removedTracks.length}`);\r\n\r\n    return removedTracks;\r\n};\r\n\r\n/**\r\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\r\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\r\n * @param {JitsiRemoteTrack} toBeRemoved\r\n */\r\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\r\n    toBeRemoved.dispose();\r\n    const participantId = toBeRemoved.getParticipantId();\r\n    const remoteTracksMap = this.remoteTracks.get(participantId);\r\n\r\n    if (!remoteTracksMap) {\r\n        logger.error(\r\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\r\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\r\n        logger.error(\r\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\r\n    }\r\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\r\n};\r\n\r\n/**\r\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\r\n * track ids.\r\n *\r\n * @param {string} streamId the media stream id as defined by the WebRTC\r\n * @param {string} trackId the media track id as defined by the WebRTC\r\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\r\n * <tt>undefined</tt> if no track matching given stream and track ids was\r\n * found.\r\n */\r\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\r\n        streamId,\r\n        trackId) {\r\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\r\n\r\n    if (toBeRemoved) {\r\n        this._removeRemoteTrack(toBeRemoved);\r\n    }\r\n\r\n    return toBeRemoved;\r\n};\r\n\r\n/**\r\n * @typedef {Object} SSRCGroupInfo\r\n * @property {Array<number>} ssrcs group's SSRCs\r\n * @property {string} semantics\r\n */\r\n/**\r\n * @typedef {Object} TrackSSRCInfo\r\n * @property {Array<number>} ssrcs track's SSRCs\r\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\r\n */\r\n/**\r\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\r\n * @param {Object} desc the WebRTC SDP instance.\r\n * @return {Map<string,TrackSSRCInfo>}\r\n */\r\nfunction extractSSRCMap(desc) {\r\n    /**\r\n     * Track SSRC infos mapped by stream ID (msid)\r\n     * @type {Map<string,TrackSSRCInfo>}\r\n     */\r\n    const ssrcMap = new Map();\r\n\r\n    /**\r\n     * Groups mapped by primary SSRC number\r\n     * @type {Map<number,Array<SSRCGroupInfo>>}\r\n     */\r\n    const groupsMap = new Map();\r\n\r\n    if (typeof desc !== 'object' || desc === null\r\n        || typeof desc.sdp !== 'string') {\r\n        logger.warn('An empty description was passed as an argument.');\r\n\r\n        return ssrcMap;\r\n    }\r\n\r\n    const session = transform.parse(desc.sdp);\r\n\r\n    if (!Array.isArray(session.media)) {\r\n        return ssrcMap;\r\n    }\r\n\r\n    for (const mLine of session.media) {\r\n        if (!Array.isArray(mLine.ssrcs)) {\r\n            continue; // eslint-disable-line no-continue\r\n        }\r\n\r\n        if (Array.isArray(mLine.ssrcGroups)) {\r\n            for (const group of mLine.ssrcGroups) {\r\n                if (typeof group.semantics !== 'undefined'\r\n                    && typeof group.ssrcs !== 'undefined') {\r\n                    // Parse SSRCs and store as numbers\r\n                    const groupSSRCs\r\n                        = group.ssrcs.split(' ').map(\r\n                            ssrcStr => parseInt(ssrcStr, 10));\r\n                    const primarySSRC = groupSSRCs[0];\r\n\r\n                    // Note that group.semantics is already present\r\n\r\n                    group.ssrcs = groupSSRCs;\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    if (!groupsMap.has(primarySSRC)) {\r\n                        groupsMap.set(primarySSRC, []);\r\n                    }\r\n                    groupsMap.get(primarySSRC).push(group);\r\n                }\r\n            }\r\n        }\r\n        for (const ssrc of mLine.ssrcs) {\r\n            if (ssrc.attribute !== 'msid') {\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            const msid = ssrc.value;\r\n            let ssrcInfo = ssrcMap.get(msid);\r\n\r\n            if (!ssrcInfo) {\r\n                ssrcInfo = {\r\n                    ssrcs: [],\r\n                    groups: [],\r\n                    msid\r\n                };\r\n                ssrcMap.set(msid, ssrcInfo);\r\n            }\r\n\r\n            const ssrcNumber = ssrc.id;\r\n\r\n            ssrcInfo.ssrcs.push(ssrcNumber);\r\n\r\n            if (groupsMap.has(ssrcNumber)) {\r\n                const ssrcGroups = groupsMap.get(ssrcNumber);\r\n\r\n                for (const group of ssrcGroups) {\r\n                    ssrcInfo.groups.push(group);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return ssrcMap;\r\n}\r\n\r\n/**\r\n * Takes a SessionDescription object and returns a \"normalized\" version.\r\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\r\n * only SSRCs.\r\n */\r\nconst normalizePlanB = function(desc) {\r\n    if (typeof desc !== 'object' || desc === null\r\n        || typeof desc.sdp !== 'string') {\r\n        logger.warn('An empty description was passed as an argument.');\r\n\r\n        return desc;\r\n    }\r\n\r\n    // eslint-disable-next-line no-shadow\r\n    const transform = require('sdp-transform');\r\n    const session = transform.parse(desc.sdp);\r\n\r\n    if (typeof session !== 'undefined'\r\n            && typeof session.media !== 'undefined'\r\n            && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n\r\n            // Chrome appears to be picky about the order in which a=ssrc lines\r\n            // are listed in an m-line when rtx is enabled (and thus there are\r\n            // a=ssrc-group lines with FID semantics). Specifically if we have\r\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\r\n            // the \"a=ssrc:S1\" lines, SRD fails.\r\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\r\n            // first.\r\n            const firstSsrcs = [];\r\n            const newSsrcLines = [];\r\n\r\n            if (typeof mLine.ssrcGroups !== 'undefined'\r\n                && Array.isArray(mLine.ssrcGroups)) {\r\n                mLine.ssrcGroups.forEach(group => {\r\n                    if (typeof group.semantics !== 'undefined'\r\n                        && group.semantics === 'FID') {\r\n                        if (typeof group.ssrcs !== 'undefined') {\r\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (Array.isArray(mLine.ssrcs)) {\r\n                let i;\r\n\r\n                for (i = 0; i < mLine.ssrcs.length; i++) {\r\n                    if (typeof mLine.ssrcs[i] === 'object'\r\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\r\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\r\n                        newSsrcLines.push(mLine.ssrcs[i]);\r\n                        delete mLine.ssrcs[i];\r\n                    }\r\n                }\r\n\r\n                for (i = 0; i < mLine.ssrcs.length; i++) {\r\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\r\n                        newSsrcLines.push(mLine.ssrcs[i]);\r\n                    }\r\n                }\r\n\r\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\r\n            }\r\n        });\r\n    }\r\n\r\n    const resStr = transform.write(session);\r\n\r\n\r\n    return new RTCSessionDescription({\r\n        type: desc.type,\r\n        sdp: resStr\r\n    });\r\n};\r\n\r\n/**\r\n * Unified plan differentiates a remote track not associated with a stream using\r\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\r\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\r\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\r\n * line. Normally the ssrcs are not used by the client, as the bridge controls\r\n * media flow, but keep one reference to the ssrc for the p2p case.\r\n *\r\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\r\n * @private\r\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\r\n */\r\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\r\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\r\n        return ssrcLines;\r\n    }\r\n\r\n    let filteredLines = [ ...ssrcLines ];\r\n\r\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\r\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\r\n        .map(ssrcLine => ssrcLine.id);\r\n\r\n    problematicSsrcIds.forEach(ssrcId => {\r\n        // Find the cname which is to be modified and left in.\r\n        const cnameLine = filteredLines.find(line =>\r\n            line.id === ssrcId && line.attribute === 'cname');\r\n\r\n        cnameLine.value = `recvonly-${ssrcId}`;\r\n\r\n        // Remove all of lines for the ssrc.\r\n        filteredLines\r\n            = filteredLines.filter(line => line.id !== ssrcId);\r\n\r\n        // But re-add the cname line so there is a reference kept to the ssrc\r\n        // in the SDP.\r\n        filteredLines.push(cnameLine);\r\n    });\r\n\r\n    return filteredLines;\r\n}\r\n\r\n/**\r\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\r\n * @param {Object} localDescription the SDP object as defined by WebRTC.\r\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\r\n */\r\nconst enforceSendRecv = function(localDescription, options) {\r\n    if (!localDescription) {\r\n        throw new Error('No local description passed in.');\r\n    }\r\n\r\n    const transformer = new SdpTransformWrap(localDescription.sdp);\r\n    const audioMedia = transformer.selectMedia('audio');\r\n    let changed = false;\r\n\r\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\r\n        if (options.startSilent) {\r\n            audioMedia.direction = 'inactive';\r\n        } else {\r\n            audioMedia.direction = 'sendrecv';\r\n        }\r\n\r\n        changed = true;\r\n    }\r\n\r\n    const videoMedia = transformer.selectMedia('video');\r\n\r\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\r\n        videoMedia.direction = 'sendrecv';\r\n        changed = true;\r\n    }\r\n\r\n    if (changed) {\r\n        return new RTCSessionDescription({\r\n            type: localDescription.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    return localDescription;\r\n};\r\n\r\n/**\r\n *\r\n * @param {JitsiLocalTrack} localTrack\r\n */\r\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\r\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\r\n\r\n    return ssrcInfo && ssrcInfo.ssrcs[0];\r\n};\r\n\r\n/**\r\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\r\n * same msid but no ssrc-group, since unified plan signals the simulcast\r\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\r\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\r\n * an ssrc-group line to make Jicofo happy.\r\n * @param desc A session description object (with 'type' and 'sdp' fields)\r\n * @return A session description object with its sdp field modified to\r\n * contain an inject ssrc-group for simulcast\r\n */\r\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\r\n    = function(desc) {\r\n        const sdp = transform.parse(desc.sdp);\r\n        const video = sdp.media.find(mline => mline.type === 'video');\r\n\r\n        // Check if the browser supports RTX, add only the primary ssrcs to the\r\n        // SIM group if that is the case.\r\n        video.ssrcGroups = video.ssrcGroups || [];\r\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\r\n\r\n        if (video.simulcast || video.simulcast_03) {\r\n            const ssrcs = [];\r\n\r\n            if (fidGroups && fidGroups.length) {\r\n                fidGroups.forEach(group => {\r\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\r\n                });\r\n            } else {\r\n                video.ssrcs.forEach(ssrc => {\r\n                    if (ssrc.attribute === 'msid') {\r\n                        ssrcs.push(ssrc.id);\r\n                    }\r\n                });\r\n            }\r\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\r\n                // Group already exists, no need to do anything\r\n                return desc;\r\n            }\r\n            video.ssrcGroups.push({\r\n                semantics: 'SIM',\r\n                ssrcs: ssrcs.join(' ')\r\n            });\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: desc.type,\r\n            sdp: transform.write(sdp)\r\n        });\r\n    };\r\n\r\n/* eslint-disable-next-line vars-on-top */\r\nconst getters = {\r\n    signalingState() {\r\n        return this.peerconnection.signalingState;\r\n    },\r\n    iceConnectionState() {\r\n        return this.peerconnection.iceConnectionState;\r\n    },\r\n    localDescription() {\r\n        let desc = this.peerconnection.localDescription;\r\n\r\n        if (!desc) {\r\n            logger.debug('getLocalDescription no localDescription found');\r\n\r\n            return {};\r\n        }\r\n\r\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\r\n\r\n        // if we're running on FF, transform to Plan B first.\r\n        if (browser.usesUnifiedPlan()) {\r\n            desc = this.interop.toPlanB(desc);\r\n            this.trace('getLocalDescription::postTransform (Plan B)',\r\n                dumpSDP(desc));\r\n\r\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\r\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\r\n                dumpSDP(desc));\r\n        } else {\r\n            if (browser.doesVideoMuteByStreamRemove()) {\r\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\r\n                logger.debug(\r\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\r\n            }\r\n\r\n            // What comes out of this getter will be signalled over Jingle to\r\n            // the other peer, so we need to make sure the media direction is\r\n            // 'sendrecv' because we won't change the direction later and don't want\r\n            // the other peer to think we can't send or receive.\r\n            //\r\n            // Note that the description we set in chrome does have the accurate\r\n            // direction (e.g. 'recvonly'), since that is technically what is\r\n            // happening (check setLocalDescription impl).\r\n            desc = enforceSendRecv(desc, this.options);\r\n        }\r\n\r\n        // See the method's doc for more info about this transformation.\r\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\r\n\r\n        return desc;\r\n    },\r\n    remoteDescription() {\r\n        let desc = this.peerconnection.remoteDescription;\r\n\r\n        if (!desc) {\r\n            logger.debug('getRemoteDescription no remoteDescription found');\r\n\r\n            return {};\r\n        }\r\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\r\n\r\n        // if we're running on FF, transform to Plan B first.\r\n        if (browser.usesUnifiedPlan()) {\r\n            desc = this.interop.toPlanB(desc);\r\n            this.trace(\r\n                'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\r\n        }\r\n\r\n        return desc;\r\n    }\r\n};\r\n\r\nObject.keys(getters).forEach(prop => {\r\n    Object.defineProperty(\r\n        TraceablePeerConnection.prototype,\r\n        prop, {\r\n            get: getters[prop]\r\n        }\r\n    );\r\n});\r\n\r\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\r\n    return this.localSSRCs.get(rtcId);\r\n};\r\n\r\n/**\r\n * Munges the order of the codecs in the SDP passed based on the preference\r\n * set through config.js settings. All instances of the specified codec are\r\n * moved up to the top of the list when it is preferred. The specified codec\r\n * is deleted from the list if the configuration specifies that the codec be\r\n * disabled.\r\n * @param {RTCSessionDescription} description that needs to be munged.\r\n * @returns {RTCSessionDescription} the munged description.\r\n */\r\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\r\n    if (!this.codecPreference || browser.supportsCodecPreferences()) {\r\n        return description;\r\n    }\r\n\r\n    const parsedSdp = transform.parse(description.sdp);\r\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\r\n\r\n    if (this.codecPreference.enable) {\r\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\r\n\r\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\r\n        // High profile codecs give better quality at the expense of higher load which\r\n        // we do not want on mobile clients.\r\n        // Jicofo offers only the baseline code for the jvb connection.\r\n        // TODO - add check for mobile browsers once js-utils provides that check.\r\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\r\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\r\n        }\r\n    } else {\r\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\r\n    }\r\n\r\n    return new RTCSessionDescription({\r\n        type: description.type,\r\n        sdp: transform.write(parsedSdp)\r\n    });\r\n};\r\n\r\n/**\r\n * Checks if given track belongs to this peerconnection instance.\r\n *\r\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\r\n * @returns {boolean}\r\n */\r\nTraceablePeerConnection.prototype.containsTrack = function(track) {\r\n    if (track.isLocal()) {\r\n        return this.localTracks.has(track.rtcId);\r\n    }\r\n\r\n    const participantId = track.getParticipantId();\r\n    const remoteTracksMap = this.remoteTracks.get(participantId);\r\n\r\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\r\n};\r\n\r\n/**\r\n * Add {@link JitsiLocalTrack} to this TPC.\r\n * @param {JitsiLocalTrack} track\r\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\r\n * @returns {Promise<void>} - resolved when done.\r\n */\r\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\r\n    const rtcId = track.rtcId;\r\n\r\n    logger.info(`add ${track} to: ${this}`);\r\n\r\n    if (this.localTracks.has(rtcId)) {\r\n\r\n        return Promise.reject(new Error(`${track} is already in ${this}`));\r\n    }\r\n\r\n    this.localTracks.set(rtcId, track);\r\n\r\n    // For p2p unified case, use addTransceiver API to add the tracks on the peerconnection.\r\n    if (browser.usesUnifiedPlan() && this.isP2P) {\r\n        this.tpcUtils.addTrack(track, isInitiator);\r\n    } else {\r\n        // In all other cases, i.e., plan-b and unified plan bridge case, use addStream API to\r\n        // add the track to the peerconnection.\r\n        // TODO - addTransceiver doesn't generate a MSID for the stream, which is needed for signaling\r\n        // the ssrc to Jicofo. Switch to using UUID as MSID when addTransceiver is used in Unified plan\r\n        // JVB connection case as well.\r\n        const webrtcStream = track.getOriginalStream();\r\n\r\n        if (webrtcStream) {\r\n            this._addStream(webrtcStream);\r\n\r\n        // It's not ok for a track to not have a WebRTC stream if:\r\n        } else if (!browser.doesVideoMuteByStreamRemove()\r\n                    || track.isAudioTrack()\r\n                    || (track.isVideoTrack() && !track.isMuted())) {\r\n            return Promise.reject(new Error(`${this} no WebRTC stream for: ${track}`));\r\n        }\r\n\r\n        // Muted video tracks do not have WebRTC stream\r\n        if (browser.usesPlanB() && browser.doesVideoMuteByStreamRemove()\r\n                && track.isVideoTrack() && track.isMuted()) {\r\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\r\n\r\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\r\n            const simGroup\r\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\r\n\r\n            if (simGroup) {\r\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\r\n            }\r\n            const fidGroups\r\n                = ssrcInfo.groups.filter(\r\n                    groupInfo => groupInfo.semantics === 'FID');\r\n\r\n            if (fidGroups) {\r\n                const rtxSsrcMapping = new Map();\r\n\r\n                fidGroups.forEach(fidGroup => {\r\n                    const primarySsrc = fidGroup.ssrcs[0];\r\n                    const rtxSsrc = fidGroup.ssrcs[1];\r\n\r\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\r\n                });\r\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\r\n            }\r\n        }\r\n    }\r\n\r\n    let promiseChain = Promise.resolve();\r\n\r\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\r\n    if (browser.isFirefox()) {\r\n        promiseChain = this.tpcUtils.setEncodings(track);\r\n    }\r\n\r\n    return promiseChain;\r\n};\r\n\r\n/**\r\n * Adds local track as part of the unmute operation.\r\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\r\n * operation\r\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\r\n * state has changed and renegotiation is required, false if no renegotiation is needed or\r\n * Promise is rejected when something goes wrong.\r\n */\r\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\r\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\r\n        // Abort\r\n        return Promise.reject('Track not found on the peerconnection');\r\n    }\r\n\r\n    logger.info(`Adding ${track} as unmute to ${this}`);\r\n    const webRtcStream = track.getOriginalStream();\r\n\r\n    if (!webRtcStream) {\r\n        logger.error(\r\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\r\n\r\n        return Promise.reject('Stream not found');\r\n    }\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.addTrackUnmute(track);\r\n    }\r\n\r\n    this._addStream(webRtcStream);\r\n\r\n    return Promise.resolve(true);\r\n};\r\n\r\n/**\r\n * Adds WebRTC media stream to the underlying PeerConnection\r\n * @param {MediaStream} mediaStream\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\r\n    this.peerconnection.addStream(mediaStream);\r\n    this._addedStreams.push(mediaStream);\r\n};\r\n\r\n/**\r\n * Removes WebRTC media stream from the underlying PeerConection\r\n * @param {MediaStream} mediaStream\r\n */\r\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\r\n    this.peerconnection.removeStream(mediaStream);\r\n    this._addedStreams\r\n        = this._addedStreams.filter(stream => stream !== mediaStream);\r\n};\r\n\r\n/**\r\n * This method when called will check if given <tt>localTrack</tt> belongs to\r\n * this TPC (that it has been previously added using {@link addTrack}). If the\r\n * track does not belong an error message will be logged.\r\n * @param {string} methodName the method name that will be logged in an error\r\n * message\r\n * @param {JitsiLocalTrack} localTrack\r\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\r\n * <tt>false</tt> otherwise.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\r\n        methodName,\r\n        localTrack) {\r\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\r\n\r\n    if (!doesBelong) {\r\n        logger.error(\r\n            `${methodName}: ${localTrack} does not belong to ${this}`);\r\n    }\r\n\r\n    return doesBelong;\r\n};\r\n\r\n/**\r\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\r\n * the underlying WebRTC PeerConnection.\r\n * @param {MediaStream} mediaStream\r\n * @returns {boolean}\r\n */\r\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\r\n    return this._addedStreams.indexOf(mediaStream) > -1;\r\n};\r\n\r\n/**\r\n * Remove local track from this TPC.\r\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\r\n *\r\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\r\n *       The same applies to addTrack.\r\n */\r\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\r\n    const webRtcStream = localTrack.getOriginalStream();\r\n\r\n    this.trace(\r\n        'removeStream',\r\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\r\n\r\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\r\n        // Abort - nothing to be done here\r\n        return;\r\n    }\r\n    this.localTracks.delete(localTrack.rtcId);\r\n    this.localSSRCs.delete(localTrack.rtcId);\r\n\r\n    if (webRtcStream) {\r\n        this.peerconnection.removeStream(webRtcStream);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns the sender corresponding to the given media type.\r\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\r\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\r\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\r\n};\r\n\r\n/**\r\n * Returns the receiver corresponding to the given MediaStreamTrack.\r\n *\r\n * @param {MediaSreamTrack} track - The media stream track used for the search.\r\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\r\n    return this.peerconnection.getReceivers().find(r => r.track === track);\r\n};\r\n\r\n/**\r\n * Returns the sender corresponding to the given MediaStreamTrack.\r\n *\r\n * @param {MediaSreamTrack} track - The media stream track used for the search.\r\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\r\n    return this.peerconnection.getSenders().find(s => s.track === track);\r\n};\r\n\r\n/**\r\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\r\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\r\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\r\n * <tt>oldTrack</tt>\r\n *\r\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\r\n * replaced\r\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\r\n * @returns {Promise<boolean>} - If the promise resolves with true,\r\n * renegotiation will be needed. Otherwise no renegotiation is needed.\r\n */\r\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack)\r\n\r\n            // renegotiate when SDP is used for simulcast munging\r\n            .then(() => this.isSimulcastOn() && browser.usesSdpMungingForSimulcast());\r\n    }\r\n\r\n    let promiseChain = Promise.resolve();\r\n\r\n    if (oldTrack) {\r\n        this.removeTrack(oldTrack);\r\n    }\r\n    if (newTrack) {\r\n        promiseChain = this.addTrack(newTrack);\r\n    }\r\n\r\n    return promiseChain.then(() => true);\r\n};\r\n\r\n/**\r\n * Removes local track as part of the mute operation.\r\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\r\n * the mute operation.\r\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\r\n * state has changed and renegotiation is required, false if no renegotiation is needed or\r\n * Promise is rejected when something goes wrong.\r\n */\r\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\r\n    const webRtcStream = localTrack.getOriginalStream();\r\n\r\n    this.trace(\r\n        'removeStreamMute',\r\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\r\n\r\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\r\n        // Abort - nothing to be done here\r\n        return Promise.reject('Track not found in the peerconnection');\r\n    }\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.removeTrackMute(localTrack);\r\n    }\r\n\r\n    if (webRtcStream) {\r\n        logger.info(\r\n            `Removing ${localTrack} as mute from ${this}`);\r\n        this._removeStream(webRtcStream);\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\r\n\r\n    return Promise.reject('Stream not found');\r\n};\r\n\r\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\r\n    this.trace('createDataChannel', label, opts);\r\n\r\n    return this.peerconnection.createDataChannel(label, opts);\r\n};\r\n\r\n/**\r\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\r\n * in the SDP so that simulcast is properly activated.\r\n *\r\n * @param {Object} localSdp the WebRTC session description instance for\r\n * the local description.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\r\n        localSdp) {\r\n    let sdpStr = localSdp.sdp;\r\n\r\n    const videoStartIndex = sdpStr.indexOf('m=video');\r\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\r\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\r\n\r\n    if (simStartIndex === -1\r\n        || otherStartIndex === -1\r\n        || otherStartIndex === simStartIndex) {\r\n        return localSdp;\r\n    }\r\n\r\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\r\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\r\n\r\n    sdpStr = sdpStr.replace(simStr, '');\r\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\r\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\r\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\r\n    const simStrTrimmed = simStr.trim();\r\n    const sdpTail = sdpStr.slice(otherEndIndex);\r\n\r\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\r\n\r\n    return new RTCSessionDescription({\r\n        type: localSdp.type,\r\n        sdp: sdpStr\r\n    });\r\n};\r\n\r\n/**\r\n * Will adjust audio and video media direction in the given SDP object to\r\n * reflect the current status of the {@link audioTransferActive} and\r\n * {@link videoTransferActive} flags.\r\n * @param {Object} localDescription the WebRTC session description instance for\r\n * the local description.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\r\n        localDescription) {\r\n    const transformer = new SdpTransformWrap(localDescription.sdp);\r\n    let modifiedDirection = false;\r\n    const audioMedia = transformer.selectMedia('audio');\r\n\r\n    if (audioMedia) {\r\n        const desiredAudioDirection\r\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\r\n\r\n        if (audioMedia.direction !== desiredAudioDirection) {\r\n            audioMedia.direction = desiredAudioDirection;\r\n            logger.info(\r\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\r\n            modifiedDirection = true;\r\n        }\r\n    } else {\r\n        logger.warn('No \"audio\" media found int the local description');\r\n    }\r\n\r\n    const videoMedia = transformer.selectMedia('video');\r\n\r\n    if (videoMedia) {\r\n        const desiredVideoDirection\r\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\r\n\r\n        if (videoMedia.direction !== desiredVideoDirection) {\r\n            videoMedia.direction = desiredVideoDirection;\r\n            logger.info(\r\n                `Adjusted local video direction to ${desiredVideoDirection}`);\r\n            modifiedDirection = true;\r\n        }\r\n    } else {\r\n        logger.warn('No \"video\" media found in the local description');\r\n    }\r\n\r\n    if (modifiedDirection) {\r\n        return new RTCSessionDescription({\r\n            type: localDescription.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    return localDescription;\r\n};\r\n\r\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\r\n    let localSdp = description;\r\n\r\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\r\n\r\n    // Munge the order of the codecs based on the preferences set through config.js\r\n    localSdp = this._mungeCodecOrder(localSdp);\r\n\r\n    if (browser.usesPlanB()) {\r\n        localSdp = this._adjustLocalMediaDirection(localSdp);\r\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\r\n    } else {\r\n\r\n        // if we're using unified plan, transform to it first.\r\n        localSdp = this.interop.toUnifiedPlan(localSdp);\r\n        this.trace(\r\n            'setLocalDescription::postTransform (Unified Plan)',\r\n            dumpSDP(localSdp));\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.peerconnection.setLocalDescription(localSdp)\r\n            .then(() => {\r\n                this.trace('setLocalDescriptionOnSuccess');\r\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\r\n\r\n                if (localUfrag !== this.localUfrag) {\r\n                    this.localUfrag = localUfrag;\r\n                    this.eventEmitter.emit(\r\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\r\n                }\r\n                resolve();\r\n            }, err => {\r\n                this.trace('setLocalDescriptionOnFailure', err);\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\r\n                    err, this);\r\n                reject(err);\r\n            });\r\n    });\r\n};\r\n\r\n/**\r\n * Enables/disables audio media transmission on this peer connection. When\r\n * disabled the SDP audio media direction in the local SDP will be adjusted to\r\n * 'inactive' which means that no data will be sent nor accepted, but\r\n * the connection should be kept alive.\r\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\r\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\r\n * no effect.\r\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\r\n * needs to be executed in order for the changes to take effect or\r\n * <tt>false</tt> if the given value was the same as the previous one.\r\n * @public\r\n */\r\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\r\n    logger.debug(`${this} audio transfer active: ${active}`);\r\n    const changed = this.audioTransferActive !== active;\r\n\r\n    this.audioTransferActive = active;\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        this.tpcUtils.setAudioTransferActive(active);\r\n\r\n        // false means no renegotiation up the chain which is not needed in the Unified mode\r\n        return false;\r\n    }\r\n\r\n    return changed;\r\n};\r\n\r\n/**\r\n * Sets the degradation preference on the video sender. This setting determines if\r\n * resolution or framerate will be preferred when bandwidth or cpu is constrained.\r\n * Sets it to 'maintain-framerate' when a camera track is added to the pc, sets it\r\n * to 'maintain-resolution' when a desktop track is being shared instead.\r\n * @returns {Promise<void>}\r\n */\r\nTraceablePeerConnection.prototype.setSenderVideoDegradationPreference = function() {\r\n    if (!this.peerconnection.getSenders) {\r\n        logger.debug('Browser does not support RTCRtpSender');\r\n\r\n        return Promise.resolve();\r\n    }\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!parameters.encodings || !parameters.encodings.length) {\r\n        return Promise.resolve();\r\n    }\r\n    for (const encoding in parameters.encodings) {\r\n        if (parameters.encodings.hasOwnProperty(encoding)) {\r\n            const preference = localVideoTrack.videoType === VideoType.CAMERA\r\n                ? DEGRADATION_PREFERENCE_CAMERA\r\n                : DEGRADATION_PREFERENCE_DESKTOP;\r\n\r\n            logger.info(`Setting video sender degradation preference on ${this} to ${preference}`);\r\n            parameters.encodings[encoding].degradationPreference = preference;\r\n        }\r\n    }\r\n\r\n    return videoSender.setParameters(parameters);\r\n};\r\n\r\n/**\r\n * Sets the max bitrate on the RTCRtpSender so that the\r\n * bitrate of the enocder doesn't exceed the configured value.\r\n * This is needed for the desktop share until spec-complaint\r\n * simulcast is implemented.\r\n * @param {JitsiLocalTrack} localTrack - the local track whose\r\n * max bitrate is to be configured.\r\n * @returns {Promise<void>}\r\n */\r\nTraceablePeerConnection.prototype.setMaxBitRate = function() {\r\n    if (!this.peerconnection.getSenders) {\r\n        logger.debug('Browser doesn\\'t support RTCRtpSender');\r\n\r\n        return Promise.resolve();\r\n    }\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n\r\n    if (!localVideoTrack) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const videoType = localVideoTrack.videoType;\r\n    const planBScreenSharing = browser.usesPlanB() && videoType === VideoType.DESKTOP;\r\n\r\n    // Apply the maxbitrates on the video track when one of the conditions is met.\r\n    // 1. Max. bitrates for video are specified through videoQuality settings in config.js\r\n    // 2. Track is a desktop track and bitrate is capped using capScreenshareBitrate option in plan-b mode.\r\n    // 3. The client is running in Unified plan mode.\r\n    if (!((this.options.videoQuality && this.options.videoQuality.maxBitratesVideo)\r\n        || (planBScreenSharing && this.options.capScreenshareBitrate)\r\n        || browser.usesUnifiedPlan())) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const presenterEnabled = localVideoTrack._originalStream\r\n        && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\r\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!(parameters.encodings && parameters.encodings.length)) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (this.isSimulcastOn()) {\r\n        for (const encoding in parameters.encodings) {\r\n            if (parameters.encodings.hasOwnProperty(encoding)) {\r\n                let bitrate;\r\n\r\n                if (planBScreenSharing) {\r\n                    // On chromium, set a max bitrate of 500 Kbps for screenshare when capScreenshareBitrate\r\n                    // is enabled through config.js and presenter is not turned on.\r\n                    // FIXME the top 'isSimulcastOn' condition is confusing for screensharing, because\r\n                    // if capScreenshareBitrate option is enabled then the simulcast is turned off\r\n                    bitrate = this.options.capScreenshareBitrate\r\n                        ? presenterEnabled ? this.videoBitrates.high : DESKTOP_SHARE_RATE\r\n\r\n                        // Remove the bitrate config if not capScreenshareBitrate:\r\n                        // When switching from camera to desktop and videoQuality.maxBitratesVideo were set,\r\n                        // then the 'maxBitrate' setting must be cleared, because if simulcast is enabled for screen\r\n                        // and maxBitrates are set then Chrome will not send the screen stream (plan B).\r\n                        : undefined;\r\n                } else {\r\n                    bitrate = this.tpcUtils.localStreamEncodingsConfig[encoding].maxBitrate;\r\n                }\r\n\r\n                logger.info(`${this} Setting a max bitrate of ${bitrate} bps on layer `\r\n                    + `${this.tpcUtils.localStreamEncodingsConfig[encoding].rid}`);\r\n                parameters.encodings[encoding].maxBitrate = bitrate;\r\n            }\r\n        }\r\n    } else {\r\n        // Do not change the max bitrate for desktop tracks in non-simulcast mode.\r\n        let bitrate = this.videoBitrates.high;\r\n\r\n        if (videoType === VideoType.CAMERA) {\r\n            // Determine the bitrates based on the sender constraint applied for unicast tracks.\r\n            const scaleFactor = this.senderVideoMaxHeight\r\n                ? Math.floor(localVideoTrack.resolution / this.senderVideoMaxHeight)\r\n                : 1;\r\n            const encoding = this.tpcUtils.localStreamEncodingsConfig\r\n                .find(layer => layer.scaleResolutionDownBy === scaleFactor);\r\n\r\n            if (encoding) {\r\n                logger.info(`${this} Setting a max bitrate of ${encoding.maxBitrate} bps on local video track`);\r\n                bitrate = encoding.maxBitrate;\r\n            }\r\n        }\r\n        parameters.encodings[0].maxBitrate = bitrate;\r\n    }\r\n\r\n    return videoSender.setParameters(parameters);\r\n};\r\n\r\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\r\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\r\n\r\n    // Munge the order of the codecs based on the preferences set through config.js\r\n    // eslint-disable-next-line no-param-reassign\r\n    description = this._mungeCodecOrder(description);\r\n\r\n    if (browser.usesPlanB()) {\r\n        // TODO the focus should squeze or explode the remote simulcast\r\n        if (this.isSimulcastOn()) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.simulcast.mungeRemoteDescription(description, true /* add x-google-conference flag */);\r\n            this.trace(\r\n                'setRemoteDescription::postTransform (simulcast)',\r\n                dumpSDP(description));\r\n        }\r\n\r\n        // eslint-disable-next-line no-param-reassign\r\n        description = normalizePlanB(description);\r\n    } else {\r\n        const currentDescription = this.peerconnection.remoteDescription;\r\n\r\n        // eslint-disable-next-line no-param-reassign\r\n        description = this.interop.toUnifiedPlan(description, currentDescription);\r\n        this.trace(\r\n            'setRemoteDescription::postTransform (Unified)',\r\n            dumpSDP(description));\r\n\r\n        if (this.isSimulcastOn()) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.simulcast.mungeRemoteDescription(description);\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\r\n            this.trace(\r\n                'setRemoteDescription::postTransform (sim receive)',\r\n                dumpSDP(description));\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\r\n        }\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.peerconnection.setRemoteDescription(description)\r\n            .then(() => {\r\n                this.trace('setRemoteDescriptionOnSuccess');\r\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\r\n\r\n                if (remoteUfrag !== this.remoteUfrag) {\r\n                    this.remoteUfrag = remoteUfrag;\r\n                    this.eventEmitter.emit(\r\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\r\n                }\r\n                resolve();\r\n            }, err => {\r\n                this.trace('setRemoteDescriptionOnFailure', err);\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\r\n                    err,\r\n                    this);\r\n                reject(err);\r\n            });\r\n    });\r\n};\r\n\r\n/**\r\n * Changes the resolution of the video stream that is sent to the peer based on\r\n * the user preferred value. If simulcast is enabled on the peerconection, all the\r\n * simulcast encodings that have a resolution height lower or equal to the value\r\n * provided will remain active. For the non-simulcast case, video constraint is\r\n * applied on the track.\r\n * @param {number} frameHeight - The user preferred max frame height.\r\n * @returns {Promise} promise that will be resolved when the operation is\r\n * successful and rejected otherwise.\r\n */\r\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight = null) {\r\n    if (frameHeight < 0) {\r\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\r\n    }\r\n\r\n    // XXX: This is not yet supported on mobile.\r\n    if (browser.isReactNative()) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Need to explicitly check for null as 0 is falsy, but a valid value\r\n    const newHeight = frameHeight === null ? this.senderVideoMaxHeight : frameHeight;\r\n\r\n    this.senderVideoMaxHeight = newHeight;\r\n\r\n    // If layer suspension is disabled and sender constraint is not configured for the conference,\r\n    // resolve here so that the encodings stay enabled. This can happen in custom apps built using\r\n    // lib-jitsi-meet.\r\n    if (newHeight === null) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    logger.log(`${this} senderVideoMaxHeight: ${newHeight}`);\r\n\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n\r\n    if (!localVideoTrack || localVideoTrack.isMuted() || localVideoTrack.videoType !== VideoType.CAMERA) {\r\n        return Promise.resolve();\r\n    }\r\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!parameters || !parameters.encodings || !parameters.encodings.length) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (this.isSimulcastOn()) {\r\n        // Determine the encodings that need to stay enabled based on the new frameHeight provided.\r\n        const encodingsEnabledState = this.tpcUtils.getLocalStreamHeightConstraints(localVideoTrack.track)\r\n            .map(height => height <= newHeight);\r\n\r\n        // Always keep the LD stream enabled, specifically when the LD stream's resolution is higher than of the\r\n        // requested resolution. This can happen when camera is captured at resolutions higher than 720p but the\r\n        // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\r\n        // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\r\n        const ldStreamIndex = this.tpcUtils.localStreamEncodingsConfig\r\n            .findIndex(layer => layer.scaleResolutionDownBy === 4.0);\r\n\r\n        if (newHeight > 0 && ldStreamIndex !== -1) {\r\n            encodingsEnabledState[ldStreamIndex] = true;\r\n        }\r\n        for (const encoding in parameters.encodings) {\r\n            if (parameters.encodings.hasOwnProperty(encoding)) {\r\n                parameters.encodings[encoding].active = encodingsEnabledState[encoding];\r\n            }\r\n        }\r\n    } else if (newHeight > 0) {\r\n        parameters.encodings[0].scaleResolutionDownBy = localVideoTrack.resolution >= newHeight\r\n            ? Math.floor(localVideoTrack.resolution / newHeight)\r\n            : 1;\r\n        parameters.encodings[0].active = true;\r\n    } else {\r\n        parameters.encodings[0].scaleResolutionDownBy = undefined;\r\n        parameters.encodings[0].active = false;\r\n    }\r\n\r\n    logger.info(`${this} setting max height of ${newHeight}, encodings: ${JSON.stringify(parameters.encodings)}`);\r\n\r\n    return videoSender.setParameters(parameters).then(() => {\r\n        localVideoTrack.maxEnabledResolution = newHeight;\r\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\r\n\r\n        // Max bitrate needs to be reconfigured on the sender in p2p/non-simulcast case if needed when\r\n        // the send resolution changes.\r\n        if (this.isP2P || !this.isSimulcastOn()) {\r\n            return this.setMaxBitRate();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Enables/disables video media transmission on this peer connection. When\r\n * disabled the SDP video media direction in the local SDP will be adjusted to\r\n * 'inactive' which means that no data will be sent nor accepted, but\r\n * the connection should be kept alive.\r\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\r\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\r\n * no effect.\r\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\r\n * needs to be executed in order for the changes to take effect or\r\n * <tt>false</tt> if the given value was the same as the previous one.\r\n * @public\r\n */\r\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\r\n    logger.debug(`${this} video transfer active: ${active}`);\r\n    const changed = this.videoTransferActive !== active;\r\n\r\n    this.videoTransferActive = active;\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        this.tpcUtils.setVideoTransferActive(active);\r\n\r\n        // false means no renegotiation up the chain which is not needed in the Unified mode\r\n        return false;\r\n    }\r\n\r\n    return changed;\r\n};\r\n\r\n/**\r\n * Sends DTMF tones if possible.\r\n *\r\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\r\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\r\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\r\n *\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\r\n    if (!this._dtmfSender) {\r\n        if (this.peerconnection.getSenders) {\r\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\r\n\r\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\r\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\r\n        }\r\n\r\n        if (!this._dtmfSender) {\r\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\r\n\r\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\r\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\r\n            }\r\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\r\n        }\r\n\r\n        if (this._dtmfSender) {\r\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\r\n        }\r\n    }\r\n\r\n    if (this._dtmfSender) {\r\n        if (this._dtmfSender.toneBuffer) {\r\n            this._dtmfTonesQueue.push({\r\n                tones,\r\n                duration,\r\n                interToneGap\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\r\n    } else {\r\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\r\n    }\r\n};\r\n\r\n/**\r\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\r\n * a single tone.\r\n *\r\n * @param {Object} event - The tonechange event which indicates what characters\r\n * are left to be played for the current tone.\r\n * @private\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype._onToneChange = function(event) {\r\n    // An empty event.tone indicates the current tones have finished playing.\r\n    // Automatically start playing any queued tones on finish.\r\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\r\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\r\n\r\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\r\n    }\r\n};\r\n\r\n/**\r\n * Makes the underlying TraceablePeerConnection generate new SSRC for\r\n * the recvonly video stream.\r\n */\r\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\r\n    const newSSRC = SDPUtil.generateSsrc();\r\n\r\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\r\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\r\n};\r\n\r\n/**\r\n * Makes the underlying TraceablePeerConnection forget the current primary video\r\n * SSRC.\r\n */\r\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\r\n    logger.info('Clearing primary video SSRC!');\r\n    this.sdpConsistency.clearVideoSsrcCache();\r\n};\r\n\r\n/**\r\n * Closes underlying WebRTC PeerConnection instance and removes all remote\r\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\r\n * them.\r\n */\r\nTraceablePeerConnection.prototype.close = function() {\r\n    this.trace('stop');\r\n\r\n    // Off SignalingEvents\r\n    this.signalingLayer.off(\r\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\r\n    this.signalingLayer.off(\r\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\r\n\r\n    for (const peerTracks of this.remoteTracks.values()) {\r\n        for (const remoteTrack of peerTracks.values()) {\r\n            this._removeRemoteTrack(remoteTrack);\r\n        }\r\n    }\r\n    this.remoteTracks.clear();\r\n\r\n    this._addedStreams = [];\r\n\r\n    this._dtmfSender = null;\r\n    this._dtmfTonesQueue = [];\r\n\r\n    if (!this.rtc._removePeerConnection(this)) {\r\n        logger.error('RTC._removePeerConnection returned false');\r\n    }\r\n    if (this.statsinterval !== null) {\r\n        window.clearInterval(this.statsinterval);\r\n        this.statsinterval = null;\r\n    }\r\n    logger.info(`Closing ${this}...`);\r\n    this.peerconnection.close();\r\n};\r\n\r\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\r\n    return this._createOfferOrAnswer(false /* answer */, constraints);\r\n};\r\n\r\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\r\n    return this._createOfferOrAnswer(true /* offer */, constraints);\r\n};\r\n\r\n/**\r\n * Checks if a camera track has been added to the peerconnection\r\n * @param {TraceablePeerConnection} peerConnection\r\n * @return {boolean} <tt>true</tt> if the peerconnection has\r\n * a camera track for its video source <tt>false</tt> otherwise.\r\n */\r\nfunction hasCameraTrack(peerConnection) {\r\n    return peerConnection.getLocalTracks()\r\n        .some(t => t.videoType === 'camera');\r\n}\r\n\r\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\r\n        isOffer,\r\n        constraints) {\r\n    const logName = isOffer ? 'Offer' : 'Answer';\r\n\r\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\r\n\r\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\r\n        try {\r\n            this.trace(\r\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\r\n\r\n            if (browser.usesPlanB()) {\r\n                // If there are no local video tracks, then a \"recvonly\"\r\n                // SSRC needs to be generated\r\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\r\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\r\n                    this.generateRecvonlySsrc();\r\n                }\r\n\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = new RTCSessionDescription({\r\n                    type: resultSdp.type,\r\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\r\n                        resultSdp.sdp)\r\n                });\r\n\r\n                this.trace(\r\n                    `create${logName}OnSuccess::postTransform `\r\n                         + '(make primary audio/video ssrcs consistent)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            // configure simulcast for camera tracks always and for\r\n            // desktop tracks only when the testing flag for maxbitrates\r\n            // in config.js is disabled.\r\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\r\n                && (!this.options.capScreenshareBitrate\r\n                || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\r\n                this.trace(\r\n                    `create${logName}`\r\n                        + 'OnSuccess::postTransform (simulcast)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = new RTCSessionDescription({\r\n                    type: resultSdp.type,\r\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\r\n                });\r\n\r\n                this.trace(\r\n                    `create${logName}`\r\n                         + 'OnSuccess::postTransform (rtx modifier)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            const ssrcMap = extractSSRCMap(resultSdp);\r\n\r\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\r\n            this._processLocalSSRCsMap(ssrcMap);\r\n\r\n            resolveFn(resultSdp);\r\n        } catch (e) {\r\n            this.trace(`create${logName}OnError`, e);\r\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\r\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\r\n\r\n            rejectFn(e);\r\n        }\r\n    };\r\n\r\n    const handleFailure = (err, rejectFn) => {\r\n        this.trace(`create${logName}OnFailure`, err);\r\n        const eventType\r\n            = isOffer\r\n                ? RTCEvents.CREATE_OFFER_FAILED\r\n                : RTCEvents.CREATE_ANSWER_FAILED;\r\n\r\n        this.eventEmitter.emit(eventType, err, this);\r\n\r\n        rejectFn(err);\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let oaPromise;\r\n\r\n        if (isOffer) {\r\n            oaPromise = this.peerconnection.createOffer(constraints);\r\n        } else {\r\n            oaPromise = this.peerconnection.createAnswer(constraints);\r\n        }\r\n\r\n        oaPromise\r\n            .then(\r\n                sdp => handleSuccess(sdp, resolve, reject),\r\n                error => handleFailure(error, reject));\r\n    });\r\n};\r\n\r\n/**\r\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\r\n * @param {TrackSSRCInfo} ssrcObj\r\n * @return {number|null} the primary SSRC or <tt>null</tt>\r\n */\r\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\r\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\r\n        return ssrcObj.groups[0].ssrcs[0];\r\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\r\n        return ssrcObj.ssrcs[0];\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Goes over the SSRC map extracted from the latest local description and tries\r\n * to match them with the local tracks (by MSID). Will update the values\r\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\r\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\r\n    for (const track of this.localTracks.values()) {\r\n        const trackMSID = track.storedMSID;\r\n\r\n        if (ssrcMap.has(trackMSID)) {\r\n            const newSSRC = ssrcMap.get(trackMSID);\r\n\r\n            if (!newSSRC) {\r\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\r\n\r\n                return;\r\n            }\r\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\r\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\r\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\r\n\r\n            // eslint-disable-next-line no-negated-condition\r\n            if (newSSRCNum !== oldSSRCNum) {\r\n                if (oldSSRCNum === null) {\r\n                    logger.info(\r\n                        `Storing new local SSRC for ${track} in ${this}`,\r\n                        newSSRC);\r\n                } else {\r\n                    logger.error(\r\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\r\n                        } with: `, newSSRC);\r\n                }\r\n                this.localSSRCs.set(track.rtcId, newSSRC);\r\n\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\r\n            } else {\r\n                logger.debug(\r\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\r\n                     + `is still up to date in ${this}`);\r\n            }\r\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\r\n            // It is normal to find no SSRCs for a muted video track in\r\n            // the local SDP as the recv-only SSRC is no longer munged in.\r\n            // So log the warning only if it's not a muted video track.\r\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\r\n        }\r\n    }\r\n};\r\n\r\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\r\n    this.trace('addIceCandidate', JSON.stringify({\r\n        candidate: candidate.candidate,\r\n        sdpMid: candidate.sdpMid,\r\n        sdpMLineIndex: candidate.sdpMLineIndex,\r\n        usernameFragment: candidate.usernameFragment\r\n    }, null, ' '));\r\n\r\n    return this.peerconnection.addIceCandidate(candidate);\r\n};\r\n\r\n/**\r\n * Obtains call-related stats from the peer connection.\r\n *\r\n * @param {Function} callback - The function to invoke after successfully\r\n * obtaining stats.\r\n * @param {Function} errback - The function to invoke after failing to obtain\r\n * stats.\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\r\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\r\n    // accounting for different getStats apis, making the browser-checking-if\r\n    // unnecessary.\r\n    if (browser.isSafari() || browser.isFirefox() || browser.isReactNative()) {\r\n        // uses the new Promise based getStats\r\n        this.peerconnection.getStats()\r\n            .then(callback)\r\n            .catch(errback || (() => {\r\n\r\n                // Making sure that getStats won't fail if error callback is\r\n                // not passed.\r\n            }));\r\n    } else {\r\n        this.peerconnection.getStats(callback);\r\n    }\r\n};\r\n\r\n/**\r\n * Generates and stores new SSRC info object for given local track.\r\n * The method should be called only for a video track being added to this TPC\r\n * in the muted state (given that the current browser uses this strategy).\r\n * @param {JitsiLocalTrack} track\r\n * @return {TPCSSRCInfo}\r\n */\r\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\r\n    const rtcId = track.rtcId;\r\n    let ssrcInfo = this._getSSRC(rtcId);\r\n\r\n    if (ssrcInfo) {\r\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\r\n    }\r\n\r\n    // configure simulcast for camera tracks always and for\r\n    // desktop tracks only when the testing flag for maxbitrates\r\n    // in config.js is disabled.\r\n    if (this.isSimulcastOn()\r\n        && (!this.options.capScreenshareBitrate\r\n        || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\r\n        ssrcInfo = {\r\n            ssrcs: [],\r\n            groups: []\r\n        };\r\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\r\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\r\n        }\r\n        ssrcInfo.groups.push({\r\n            ssrcs: ssrcInfo.ssrcs.slice(),\r\n            semantics: 'SIM'\r\n        });\r\n    } else {\r\n        ssrcInfo = {\r\n            ssrcs: [ SDPUtil.generateSsrc() ],\r\n            groups: []\r\n        };\r\n    }\r\n    if (!this.options.disableRtx) {\r\n        // Specifically use a for loop here because we'll\r\n        //  be adding to the list we're iterating over, so we\r\n        //  only want to iterate through the items originally\r\n        //  on the list\r\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\r\n\r\n        for (let i = 0; i < currNumSsrcs; ++i) {\r\n            const primarySsrc = ssrcInfo.ssrcs[i];\r\n            const rtxSsrc = SDPUtil.generateSsrc();\r\n\r\n            ssrcInfo.ssrcs.push(rtxSsrc);\r\n            ssrcInfo.groups.push({\r\n                ssrcs: [ primarySsrc, rtxSsrc ],\r\n                semantics: 'FID'\r\n            });\r\n        }\r\n    }\r\n    ssrcInfo.msid = track.storedMSID;\r\n    this.localSSRCs.set(rtcId, ssrcInfo);\r\n\r\n    return ssrcInfo;\r\n};\r\n\r\n/**\r\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\r\n * instance.\r\n * @return {string}\r\n */\r\nTraceablePeerConnection.prototype.toString = function() {\r\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\r\n};\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport SDPUtil from './SDPUtil';\r\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Begin helper functions\r\n */\r\n/**\r\n * Updates or inserts the appropriate rtx information for primarySsrc with\r\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\r\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\r\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\r\n * @param {MLineWrap} mLine\r\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\r\n *  primary ssrc\r\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\r\n */\r\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\r\n    logger.debug(\r\n        `Updating mline to associate ${rtxSsrc}`\r\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\r\n    const primarySsrc = primarySsrcInfo.id;\r\n    const primarySsrcMsid = primarySsrcInfo.msid;\r\n    const primarySsrcCname = primarySsrcInfo.cname;\r\n\r\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\r\n\r\n    if (previousRtxSSRC === rtxSsrc) {\r\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\r\n\r\n        return;\r\n    }\r\n    if (previousRtxSSRC) {\r\n        logger.debug(\r\n            `${primarySsrc} was previously associated with rtx`\r\n            + `${previousRtxSSRC}, removing all references to it`);\r\n\r\n        // Stream already had an rtx ssrc that is different than the one given,\r\n        //  remove all trace of the old one\r\n        mLine.removeSSRC(previousRtxSSRC);\r\n\r\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\r\n        logger.debug(mLine.dumpSSRCGroups());\r\n\r\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\r\n    }\r\n    mLine.addSSRCAttribute({\r\n        id: rtxSsrc,\r\n        attribute: 'cname',\r\n        value: primarySsrcCname\r\n    });\r\n    mLine.addSSRCAttribute({\r\n        id: rtxSsrc,\r\n        attribute: 'msid',\r\n        value: primarySsrcMsid\r\n    });\r\n    mLine.addSSRCGroup({\r\n        semantics: 'FID',\r\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\r\n    });\r\n}\r\n\r\n/**\r\n * End helper functions\r\n */\r\n\r\n/**\r\n * Adds any missing RTX streams for video streams\r\n *  and makes sure that they remain consistent\r\n */\r\nexport default class RtxModifier {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Map of video ssrc to corresponding RTX\r\n         *  ssrc\r\n         */\r\n        this.correspondingRtxSsrcs = new Map();\r\n    }\r\n\r\n    /**\r\n     * Clear the cached map of primary video ssrcs to\r\n     *  their corresponding rtx ssrcs so that they will\r\n     *  not be used for the next call to modifyRtxSsrcs\r\n     */\r\n    clearSsrcCache() {\r\n        this.correspondingRtxSsrcs.clear();\r\n    }\r\n\r\n    /**\r\n     * Explicitly set the primary video ssrc -> rtx ssrc\r\n     *  mapping to be used in modifyRtxSsrcs\r\n     * @param {Map} ssrcMapping a mapping of primary video\r\n     *  ssrcs to their corresponding rtx ssrcs\r\n     */\r\n    setSsrcCache(ssrcMapping) {\r\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\r\n        this.correspondingRtxSsrcs = ssrcMapping;\r\n    }\r\n\r\n    /**\r\n     * Adds RTX ssrcs for any video ssrcs that don't\r\n     *  already have them.  If the video ssrc has been\r\n     *  seen before, and already had an RTX ssrc generated,\r\n     *  the same RTX ssrc will be used again.\r\n     * @param {string} sdpStr sdp in raw string format\r\n     */\r\n    modifyRtxSsrcs(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n\r\n        return this.modifyRtxSsrcs2(videoMLine)\r\n            ? sdpTransformer.toRawSDP() : sdpStr;\r\n    }\r\n\r\n    /**\r\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\r\n     *  {@link MLineWrap} instance wrapping video media as an argument.\r\n     * @param {MLineWrap} videoMLine\r\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\r\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\r\n     */\r\n    modifyRtxSsrcs2(videoMLine) {\r\n        if (videoMLine.direction === 'recvonly') {\r\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\r\n\r\n            return false;\r\n        }\r\n        if (videoMLine.getSSRCCount() < 1) {\r\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\r\n\r\n            return false;\r\n        }\r\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\r\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\r\n\r\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\r\n            ' making sure all have rtx streams');\r\n        for (const ssrc of primaryVideoSsrcs) {\r\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\r\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\r\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\r\n\r\n            if (correspondingRtxSsrc) {\r\n                logger.debug(\r\n                    'Already have an associated rtx ssrc for'\r\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\r\n            } else {\r\n                logger.debug(\r\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\r\n\r\n                // If there's one in the sdp already for it, we'll just set\r\n                //  that as the corresponding one\r\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\r\n\r\n                if (previousAssociatedRtxStream) {\r\n                    logger.debug(\r\n                        `Rtx stream ${previousAssociatedRtxStream} `\r\n                        + 'already existed in the sdp as an rtx stream for '\r\n                        + `${ssrc}`);\r\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\r\n                } else {\r\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\r\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\r\n                                 + `for ssrc ${ssrc}`);\r\n                }\r\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\r\n                             + `for video ssrc ${ssrc}`);\r\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\r\n            }\r\n            updateAssociatedRtxStream(\r\n                videoMLine,\r\n                {\r\n                    id: ssrc,\r\n                    cname,\r\n                    msid\r\n                },\r\n                correspondingRtxSsrc);\r\n        }\r\n\r\n        // FIXME we're not looking into much details whether the SDP has been\r\n        // modified or not once the precondition requirements are met.\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Strip all rtx streams from the given sdp\r\n     * @param {string} sdpStr sdp in raw string format\r\n     * @returns {string} sdp string with all rtx streams stripped\r\n     */\r\n    stripRtx(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n        if (videoMLine.direction === 'recvonly') {\r\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\r\n\r\n            return sdpStr;\r\n        }\r\n        if (videoMLine.getSSRCCount() < 1) {\r\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\r\n\r\n            return sdpStr;\r\n        }\r\n        if (!videoMLine.containsAnySSRCGroups()) {\r\n            logger.debug('RtxModifier doing nothing, '\r\n              + 'no video ssrcGroups present');\r\n\r\n            return sdpStr;\r\n        }\r\n        const fidGroups = videoMLine.findGroups('FID');\r\n\r\n        // Remove the fid groups from the mline\r\n\r\n        videoMLine.removeGroupsBySemantics('FID');\r\n\r\n        // Get the rtx ssrcs and remove them from the mline\r\n        for (const fidGroup of fidGroups) {\r\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\r\n\r\n            videoMLine.removeSSRC(rtxSsrc);\r\n        }\r\n\r\n        return sdpTransformer.toRawSDP();\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    parsePrimarySSRC,\r\n    parseSecondarySSRC,\r\n    SdpTransformWrap\r\n} from './SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Handles the work of keeping video ssrcs consistent across multiple\r\n * o/a cycles, making it such that all stream operations can be\r\n * kept local and do not need to be signaled.\r\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\r\n * the primary video stream\r\n */\r\nexport default class SdpConsistency {\r\n    /**\r\n     * Constructor\r\n     * @param {string} logPrefix the log prefix appended to every logged\r\n     * message, currently used to distinguish for which\r\n     * <tt>TraceablePeerConnection</tt> the instance works.\r\n     */\r\n    constructor(logPrefix) {\r\n        this.clearVideoSsrcCache();\r\n        this.logPrefix = logPrefix;\r\n    }\r\n\r\n    /**\r\n     * Clear the cached video primary and primary rtx ssrcs so that\r\n     *  they will not be used for the next call to\r\n     *  makeVideoPrimarySsrcsConsistent\r\n     */\r\n    clearVideoSsrcCache() {\r\n        this.cachedPrimarySsrc = null;\r\n        this.injectRecvOnly = false;\r\n    }\r\n\r\n    /**\r\n     * Explicitly set the primary ssrc to be used in\r\n     *  makeVideoPrimarySsrcsConsistent\r\n     * @param {number} primarySsrc the primarySsrc to be used\r\n     *  in future calls to makeVideoPrimarySsrcsConsistent\r\n     * @throws Error if <tt>primarySsrc</tt> is not a number\r\n     */\r\n    setPrimarySsrc(primarySsrc) {\r\n        if (typeof primarySsrc !== 'number') {\r\n            throw new Error('Primary SSRC must be a number!');\r\n        }\r\n        this.cachedPrimarySsrc = primarySsrc;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not there is a primary video SSRC cached already.\r\n     * @return {boolean}\r\n     */\r\n    hasPrimarySsrcCached() {\r\n        return Boolean(this.cachedPrimarySsrc);\r\n    }\r\n\r\n    /**\r\n     * Given an sdp string, either:\r\n     *  1) record the primary video and primary rtx ssrcs to be\r\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\r\n     *  2) change the primary and primary rtx ssrcs in the given sdp\r\n     *   to match the ones previously cached\r\n     * @param {string} sdpStr the sdp string to (potentially)\r\n     *  change to make the video ssrcs consistent\r\n     * @returns {string} a (potentially) modified sdp string\r\n     *  with ssrcs consistent with this class' cache\r\n     */\r\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(\r\n                `${this.logPrefix} no 'video' media found in the sdp: `\r\n                    + `${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n\r\n        if (videoMLine.direction === 'recvonly') {\r\n            // If the mline is recvonly, we'll add the primary\r\n            //  ssrc as a recvonly ssrc\r\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\r\n                videoMLine.addSSRCAttribute({\r\n                    id: this.cachedPrimarySsrc,\r\n                    attribute: 'cname',\r\n                    value: `recvonly-${this.cachedPrimarySsrc}`\r\n                });\r\n            } else {\r\n                logger.info(\r\n                    `${this.logPrefix} no SSRC found for the recvonly video`\r\n                        + 'stream!');\r\n            }\r\n        } else {\r\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\r\n\r\n            if (!newPrimarySsrc) {\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency couldn't`\r\n                        + ' parse new primary ssrc');\r\n\r\n                return sdpStr;\r\n            }\r\n            if (this.cachedPrimarySsrc) {\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\r\n                        + `${newPrimarySsrc} with cached `\r\n                        + `${this.cachedPrimarySsrc}`);\r\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\r\n                for (const group of videoMLine.ssrcGroups) {\r\n                    if (group.semantics === 'FID') {\r\n                        const primarySsrc = parsePrimarySSRC(group);\r\n                        const rtxSsrc = parseSecondarySSRC(group);\r\n\r\n                        // eslint-disable-next-line max-depth\r\n                        if (primarySsrc === newPrimarySsrc) {\r\n                            group.ssrcs\r\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                this.cachedPrimarySsrc = newPrimarySsrc;\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\r\n                        + `${this.cachedPrimarySsrc}`);\r\n            }\r\n\r\n            this.injectRecvOnly = true;\r\n        }\r\n\r\n        return sdpTransformer.toRawSDP();\r\n    }\r\n}\r\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nimport JitsiTrack from './JitsiTrack';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\nconst RTCEvents = require('../../service/RTC/RTCEvents');\r\n\r\nlet ttfmTrackerAudioAttached = false;\r\nlet ttfmTrackerVideoAttached = false;\r\n\r\n/**\r\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\r\n * container for every event in the list.\r\n */\r\nconst containerEvents = [\r\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\r\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\r\n];\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Represents a single media track (either audio or video).\r\n */\r\nexport default class JitsiRemoteTrack extends JitsiTrack {\r\n    /**\r\n     * Creates new JitsiRemoteTrack instance.\r\n     * @param {RTC} rtc the RTC service instance.\r\n     * @param {JitsiConference} conference the conference to which this track\r\n     *        belongs to\r\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\r\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\r\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\r\n     *        the new JitsiRemoteTrack\r\n     * @param {MediaType} mediaType the type of the media\r\n     * @param {VideoType} videoType the type of the video if applicable\r\n     * @param {number} ssrc the SSRC number of the Media Stream\r\n     * @param {boolean} muted the initial muted state\r\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\r\n     * P2P session\r\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\r\n     * @constructor\r\n     */\r\n    constructor(\r\n            rtc,\r\n            conference,\r\n            ownerEndpointId,\r\n            stream,\r\n            track,\r\n            mediaType,\r\n            videoType,\r\n            ssrc,\r\n            muted,\r\n            isP2P) {\r\n        super(\r\n            conference,\r\n            stream,\r\n            track,\r\n            () => {\r\n                // Nothing to do if the track is inactive.\r\n            },\r\n            mediaType,\r\n            videoType);\r\n        this.rtc = rtc;\r\n\r\n        // Prevent from mixing up type of SSRC which should be a number\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\r\n        }\r\n        this.ssrc = ssrc;\r\n        this.ownerEndpointId = ownerEndpointId;\r\n        this.muted = muted;\r\n        this.isP2P = isP2P;\r\n\r\n        logger.debug(`New remote track added: ${this}`);\r\n\r\n        // we want to mark whether the track has been ever muted\r\n        // to detect ttfm events for startmuted conferences, as it can\r\n        // significantly increase ttfm values\r\n        this.hasBeenMuted = muted;\r\n\r\n        // Bind 'onmute' and 'onunmute' event handlers\r\n        if (this.rtc && this.track) {\r\n            this._bindTrackHandlers();\r\n        }\r\n        this._containerHandlers = {};\r\n        containerEvents.forEach(event => {\r\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n    /**\r\n     * Attaches the track handlers.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _bindTrackHandlers() {\r\n        this.track.addEventListener('mute', () => this._onTrackMute());\r\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\r\n        this.track.addEventListener('ended', () => {\r\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the track is muted. Emits an event notifying\r\n     * listeners of the mute event.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTrackMute() {\r\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\r\n\r\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the track is unmuted. Emits an event notifying\r\n     * listeners of the mute event.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTrackUnmute() {\r\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\r\n\r\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\r\n    }\r\n\r\n    /**\r\n     * Sets current muted status and fires an events for the change.\r\n     * @param value the muted status.\r\n     */\r\n    setMute(value) {\r\n        if (this.muted === value) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this.hasBeenMuted = true;\r\n        }\r\n\r\n        // we can have a fake video stream\r\n        if (this.stream) {\r\n            this.stream.muted = value;\r\n        }\r\n\r\n        this.muted = value;\r\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\r\n    }\r\n\r\n    /**\r\n     * Returns the current muted status of the track.\r\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\r\n     * muted and <tt>false</tt> otherwise.\r\n     */\r\n    isMuted() {\r\n        return this.muted;\r\n    }\r\n\r\n    /**\r\n     * Returns the participant id which owns the track.\r\n     *\r\n     * @returns {string} the id of the participants. It corresponds to the\r\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\r\n     */\r\n    getParticipantId() {\r\n        return this.ownerEndpointId;\r\n    }\r\n\r\n    /**\r\n     * Return false;\r\n     */\r\n    isLocal() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the synchronization source identifier (SSRC) of this remote\r\n     * track.\r\n     *\r\n     * @returns {number} the SSRC of this remote track.\r\n     */\r\n    getSSRC() {\r\n        return this.ssrc;\r\n    }\r\n\r\n    /**\r\n     * Changes the video type of the track.\r\n     *\r\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\r\n     */\r\n    _setVideoType(type) {\r\n        if (this.videoType === type) {\r\n            return;\r\n        }\r\n        this.videoType = type;\r\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\r\n    }\r\n\r\n    /**\r\n     * Handles track play events.\r\n     */\r\n    _playCallback() {\r\n        const type = this.isVideoTrack() ? 'video' : 'audio';\r\n\r\n        const now = window.performance.now();\r\n\r\n        console.log(`(TIME) Render ${type}:\\t`, now);\r\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\r\n\r\n        // The conference can be started without calling GUM\r\n        // FIXME if there would be a module for connection times this kind\r\n        // of logic (gumDuration or ttfm) should end up there\r\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\r\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\r\n        const gumDuration\r\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\r\n\r\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\r\n        // waits until there are 2 participants to start Jingle sessions.\r\n        const ttfm = now\r\n            - (this.conference.getConnectionTimes()['session.initiate']\r\n                - this.conference.getConnectionTimes()['muc.joined'])\r\n            - gumDuration;\r\n\r\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\r\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\r\n\r\n        Statistics.sendAnalytics(createTtfmEvent(\r\n            {\r\n                'media_type': type,\r\n                muted: this.hasBeenMuted,\r\n                value: ttfm\r\n            }));\r\n\r\n    }\r\n\r\n    /**\r\n     * Attach time to first media tracker only if there is conference and only\r\n     * for the first element.\r\n     * @param container the HTML container which can be 'video' or 'audio'\r\n     * element.\r\n     * @private\r\n     */\r\n    _attachTTFMTracker(container) {\r\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\r\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\r\n            return;\r\n        }\r\n\r\n        if (this.isAudioTrack()) {\r\n            ttfmTrackerAudioAttached = true;\r\n        }\r\n        if (this.isVideoTrack()) {\r\n            ttfmTrackerVideoAttached = true;\r\n        }\r\n\r\n        container.addEventListener('canplay', this._playCallback.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been attached to a new container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackAttach(container) {\r\n        logger.debug(`Track has been attached to a container: ${this}`);\r\n\r\n        containerEvents.forEach(event => {\r\n            container.addEventListener(event, this._containerHandlers[event]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been detached from a container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackDetach(container) {\r\n        logger.debug(`Track has been detached from a container: ${this}`);\r\n\r\n        containerEvents.forEach(event => {\r\n            container.removeEventListener(event, this._containerHandlers[event]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * An event handler for events triggered by the attached container.\r\n     *\r\n     * @param {string} type - The type of the event.\r\n     */\r\n    _containerEventHandler(type) {\r\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\r\n    }\r\n\r\n    /**\r\n     * Returns a string with a description of the current status of the track.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    _getStatus() {\r\n        const { enabled, muted, readyState } = this.track;\r\n\r\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\r\n    }\r\n\r\n    /**\r\n     * Creates a text representation of this remote track instance.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\r\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\r\n * description getter. Modifies the SDP, so that it will contain muted local\r\n * video tracks description, even though their underlying {MediaStreamTrack}s\r\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\r\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\r\n * side.\r\n */\r\nexport default class LocalSdpMunger {\r\n\r\n    /**\r\n     * Creates new <tt>LocalSdpMunger</tt> instance.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc\r\n     */\r\n    constructor(tpc) {\r\n        this.tpc = tpc;\r\n    }\r\n\r\n    /**\r\n     * Makes sure that muted local video tracks associated with the parent\r\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\r\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\r\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\r\n     * removed from the peerconnection).\r\n     *\r\n     * NOTE 1 video track is assumed\r\n     *\r\n     * @param {SdpTransformWrap} transformer the transformer instance which will\r\n     * be used to process the SDP.\r\n     * @return {boolean} <tt>true</tt> if there were any modifications to\r\n     * the SDP wrapped by <tt>transformer</tt>.\r\n     * @private\r\n     */\r\n    _addMutedLocalVideoTracksToSDP(transformer) {\r\n        // Go over each video tracks and check if the SDP has to be changed\r\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\r\n\r\n        if (!localVideos.length) {\r\n            return false;\r\n        } else if (localVideos.length !== 1) {\r\n            logger.error(\r\n                `${this.tpc} there is more than 1 video track ! `\r\n                    + 'Strange things may happen !', localVideos);\r\n        }\r\n\r\n        const videoMLine = transformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(\r\n                `${this.tpc} unable to hack local video track SDP`\r\n                    + '- no \"video\" media');\r\n\r\n            return false;\r\n        }\r\n\r\n        let modified = false;\r\n\r\n        for (const videoTrack of localVideos) {\r\n            const muted = videoTrack.isMuted();\r\n            const mediaStream = videoTrack.getOriginalStream();\r\n\r\n            // During the mute/unmute operation there are periods of time when\r\n            // the track's underlying MediaStream is not added yet to\r\n            // the PeerConnection. The SDP needs to be munged in such case.\r\n            const isInPeerConnection\r\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\r\n            const shouldFakeSdp = muted || !isInPeerConnection;\r\n\r\n            logger.debug(\r\n                `${this.tpc} ${videoTrack} muted: ${\r\n                    muted}, is in PeerConnection: ${\r\n                    isInPeerConnection} => should fake sdp ? : ${\r\n                    shouldFakeSdp}`);\r\n\r\n            if (!shouldFakeSdp) {\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            // Inject removed SSRCs\r\n            const requiredSSRCs\r\n                = this.tpc.isSimulcastOn()\r\n                    ? this.tpc.simulcast.ssrcCache\r\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\r\n\r\n            if (!requiredSSRCs.length) {\r\n                logger.error(\r\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\r\n\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            modified = true;\r\n\r\n            // We need to fake sendrecv.\r\n            // NOTE the SDP produced here goes only to Jicofo and is never set\r\n            // as localDescription. That's why\r\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\r\n            videoMLine.direction = 'sendrecv';\r\n\r\n            // Check if the recvonly has MSID\r\n            const primarySSRC = requiredSSRCs[0];\r\n\r\n            // FIXME The cname could come from the stream, but may turn out to\r\n            // be too complex. It is fine to come up with any value, as long as\r\n            // we only care about the actual SSRC values when deciding whether\r\n            // or not an update should be sent.\r\n            const primaryCname = `injected-${primarySSRC}`;\r\n\r\n            for (const ssrcNum of requiredSSRCs) {\r\n                // Remove old attributes\r\n                videoMLine.removeSSRC(ssrcNum);\r\n\r\n                // Inject\r\n                logger.debug(\r\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\r\n                        videoTrack}`);\r\n                videoMLine.addSSRCAttribute({\r\n                    id: ssrcNum,\r\n                    attribute: 'cname',\r\n                    value: primaryCname\r\n                });\r\n                videoMLine.addSSRCAttribute({\r\n                    id: ssrcNum,\r\n                    attribute: 'msid',\r\n                    value: videoTrack.storedMSID\r\n                });\r\n            }\r\n            if (requiredSSRCs.length > 1) {\r\n                const group = {\r\n                    ssrcs: requiredSSRCs.join(' '),\r\n                    semantics: 'SIM'\r\n                };\r\n\r\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\r\n                    // Inject the group\r\n                    logger.debug(\r\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\r\n                        group);\r\n                    videoMLine.addSSRCGroup(group);\r\n                }\r\n            }\r\n\r\n            // Insert RTX\r\n            // FIXME in P2P RTX is used by Chrome regardless of config option\r\n            // status. Because of that 'source-remove'/'source-add'\r\n            // notifications are still sent to remove/add RTX SSRC and FID group\r\n            if (!this.tpc.options.disableRtx) {\r\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\r\n            }\r\n        }\r\n\r\n        return modified;\r\n    }\r\n\r\n    /**\r\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\r\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\r\n     * sign.\r\n     *\r\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\r\n     * session description which will be modified in place.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _transformMediaIdentifiers(mediaSection) {\r\n        const pcId = this.tpc.id;\r\n\r\n        for (const ssrcLine of mediaSection.ssrcs) {\r\n            switch (ssrcLine.attribute) {\r\n            case 'cname':\r\n            case 'label':\r\n            case 'mslabel':\r\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\r\n                break;\r\n            case 'msid': {\r\n                if (ssrcLine.value) {\r\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\r\n\r\n                    if (streamAndTrackIDs.length === 2) {\r\n                        const streamId = streamAndTrackIDs[0];\r\n                        const trackId = streamAndTrackIDs[1];\r\n\r\n                        ssrcLine.value\r\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\r\n                    } else {\r\n                        logger.warn(\r\n                            'Unable to munge local MSID'\r\n                                + `- weird format detected: ${ssrcLine.value}`);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Maybe modifies local description to fake local video tracks SDP when\r\n     * those are muted.\r\n     *\r\n     * @param {object} desc the WebRTC SDP object instance for the local\r\n     * description.\r\n     * @returns {RTCSessionDescription}\r\n     */\r\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\r\n        if (!desc) {\r\n            throw new Error('No local description passed in.');\r\n        }\r\n\r\n        const transformer = new SdpTransformWrap(desc.sdp);\r\n\r\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\r\n            return new RTCSessionDescription({\r\n                type: desc.type,\r\n                sdp: transformer.toRawSDP()\r\n            });\r\n        }\r\n\r\n        return desc;\r\n    }\r\n\r\n    /**\r\n     * This transformation will make sure that stream identifiers are unique\r\n     * across all of the local PeerConnections even if the same stream is used\r\n     * by multiple instances at the same time.\r\n     * Each PeerConnection assigns different SSRCs to the same local\r\n     * MediaStream, but the MSID remains the same as it's used to identify\r\n     * the stream by the WebRTC backend. The transformation will append\r\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\r\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\r\n     *\r\n     * @param {RTCSessionDescription} sessionDesc - The local session\r\n     * description (this instance remains unchanged).\r\n     * @return {RTCSessionDescription} - Transformed local session description\r\n     * (a modified copy of the one given as the input).\r\n     */\r\n    transformStreamIdentifiers(sessionDesc) {\r\n        // FIXME similar check is probably duplicated in all other transformers\r\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\r\n            return sessionDesc;\r\n        }\r\n\r\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\r\n        const audioMLine = transformer.selectMedia('audio');\r\n\r\n        if (audioMLine) {\r\n            this._transformMediaIdentifiers(audioMLine);\r\n        }\r\n\r\n        const videoMLine = transformer.selectMedia('video');\r\n\r\n        if (videoMLine) {\r\n            this._transformMediaIdentifiers(videoMLine);\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: sessionDesc.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\r\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\r\n\r\nconst Resolutions = require('../../service/RTC/Resolutions');\r\nconst VideoType = require('../../service/RTC/VideoType');\r\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\r\n * over the data channel.\r\n */\r\nconst STATS_MESSAGE_TYPE = 'stats';\r\n\r\n/**\r\n * See media/engine/simulcast.ss from webrtc.org\r\n */\r\nconst kSimulcastFormats = [\r\n    { width: 1920,\r\n        height: 1080,\r\n        layers: 3,\r\n        max: 5000,\r\n        target: 4000,\r\n        min: 800 },\r\n    { width: 1280,\r\n        height: 720,\r\n        layers: 3,\r\n        max: 2500,\r\n        target: 2500,\r\n        min: 600 },\r\n    { width: 960,\r\n        height: 540,\r\n        layers: 3,\r\n        max: 900,\r\n        target: 900,\r\n        min: 450 },\r\n    { width: 640,\r\n        height: 360,\r\n        layers: 2,\r\n        max: 700,\r\n        target: 500,\r\n        min: 150 },\r\n    { width: 480,\r\n        height: 270,\r\n        layers: 2,\r\n        max: 450,\r\n        target: 350,\r\n        min: 150 },\r\n    { width: 320,\r\n        height: 180,\r\n        layers: 1,\r\n        max: 200,\r\n        target: 150,\r\n        min: 30 }\r\n];\r\n\r\n/**\r\n * The maximum bitrate to use as a measurement against the participant's current\r\n * bitrate. This cap helps in the cases where the participant's bitrate is high\r\n * but not enough to fulfill high targets, such as with 1080p.\r\n */\r\nconst MAX_TARGET_BITRATE = 2500;\r\n\r\n/**\r\n * The initial bitrate for video in kbps.\r\n */\r\nlet startBitrate = 800;\r\n\r\n\r\n/**\r\n * The current cap (in kbps) put on the video stream (or null if there isn't\r\n * a cap).  If there is a cap, we'll take it into account when calculating\r\n * the current quality.\r\n */\r\nlet videoBitrateCap = null;\r\n\r\n/**\r\n * Gets the expected bitrate (in kbps) in perfect network conditions.\r\n * @param simulcast {boolean} whether simulcast is enabled or not.\r\n * @param resolution {Resolution} the resolution.\r\n * @param millisSinceStart {number} the number of milliseconds since sending\r\n * video started.\r\n */\r\nfunction getTarget(simulcast, resolution, millisSinceStart) {\r\n    // Completely ignore the bitrate in the first 5 seconds, as the first\r\n    // event seems to fire very early and the value is suspicious and causes\r\n    // false positives.\r\n    if (millisSinceStart < 15000) {\r\n        return 1;\r\n    }\r\n\r\n    let target = 0;\r\n    let height = Math.min(resolution.height, resolution.width);\r\n\r\n    if (simulcast) {\r\n        // Find the first format with height no bigger than ours.\r\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\r\n\r\n        if (simulcastFormat) {\r\n            // Sum the target fields from all simulcast layers for the given\r\n            // resolution (e.g. 720p + 360p + 180p).\r\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\r\n                const targetHeight = height;\r\n\r\n                simulcastFormat\r\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\r\n                if (simulcastFormat) {\r\n                    target += simulcastFormat.target;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // See GetMaxDefaultVideoBitrateKbps in\r\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\r\n        const pixels = resolution.width * resolution.height;\r\n\r\n        if (pixels <= 320 * 240) {\r\n            target = 600;\r\n        } else if (pixels <= 640 * 480) {\r\n            target = 1700;\r\n        } else if (pixels <= 960 * 540) {\r\n            target = 2000;\r\n        } else {\r\n            target = 2500;\r\n        }\r\n    }\r\n\r\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\r\n    // of connection quality by 1 second.\r\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\r\n}\r\n\r\n/**\r\n * Gets the bitrate to which GCC would have ramped up in perfect network\r\n * conditions after millisSinceStart milliseconds.\r\n * @param millisSinceStart {number} the number of milliseconds since sending\r\n * video was enabled.\r\n */\r\nfunction rampUp(millisSinceStart) {\r\n    if (millisSinceStart > 60000) {\r\n        return Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    // According to GCC the send side bandwidth estimation grows with at most\r\n    // 8% per second.\r\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\r\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\r\n}\r\n\r\n/**\r\n * A class which monitors the local statistics coming from the RTC modules, and\r\n * calculates a \"connection quality\" value, in percent, for the media\r\n * connection. A value of 100% indicates a very good network connection, and a\r\n * value of 0% indicates a poor connection.\r\n */\r\nexport default class ConnectionQuality {\r\n    /**\r\n     *\r\n     * @param conference\r\n     * @param eventEmitter\r\n     * @param options\r\n     */\r\n    constructor(conference, eventEmitter, options) {\r\n        this.eventEmitter = eventEmitter;\r\n\r\n        /**\r\n         * The owning JitsiConference.\r\n         */\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Holds statistics about the local connection quality.\r\n         */\r\n        this._localStats = {\r\n            connectionQuality: 100,\r\n            jvbRTT: undefined\r\n        };\r\n\r\n        /**\r\n         * The time this._localStats.connectionQuality was last updated.\r\n         */\r\n        this._lastConnectionQualityUpdate = -1;\r\n\r\n        /**\r\n         * Maps a participant ID to an object holding connection quality\r\n         * statistics received from this participant.\r\n         */\r\n        this._remoteStats = {};\r\n\r\n        /**\r\n         * The time that the ICE state last changed to CONNECTED. We use this\r\n         * to calculate how much time we as a sender have had to ramp-up.\r\n         */\r\n        this._timeIceConnected = -1;\r\n\r\n        /**\r\n         * The time that local video was unmuted. We use this to calculate how\r\n         * much time we as a sender have had to ramp-up.\r\n         */\r\n        this._timeVideoUnmuted = -1;\r\n\r\n        /**\r\n         * The time at which a video bitrate cap was last removed.  We use\r\n         * this to calculate how much time we, as a sender, have had to\r\n         * ramp-up\r\n         */\r\n        this._timeLastBwCapRemoved = -1;\r\n\r\n        // We assume a global startBitrate value for the sake of simplicity.\r\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\r\n            startBitrate = options.config.startBitrate;\r\n        }\r\n\r\n        // TODO: consider ignoring these events and letting the user of\r\n        // lib-jitsi-meet handle these separately.\r\n        conference.on(\r\n            ConferenceEvents.CONNECTION_INTERRUPTED,\r\n            () => {\r\n                this._updateLocalConnectionQuality(0);\r\n                this.eventEmitter.emit(\r\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n                    this._localStats);\r\n                this._broadcastLocalStats();\r\n            });\r\n\r\n        conference.room.addListener(\r\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\r\n            (jingleSession, newState) => {\r\n                if (!jingleSession.isP2P && newState === 'connected') {\r\n                    this._timeIceConnected = window.performance.now();\r\n                }\r\n            });\r\n\r\n        // Listen to DataChannel message from other participants in the\r\n        // conference, and update the _remoteStats field accordingly.\r\n        conference.on(\r\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            (participant, payload) => {\r\n                if (payload.type === STATS_MESSAGE_TYPE) {\r\n                    this._updateRemoteStats(\r\n                        participant.getId(), payload.values);\r\n                }\r\n            });\r\n\r\n        // Listen to local statistics events originating from the RTC module\r\n        // and update the _localStats field.\r\n        // Oh, and by the way, the resolutions of all remote participants are\r\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\r\n        // if one carefully reads the *code* (but not the docs) in\r\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\r\n        // jitsi-meet\r\n        // TODO: We should keep track of the remote resolution in _remoteStats,\r\n        // and notify about changes via separate events.\r\n        conference.statistics.addConnectionStatsListener(\r\n            this._updateLocalStats.bind(this));\r\n\r\n        // Save the last time we were unmuted.\r\n        conference.on(\r\n            ConferenceEvents.TRACK_MUTE_CHANGED,\r\n            track => {\r\n                if (track.isVideoTrack()) {\r\n                    if (track.isMuted()) {\r\n                        this._timeVideoUnmuted = -1;\r\n                    } else {\r\n                        this._maybeUpdateUnmuteTime();\r\n                    }\r\n                }\r\n            });\r\n        conference.on(\r\n            ConferenceEvents.TRACK_ADDED,\r\n            track => {\r\n                if (track.isVideoTrack() && !track.isMuted()) {\r\n                    this._maybeUpdateUnmuteTime();\r\n                }\r\n            });\r\n        conference.rtc.on(\r\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\r\n            track => {\r\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\r\n            });\r\n\r\n        conference.on(\r\n            ConferenceEvents.SERVER_REGION_CHANGED,\r\n            serverRegion => {\r\n                this._localStats.serverRegion = serverRegion;\r\n            });\r\n\r\n        conference.on(\r\n            ConferenceEvents.PROPERTIES_CHANGED,\r\n            properties => {\r\n                this._localStats.bridgeCount\r\n                    = Number((properties || {})['bridge-count']);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\r\n     * doesn't change it.\r\n     */\r\n    _maybeUpdateUnmuteTime() {\r\n        if (this._timeVideoUnmuted < 0) {\r\n            this._timeVideoUnmuted = window.performance.now();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates a new \"connection quality\" value.\r\n     * @param videoType {VideoType} the type of the video source (camera or\r\n     * a screen capture).\r\n     * @param isMuted {boolean} whether the local video is muted.\r\n     * @param resolutionName {Resolution} the input resolution used by the\r\n     * camera.\r\n     * @returns {*} the newly calculated connection quality.\r\n     */\r\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\r\n\r\n        // resolutionName is an index into Resolutions (where \"720\" is\r\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\r\n        const resolution = Resolutions[resolutionName];\r\n\r\n        let quality = 100;\r\n        let packetLoss;\r\n\r\n        // TODO: take into account packet loss for received streams\r\n\r\n        if (this._localStats.packetLoss) {\r\n            packetLoss = this._localStats.packetLoss.upload;\r\n\r\n            // Ugly Hack Alert (UHA):\r\n            // The packet loss for the upload direction is calculated based on\r\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\r\n            // termination for audio, these reports come from the actual\r\n            // receivers in the conference and therefore the reported packet\r\n            // loss includes loss from the bridge to the receiver.\r\n            // When we are sending video this effect is small, because the\r\n            // number of video packets is much larger than the number of audio\r\n            // packets (and our calculation is based on the total number of\r\n            // received and lost packets).\r\n            // When video is muted, however, the effect might be significant,\r\n            // but we don't know what it is. We do know that it is positive, so\r\n            // as a temporary solution, until RTCP termination is implemented\r\n            // for the audio streams, we relax the packet loss checks here.\r\n            if (isMuted) {\r\n                packetLoss *= 0.5;\r\n            }\r\n        }\r\n\r\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\r\n            || this._timeIceConnected < 0\r\n            || this._timeVideoUnmuted < 0) {\r\n\r\n            // Calculate a value based on packet loss only.\r\n            if (packetLoss === undefined) {\r\n                logger.error('Cannot calculate connection quality, unknown '\r\n                    + 'packet loss.');\r\n                quality = 100;\r\n            } else if (packetLoss <= 2) {\r\n                quality = 100; // Full 5 bars.\r\n            } else if (packetLoss <= 4) {\r\n                quality = 70; // 4 bars\r\n            } else if (packetLoss <= 6) {\r\n                quality = 50; // 3 bars\r\n            } else if (packetLoss <= 8) {\r\n                quality = 30; // 2 bars\r\n            } else if (packetLoss <= 12) {\r\n                quality = 10; // 1 bars\r\n            } else {\r\n                quality = 0; // Still 1 bar, but slower climb-up.\r\n            }\r\n        } else {\r\n            // Calculate a value based on the sending bitrate.\r\n\r\n            // Figure out if simulcast is in use\r\n            const activeTPC = this._conference.getActivePeerConnection();\r\n            const isSimulcastOn\r\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\r\n\r\n            const newVideoBitrateCap\r\n                = activeTPC && activeTPC.bandwidthLimiter\r\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\r\n\r\n            // If we had a cap set but there isn't one now, then it has\r\n            // just been 'lifted', so we should treat this like a new\r\n            // ramp up.\r\n            if (!newVideoBitrateCap && videoBitrateCap) {\r\n                this._timeLastBwCapRemoved = window.performance.now();\r\n\r\n                // Set the start bitrate to whatever we were just capped to\r\n                startBitrate = videoBitrateCap;\r\n            }\r\n            videoBitrateCap = newVideoBitrateCap;\r\n\r\n            // time since sending of video was enabled.\r\n            const millisSinceStart = window.performance.now()\r\n                - Math.max(this._timeVideoUnmuted,\r\n                    this._timeIceConnected,\r\n                    this._timeLastBwCapRemoved);\r\n\r\n            // expected sending bitrate in perfect conditions\r\n            let target\r\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\r\n\r\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\r\n\r\n            if (videoBitrateCap) {\r\n                target = Math.min(target, videoBitrateCap);\r\n            }\r\n\r\n            quality = 100 * this._localStats.bitrate.upload / target;\r\n\r\n            // Whatever the bitrate, drop early if there is significant loss\r\n            if (packetLoss && packetLoss >= 10) {\r\n                quality = Math.min(quality, 30);\r\n            }\r\n        }\r\n\r\n        // Make sure that the quality doesn't climb quickly\r\n        if (this._lastConnectionQualityUpdate > 0) {\r\n            const maxIncreasePerSecond = 2;\r\n            const prevConnectionQuality = this._localStats.connectionQuality;\r\n            const diffSeconds\r\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\r\n                    / 1000;\r\n\r\n            quality\r\n                = Math.min(\r\n                    quality,\r\n                    prevConnectionQuality\r\n                        + (diffSeconds * maxIncreasePerSecond));\r\n        }\r\n\r\n        return Math.min(100, quality);\r\n    }\r\n\r\n    /**\r\n     * Updates the localConnectionQuality value\r\n     * @param values {number} the new value. Should be in [0, 100].\r\n     */\r\n    _updateLocalConnectionQuality(value) {\r\n        this._localStats.connectionQuality = value;\r\n        this._lastConnectionQualityUpdate = window.performance.now();\r\n    }\r\n\r\n    /**\r\n     * Broadcasts the local statistics to all other participants in the\r\n     * conference.\r\n     */\r\n    _broadcastLocalStats() {\r\n        // Send only the data that remote participants care about.\r\n        const data = {\r\n            bitrate: this._localStats.bitrate,\r\n            packetLoss: this._localStats.packetLoss,\r\n            connectionQuality: this._localStats.connectionQuality,\r\n            jvbRTT: this._localStats.jvbRTT,\r\n            serverRegion: this._localStats.serverRegion,\r\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\r\n            avgAudioLevels: this._localStats.localAvgAudioLevels\r\n        };\r\n\r\n        try {\r\n            this._conference.broadcastEndpointMessage({\r\n                type: STATS_MESSAGE_TYPE,\r\n                values: data });\r\n        } catch (e) {\r\n            // We often hit this in the beginning of a call, before the data\r\n            // channel is ready. It is not a big problem, because we will\r\n            // send the statistics again after a few seconds, and the error is\r\n            // already logged elsewhere. So just ignore it.\r\n\r\n            // let errorMsg = \"Failed to broadcast local stats\";\r\n            // logger.error(errorMsg, e);\r\n            // GlobalOnErrorHandler.callErrorHandler(\r\n            //    new Error(errorMsg + \": \" + e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the local statistics\r\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\r\n     * the stats\r\n     * @param data new statistics\r\n     */\r\n    _updateLocalStats(tpc, data) {\r\n        // Update jvbRTT\r\n        if (!tpc.isP2P) {\r\n            const jvbRTT\r\n                = data.transport\r\n                    && data.transport.length && data.transport[0].rtt;\r\n\r\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\r\n        }\r\n\r\n        // Do not continue with processing of other stats if they do not\r\n        // originate from the active peerconnection\r\n        if (tpc !== this._conference.getActivePeerConnection()) {\r\n            return;\r\n        }\r\n\r\n        let key;\r\n        const updateLocalConnectionQuality\r\n            = !this._conference.isConnectionInterrupted();\r\n        const localVideoTrack\r\n            = this._conference.getLocalVideoTrack();\r\n        const videoType\r\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\r\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\r\n        const resolution = localVideoTrack\r\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\r\n\r\n        if (!isMuted) {\r\n            this._maybeUpdateUnmuteTime();\r\n        }\r\n\r\n        // Copy the fields already in 'data'.\r\n        for (key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                this._localStats[key] = data[key];\r\n            }\r\n        }\r\n\r\n        // And re-calculate the connectionQuality field.\r\n        if (updateLocalConnectionQuality) {\r\n            this._updateLocalConnectionQuality(\r\n                this._calculateConnectionQuality(\r\n                    videoType,\r\n                    isMuted,\r\n                    resolution));\r\n        }\r\n\r\n        this.eventEmitter.emit(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._localStats);\r\n        this._broadcastLocalStats();\r\n    }\r\n\r\n    /**\r\n     * Updates remote statistics\r\n     * @param id the id of the remote participant\r\n     * @param data the statistics received\r\n     */\r\n    _updateRemoteStats(id, data) {\r\n        // Use only the fields we need\r\n        this._remoteStats[id] = {\r\n            bitrate: data.bitrate,\r\n            packetLoss: data.packetLoss,\r\n            connectionQuality: data.connectionQuality,\r\n            jvbRTT: data.jvbRTT,\r\n            serverRegion: data.serverRegion,\r\n            maxEnabledResolution: data.maxEnabledResolution,\r\n            avgAudioLevels: data.avgAudioLevels\r\n        };\r\n\r\n        this.eventEmitter.emit(\r\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n            id,\r\n            this._remoteStats[id]);\r\n    }\r\n\r\n    /**\r\n     * Returns the local statistics.\r\n     * Exported only for use in jitsi-meet-torture.\r\n     */\r\n    getStats() {\r\n        return this._localStats;\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\r\n *\r\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\r\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\r\n * the internet offline status then the time will start counting after the internet comes back online.\r\n *\r\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\r\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\r\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\r\n */\r\nexport default class IceFailedHandling {\r\n    /**\r\n     * Creates new {@code DelayedIceFailed} task.\r\n     * @param {JitsiConference} conference\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n    }\r\n\r\n    /**\r\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\r\n     * notification to Jicofo or emits the ice failed conference event.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _actOnIceFailed() {\r\n        const { enableIceRestart } = this._conference.options.config;\r\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\r\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\r\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\r\n\r\n        logger.info('ICE failed,'\r\n            + ` enableIceRestart: ${enableIceRestart},`\r\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\r\n\r\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate)) {\r\n            logger.info('ICE failed, but ICE restarts are disabled');\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.ICE_FAILED);\r\n\r\n            return;\r\n        }\r\n\r\n        const jvbConnection = this._conference.jvbJingleSession;\r\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\r\n\r\n        if (!jvbConnection) {\r\n            logger.warn('Not sending ICE failed - no JVB connection');\r\n        } else if (jvbConnIceState === 'connected') {\r\n            logger.info('ICE connection restored - not sending ICE failed');\r\n        } else {\r\n            logger.info('Sending ICE failed - the connection did not recover, '\r\n                + `ICE state: ${jvbConnIceState}, `\r\n                + `use 'session-terminate': ${useTerminateForRestart}`);\r\n            if (useTerminateForRestart) {\r\n                this._conference.jvbJingleSession.terminate(\r\n                    () => {\r\n                        logger.info('session-terminate for ice restart - done');\r\n                    },\r\n                    error => {\r\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\r\n                    }, {\r\n                        reason: 'connectivity-error',\r\n                        reasonDescription: 'ICE FAILED',\r\n                        requestRestart: true,\r\n                        sendSessionTerminate: true\r\n                    });\r\n            } else {\r\n                this._conference.jvbJingleSession.sendIceFailedNotification();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the task.\r\n     */\r\n    start() {\r\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\r\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\r\n        // gets reconnected.\r\n        //  This also handles the case about waiting for the internet to come back online, because ping\r\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\r\n        // CONNECTED which is the extra 2 second timeout after ping.\r\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\r\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\r\n        // to 'item-not-found' error returned by the server.\r\n        this._conference.xmpp.ping(65000).then(\r\n            () => {\r\n                if (!this._canceled) {\r\n                    this._iceFailedTimeout = window.setTimeout(() => {\r\n                        this._iceFailedTimeout = undefined;\r\n                        this._actOnIceFailed();\r\n                    }, 2000);\r\n                }\r\n            },\r\n            error => {\r\n                logger.error('PING error/timeout - not sending ICE failed', error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Cancels the task.\r\n     */\r\n    cancel() {\r\n        this._canceled = true;\r\n        window.clearTimeout(this._iceFailedTimeout);\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport browser from '../browser';\r\n\r\nimport * as DetectionEvents from './DetectionEvents';\r\n\r\n// We wait a certain time interval for constant silence input from the current device to account for\r\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\r\n// an audio track is added to the tcr.\r\n// Potential improvement - add this as a configurable parameter.\r\nconst SILENCE_PERIOD_MS = 4000;\r\n\r\n/**\r\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\r\n * state must be constant for a configured amount of time in order for the event to be triggered.\r\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\r\n * @fires DetectionEvents.NO_AUDIO_INPUT\r\n */\r\nexport default class NoAudioSignalDetection extends EventEmitter {\r\n    /**\r\n     * Creates new NoAudioSignalDetection.\r\n     *\r\n     * @param conference the JitsiConference instance that created us.\r\n     * @constructor\r\n     */\r\n    constructor(conference) {\r\n        super();\r\n\r\n        this._conference = conference;\r\n        this._timeoutTrigger = null;\r\n        this._hasAudioInput = null;\r\n\r\n        if (!browser.supportsReceiverStats()) {\r\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\r\n        }\r\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Clear the timeout state.\r\n     */\r\n    _clearTriggerTimeout() {\r\n        clearTimeout(this._timeoutTrigger);\r\n        this._timeoutTrigger = null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Generated event triggered by a change in the current conference audio input state.\r\n     *\r\n     * @param {*} audioLevel - The audio level of the ssrc.\r\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\r\n     */\r\n    _handleAudioInputStateChange(audioLevel) {\r\n        // Current audio input state of the active local track in the conference, true for audio input false for no\r\n        // audio input.\r\n        const status = audioLevel !== 0;\r\n\r\n        // If this is the first audio event picked up or the current status is different from the previous trigger\r\n        // the event.\r\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\r\n            this._hasAudioInput = status;\r\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate event triggered by a prolonged period of no audio input.\r\n     *\r\n     * @param {number} audioLevel - The audio level of the ssrc.\r\n     * @fires DetectionEvents.NO_AUDIO_INPUT\r\n     */\r\n    _handleNoAudioInputDetection(audioLevel) {\r\n        if (this._eventFired) {\r\n            return;\r\n        }\r\n\r\n        if (audioLevel === 0 && !this._timeoutTrigger) {\r\n            this._timeoutTrigger = setTimeout(() => {\r\n                this._eventFired = true;\r\n\r\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\r\n            }, SILENCE_PERIOD_MS);\r\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\r\n            this._clearTriggerTimeout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\r\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\r\n     * being reported.\r\n     * @param {number} audioLevel - The audio level of the ssrc.\r\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\r\n     */\r\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\r\n        // We are interested in the local audio streams\r\n        if (!isLocal || !this._audioTrack) {\r\n            return;\r\n        }\r\n\r\n        // Get currently active local tracks from the TraceablePeerConnection\r\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\r\n\r\n        // Only target the current active track in the tpc. For some reason audio levels for previous\r\n        // devices are also picked up from the PeerConnection so we filter them out.\r\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\r\n            return;\r\n        }\r\n\r\n        // First handle audio input state change. In case the state changed to no input the no audio input event\r\n        // can try to fire again.\r\n        this._handleAudioInputStateChange(audioLevel);\r\n        this._handleNoAudioInputDetection(audioLevel);\r\n    }\r\n\r\n    /**\r\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\r\n     * Only take into account local audio tracks.\r\n     *\r\n     * @param {JitsiTrack} track - The added JitsiTrack.\r\n     */\r\n    _trackAdded(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Reset state for the new track.\r\n            this._audioTrack = track;\r\n            this._eventFired = false;\r\n            this._clearTriggerTimeout();\r\n\r\n            // Listen for the audio levels on the newly added audio track\r\n            if (browser.supportsReceiverStats()) {\r\n                track.on(\r\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\r\n                    audioLevel => {\r\n                        this._handleNoAudioInputDetection(audioLevel);\r\n                    }\r\n                );\r\n                track.on(\r\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                    audioLevel => {\r\n                        this._handleNoAudioInputDetection(audioLevel);\r\n                        this._handleAudioInputStateChange(audioLevel);\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\n\r\n/**\r\n * The value which we use to say, every sound over this threshold\r\n * is talking on the mic.\r\n * @type {number}\r\n */\r\nconst SPEECH_DETECT_THRESHOLD = 0.6;\r\n\r\n/**\r\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\r\n * currently used.\r\n * Listens for changes in the audio level changes of the local p2p audio track\r\n * or remote p2p one and fires dominant speaker events to be able to use\r\n * features depending on those events (speaker stats), to make them work without\r\n * the video bridge.\r\n */\r\nexport default class P2PDominantSpeakerDetection {\r\n    /**\r\n     * Creates P2PDominantSpeakerDetection\r\n     * @param conference the JitsiConference instance that created us.\r\n     * @constructor\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n            this._audioLevel.bind(this));\r\n\r\n        this.myUserID = this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Receives audio level events for all streams in the conference.\r\n     *\r\n     * @param {String} id - The participant id\r\n     * @param {number} audioLevel - The audio level.\r\n     */\r\n    _audioLevel(id, audioLevel) {\r\n\r\n        // we do not process if p2p is not active\r\n        // or audio level is under certain threshold\r\n        // or if the audio level is for local audio track which is muted\r\n        if (!this.conference.isP2PActive()\r\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\r\n            || (id === this.myUserID\r\n                    && this.conference.getLocalAudioTrack().isMuted())) {\r\n            return;\r\n        }\r\n\r\n        this.conference.rtc.eventEmitter.emit(\r\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n            id);\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\r\n\r\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\n\r\n/**\r\n * The average value VAD needs to be under over a period of time to be considered noise.\r\n * @type {number}\r\n */\r\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\r\n\r\n/**\r\n * The average values that audio input need to be over to be considered loud.\r\n * @type {number}\r\n */\r\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\r\n\r\n/**\r\n * The value that a VAD score needs to be under in order for processing to begin.\r\n * @type {number}\r\n */\r\nconst VAD_SCORE_TRIGGER = 0.2;\r\n\r\n/**\r\n * The value that a VAD score needs to be under in order for processing to begin.\r\n * @type {number}\r\n */\r\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\r\n\r\n/**\r\n * Time span over which we calculate an average score used to determine if we trigger the event.\r\n * @type {number}\r\n */\r\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\r\n\r\n/**\r\n * Detect if provided VAD score and PCM data is considered noise.\r\n */\r\nexport default class VADNoiseDetection extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADNoiseDetection</tt>\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\r\n         * ongoing.\r\n         */\r\n        this._processing = false;\r\n\r\n        /**\r\n         * Buffer that keeps the VAD scores for a period of time.\r\n         */\r\n        this._scoreArray = [];\r\n\r\n        /**\r\n         * Buffer that keeps audio level samples for a period of time.\r\n         */\r\n        this._audioLvlArray = [];\r\n\r\n        /**\r\n         * Current state of the service, if it's not active no processing will occur.\r\n         */\r\n        this._active = false;\r\n\r\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\r\n     * If the score is above the set threshold fire the event.\r\n     * @returns {void}\r\n     * @fires VAD_NOISY_DEVICE\r\n     */\r\n    _calculateNoisyScore() {\r\n        const scoreAvg = calculateAverage(this._scoreArray);\r\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\r\n\r\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\r\n            this.emit(VAD_NOISY_DEVICE);\r\n\r\n            this._setActiveState(false);\r\n        }\r\n\r\n        // We reset the context in case a new process phase needs to be triggered.\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Record the vad score and average volume in the appropriate buffers.\r\n     *\r\n     * @param {number} vadScore\r\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\r\n     */\r\n    _recordValues(vadScore, avgAudioLvl) {\r\n        this._scoreArray.push(vadScore);\r\n        this._audioLvlArray.push(avgAudioLvl);\r\n    }\r\n\r\n    /**\r\n     * Set the active state of the detection service and notify any listeners.\r\n     *\r\n     * @param {boolean} active\r\n     * @fires DETECTOR_STATE_CHANGE\r\n     */\r\n    _setActiveState(active) {\r\n        this._active = active;\r\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\r\n    }\r\n\r\n    /**\r\n     * Change the state according to the muted status of the tracked device.\r\n     *\r\n     * @param {boolean} isMuted - Is the device muted or not.\r\n     */\r\n    changeMuteState(isMuted) {\r\n        // This service only needs to run when the microphone is not muted.\r\n        this._setActiveState(!isMuted);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the service is active or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isActive() {\r\n        return this._active;\r\n    }\r\n\r\n    /**\r\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._processing = false;\r\n        this._scoreArray = [];\r\n        this._audioLvlArray = [];\r\n        clearTimeout(this._processTimeout);\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and processes them.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    processVADScore(vadScore) {\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n\r\n        // There is a processing phase on going, add score to buffer array.\r\n        if (this._processing) {\r\n            // Filter and calculate sample average so we don't have to process one large array at a time.\r\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\r\n\r\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\r\n\r\n            return;\r\n        }\r\n\r\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\r\n        // noise\r\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\r\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\r\n            const avgAudioLvl = calculateAverage(posAudioLevels);\r\n\r\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\r\n                this._processing = true;\r\n                this._recordValues(vadScore.score, avgAudioLvl);\r\n\r\n                // Once the preset timeout executes the final score will be calculated.\r\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nimport { calculateAverage } from '../util/MathUtil';\r\n\r\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\n\r\n\r\n/**\r\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\r\n * @type {number}\r\n */\r\nconst VAD_AVG_THRESHOLD = 0.6;\r\n\r\n/**\r\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\r\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\r\n * @type {number}\r\n */\r\nconst VAD_VOICE_LEVEL = 0.9;\r\n\r\n/**\r\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\r\n * @type {number}\r\n */\r\n\r\n/**\r\n * Time span over which we calculate an average score used to determine if we trigger the event.\r\n * @type {number}\r\n */\r\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\r\n\r\n/**\r\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\r\n */\r\nexport default class VADTalkMutedDetection extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADTalkMutedDetection</tt>\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\r\n         * ongoing.\r\n         */\r\n        this._processing = false;\r\n\r\n        /**\r\n         * Buffer that keeps the VAD scores for a period of time.\r\n         */\r\n        this._scoreArray = [];\r\n\r\n        /**\r\n         * Current mute state of the audio track being monitored.\r\n         */\r\n        this._active = false;\r\n\r\n        this._calculateVADScore = this._calculateVADScore.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\r\n     * @returns {void}\r\n     * @fires VAD_TALK_WHILE_MUTED\r\n     */\r\n    _calculateVADScore() {\r\n        const score = calculateAverage(this._scoreArray);\r\n\r\n        if (score > VAD_AVG_THRESHOLD) {\r\n            this.emit(VAD_TALK_WHILE_MUTED);\r\n\r\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\r\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\r\n            this._setActiveState(false);\r\n        }\r\n\r\n        // We reset the context in case a new process phase needs to be triggered.\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Set the active state of the detection service and notify any listeners.\r\n     *\r\n     * @param {boolean} active\r\n     * @fires DETECTOR_STATE_CHANGE\r\n     */\r\n    _setActiveState(active) {\r\n        this._active = active;\r\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\r\n    }\r\n\r\n    /**\r\n     * Change the state according to the muted status of the tracked device.\r\n     *\r\n     * @param {boolean} isMuted - Is the device muted or not.\r\n     */\r\n    changeMuteState(isMuted) {\r\n        // This service only needs to run when the microphone is muted.\r\n        this._setActiveState(isMuted);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the service is active or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isActive() {\r\n        return this._active;\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and processes them.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    processVADScore(vadScore) {\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n\r\n        // There is a processing phase on going, add score to buffer array.\r\n        if (this._processing) {\r\n            this._scoreArray.push(vadScore.score);\r\n\r\n            return;\r\n        }\r\n\r\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\r\n        // there is no need to check for rogue events.\r\n        if (vadScore.score > VAD_VOICE_LEVEL) {\r\n            this._processing = true;\r\n            this._scoreArray.push(vadScore.score);\r\n\r\n            // Start gathering VAD scores for the configured period of time.\r\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._processing = false;\r\n        this._scoreArray = [];\r\n        clearTimeout(this._processTimeout);\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as E2ePingEvents\r\n    from '../../service/e2eping/E2ePingEvents';\r\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The 'type' of a message which designates an e2e ping request.\r\n * @type {string}\r\n */\r\nconst E2E_PING_REQUEST = 'e2e-ping-request';\r\n\r\n/**\r\n * The 'type' of a message which designates an e2e ping response.\r\n * @type {string}\r\n */\r\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\r\n\r\n/**\r\n * Saves e2e ping related state for a single JitsiParticipant.\r\n */\r\nclass ParticipantWrapper {\r\n    /**\r\n     * Creates a ParticipantWrapper\r\n     * @param {JitsiParticipant} participant - The remote participant that this\r\n     * object wraps.\r\n     * @param {E2ePing} e2eping\r\n     */\r\n    constructor(participant, e2eping) {\r\n        // The JitsiParticipant\r\n        this.participant = participant;\r\n\r\n        // The E2ePing\r\n        this.e2eping = e2eping;\r\n\r\n        // Caches the ID\r\n        this.id = participant.getId();\r\n\r\n        // Recently sent requests\r\n        this.requests = {};\r\n\r\n        // The ID of the last sent request. We just increment it for each new\r\n        // request. Start at 1 so we can consider only thruthy values valid.\r\n        this.lastRequestId = 1;\r\n\r\n        this.clearIntervals = this.clearIntervals.bind(this);\r\n        this.sendRequest = this.sendRequest.bind(this);\r\n        this.handleResponse = this.handleResponse.bind(this);\r\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\r\n        this.sendAnalytics = this.sendAnalytics.bind(this);\r\n\r\n        // If the data channel was already open (this is likely a participant\r\n        // joining an existing conference) send a request immediately.\r\n        if (e2eping.isDataChannelOpen) {\r\n            this.sendRequest();\r\n        }\r\n\r\n        this.pingInterval = window.setInterval(\r\n            this.sendRequest, e2eping.pingIntervalMs);\r\n        this.analyticsInterval = window.setTimeout(\r\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\r\n    }\r\n\r\n    /**\r\n     * Clears the interval which sends pings.\r\n     * @type {*}\r\n     */\r\n    clearIntervals() {\r\n        if (this.pingInterval) {\r\n            window.clearInterval(this.pingInterval);\r\n        }\r\n        if (this.analyticsInterval) {\r\n            window.clearInterval(this.analyticsInterval);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the next ping request.\r\n     * @type {*}\r\n     */\r\n    sendRequest() {\r\n        const requestId = this.lastRequestId++;\r\n        const requestMessage = {\r\n            type: E2E_PING_REQUEST,\r\n            id: requestId\r\n        };\r\n\r\n        this.e2eping.sendMessage(requestMessage, this.id);\r\n        this.requests[requestId] = {\r\n            id: requestId,\r\n            timeSent: window.performance.now()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handles a response from this participant.\r\n     * @type {*}\r\n     */\r\n    handleResponse(response) {\r\n        const request = this.requests[response.id];\r\n\r\n        if (request) {\r\n            request.rtt = window.performance.now() - request.timeSent;\r\n            this.e2eping.eventEmitter.emit(\r\n                E2ePingEvents.E2E_RTT_CHANGED,\r\n                this.participant,\r\n                request.rtt);\r\n        }\r\n\r\n        this.maybeSendAnalytics();\r\n    }\r\n\r\n    /**\r\n     * Goes over the requests, clearing ones which we don't need anymore, and\r\n     * if it finds at least one request with a valid RTT in the last\r\n     * 'analyticsIntervalMs' then sends an analytics event.\r\n     * @type {*}\r\n     */\r\n    maybeSendAnalytics() {\r\n        const now = window.performance.now();\r\n\r\n        // The RTT we'll report is the minimum RTT measured in the last\r\n        // analyticsInterval\r\n        let rtt = Infinity;\r\n        let request, requestId;\r\n\r\n        // It's time to send analytics. Clean up all requests and find the\r\n        for (requestId in this.requests) {\r\n            if (this.requests.hasOwnProperty(requestId)) {\r\n                request = this.requests[requestId];\r\n\r\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\r\n                    // An old request. We don't care about it anymore.\r\n                    delete this.requests[requestId];\r\n                } else if (request.rtt) {\r\n                    rtt = Math.min(rtt, request.rtt);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (rtt < Infinity) {\r\n            this.sendAnalytics(rtt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends an analytics event for this participant with the given RTT.\r\n     * @type {*}\r\n     */\r\n    sendAnalytics(rtt) {\r\n        Statistics.sendAnalytics(createE2eRttEvent(\r\n            this.id,\r\n            this.participant.getProperty('region'),\r\n            rtt));\r\n    }\r\n}\r\n\r\n/**\r\n * Implements end-to-end ping (from one conference participant to another) via\r\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\r\n *\r\n * TODO: use a broadcast message instead of individual pings to each remote\r\n * participant.\r\n *\r\n * This class:\r\n * 1. Sends periodic ping requests to all other participants in the\r\n * conference.\r\n * 2. Responds to ping requests from other participants.\r\n * 3. Fires events with the end-to-end RTT to each participant whenever a\r\n * response is received.\r\n * 4. Fires analytics events with the end-to-end RTT periodically.\r\n */\r\nexport default class E2ePing {\r\n    /**\r\n     * @param {JitsiConference} conference - The conference.\r\n     * @param {Function} sendMessage - The function to use to send a message.\r\n     * @param {Object} options\r\n     */\r\n    constructor(conference, options, sendMessage) {\r\n        this.conference = conference;\r\n        this.eventEmitter = conference.eventEmitter;\r\n        this.sendMessage = sendMessage;\r\n\r\n        // The interval at which pings will be sent (<= 0 disables sending).\r\n        this.pingIntervalMs = 10000;\r\n\r\n        // The interval at which analytics events will be sent.\r\n        this.analyticsIntervalMs = 60000;\r\n\r\n        // Maps a participant ID to its ParticipantWrapper\r\n        this.participants = {};\r\n\r\n        // Whether the WebRTC channel has been opened or not.\r\n        this.isDataChannelOpen = false;\r\n\r\n        if (options && options.e2eping) {\r\n            if (typeof options.e2eping.pingInterval === 'number') {\r\n                this.pingIntervalMs = options.e2eping.pingInterval;\r\n            }\r\n            if (typeof options.e2eping.analyticsInterval === 'number') {\r\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\r\n            }\r\n\r\n            // We want to report at most once a ping interval.\r\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\r\n                < this.pingIntervalMs) {\r\n                this.analyticsIntervalMs = this.pingIntervalMs;\r\n            }\r\n        }\r\n        logger.info(\r\n            `Initializing e2e ping; pingInterval=${\r\n                this.pingIntervalMs}, analyticsInterval=${\r\n                this.analyticsIntervalMs}.`);\r\n\r\n        this.participantJoined = this.participantJoined.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this.participantJoined);\r\n\r\n        this.participantLeft = this.participantLeft.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this.participantLeft);\r\n\r\n        this.messageReceived = this.messageReceived.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            this.messageReceived);\r\n\r\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\r\n            this.dataChannelOpened);\r\n    }\r\n\r\n    /**\r\n     * Notifies this instance that the communications channel has been opened\r\n     * and it can now send messages via sendMessage.\r\n     */\r\n    dataChannelOpened() {\r\n        this.isDataChannelOpen = true;\r\n\r\n        // We don't want to wait the whole interval before sending the first\r\n        // request, but we can't send it immediately after the participant joins\r\n        // either, because our data channel might not have initialized.\r\n        // So once the data channel initializes, send requests to everyone.\r\n        // Wait an additional 200ms to give a chance to the remote side (if it\r\n        // also just connected as is the case for the first 2 participants in a\r\n        // conference) to open its data channel.\r\n        for (const id in this.participants) {\r\n            if (this.participants.hasOwnProperty(id)) {\r\n                const participantWrapper = this.participants[id];\r\n\r\n                window.setTimeout(participantWrapper.sendRequest, 200);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a message that was received.\r\n     *\r\n     * @param participant - The message sender.\r\n     * @param payload - The payload of the message.\r\n     */\r\n    messageReceived(participant, payload) {\r\n        // Listen to E2E PING requests and responses from other participants\r\n        // in the conference.\r\n        if (payload.type === E2E_PING_REQUEST) {\r\n            this.handleRequest(participant.getId(), payload);\r\n        } else if (payload.type === E2E_PING_RESPONSE) {\r\n            this.handleResponse(participant.getId(), payload);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a participant joining the conference. Starts to send ping\r\n     * requests to the participant.\r\n     *\r\n     * @param {String} id - The ID of the participant.\r\n     * @param {JitsiParticipant} participant - The participant that joined.\r\n     */\r\n    participantJoined(id, participant) {\r\n        if (this.pingIntervalMs <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.participants[id]) {\r\n            logger.info(\r\n                `Participant wrapper already exists for ${id}. Clearing.`);\r\n            this.participants[id].clearIntervals();\r\n            delete this.participants[id];\r\n        }\r\n\r\n        this.participants[id] = new ParticipantWrapper(participant, this);\r\n    }\r\n\r\n    /**\r\n     * Handles a participant leaving the conference. Stops sending requests.\r\n     *\r\n     * @param {String} id - The ID of the participant.\r\n     */\r\n    participantLeft(id) {\r\n        if (this.pingIntervalMs <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.participants[id]) {\r\n            this.participants[id].clearIntervals();\r\n            delete this.participants[id];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a ping request coming from another participant.\r\n     *\r\n     * @param {string} participantId - The ID of the participant who sent the\r\n     * request.\r\n     * @param {Object} request - The request.\r\n     */\r\n    handleRequest(participantId, request) {\r\n        // If it's a valid request, just send a response.\r\n        if (request && request.id) {\r\n            const response = {\r\n                type: E2E_PING_RESPONSE,\r\n                id: request.id\r\n            };\r\n\r\n            this.sendMessage(response, participantId);\r\n        } else {\r\n            logger.info(\r\n                `Received an invalid e2e ping request from ${participantId}.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a ping response coming from another participant\r\n     * @param {string} participantId - The ID of the participant who sent the\r\n     * response.\r\n     * @param {Object} response - The response.\r\n     */\r\n    handleResponse(participantId, response) {\r\n        const participantWrapper = this.participants[participantId];\r\n\r\n        if (participantWrapper) {\r\n            participantWrapper.handleResponse(response);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops this E2ePing (i.e. stop sending requests).\r\n     */\r\n    stop() {\r\n        logger.info('Stopping e2eping');\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this.participantJoined);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this.participantLeft);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            this.messageReceived);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\r\n            this.dataChannelOpened);\r\n\r\n        for (const id in this.participants) {\r\n            if (this.participants.hasOwnProperty(id)) {\r\n                this.participants[id].clearIntervals();\r\n            }\r\n        }\r\n\r\n        this.participants = {};\r\n    }\r\n}\r\n\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\r\n * P2P status and the conference participants count. See the event description\r\n * for more info.\r\n */\r\nexport default class Jvb121EventGenerator {\r\n    /**\r\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\r\n     * @param {JitsiConference} conference\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\r\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\r\n         * the conference is currently in the P2P mode.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._jvb121 = true;\r\n\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\r\n    }\r\n\r\n    /**\r\n     * Checks whether the JVB121 value should be updated and a new event\r\n     * emitted.\r\n     */\r\n    evaluateStatus() {\r\n        const oldStatus = this._jvb121;\r\n        const newStatus\r\n            = !this._conference.isP2PActive()\r\n                && this._conference.getParticipantCount() <= 2;\r\n\r\n        if (oldStatus !== newStatus) {\r\n            this._jvb121 = newStatus;\r\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\r\n        }\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\r\n\r\n/**\r\n * The class manages send and receive video constraints across media sessions({@link JingleSessionPC}) which belong to\r\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\r\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\r\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\r\n * different.\r\n */\r\nexport class QualityController {\r\n    /**\r\n     * Creates new instance for a given conference.\r\n     *\r\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\r\n     * the quality constraints.\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n            session => this._onMediaSessionStarted(session));\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n            () => this._propagateSendMaxFrameHeight());\r\n    }\r\n\r\n    /**\r\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\r\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\r\n     * the conference has entered the p2p mode already.\r\n     *\r\n     * @param {JingleSessionPC} mediaSession - the started media session.\r\n     * @private\r\n     */\r\n    _onMediaSessionStarted(mediaSession) {\r\n        mediaSession.addListener(\r\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\r\n            session => {\r\n                if (session === this.conference._getActiveMediaSession()) {\r\n                    this._propagateSendMaxFrameHeight();\r\n                }\r\n            });\r\n        this.preferredReceiveMaxFrameHeight\r\n            && mediaSession.setReceiverVideoConstraint(this.preferredReceiveMaxFrameHeight);\r\n\r\n        // Set the degradation preference on the local video track.\r\n        mediaSession.setSenderVideoDegradationPreference();\r\n\r\n        // Set the max bitrates on video sender if they are specified in config.js videoQuality settings.\r\n        mediaSession.setSenderMaxBitrates();\r\n    }\r\n\r\n    /**\r\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\r\n     * sessions for the reasons mentioned in this class description.\r\n     *\r\n     * @returns {Promise<void[]>}\r\n     * @private\r\n     */\r\n    _propagateSendMaxFrameHeight() {\r\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\r\n        const promises = [];\r\n\r\n        if (sendMaxFrameHeight >= 0) {\r\n            for (const session of this.conference._getMediaSessions()) {\r\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\r\n     * the active media session's receive preference set by the remote party.\r\n     *\r\n     * @returns {number|undefined}\r\n     */\r\n    selectSendMaxFrameHeight() {\r\n        const activeMediaSession = this.conference._getActiveMediaSession();\r\n        const remoteRecvMaxFrameHeight = activeMediaSession && activeMediaSession.getRemoteRecvMaxFrameHeight();\r\n\r\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\r\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\r\n        } else if (remoteRecvMaxFrameHeight >= 0) {\r\n            return remoteRecvMaxFrameHeight;\r\n        }\r\n\r\n        return this.preferredSendMaxFrameHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets local preference for max receive video frame height.\r\n     * @param {number|undefined} maxFrameHeight - the new value.\r\n     */\r\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\r\n        this.preferredReceiveMaxFrameHeight = maxFrameHeight;\r\n\r\n        for (const session of this.conference._getMediaSessions()) {\r\n            maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets local preference for max send video frame height.\r\n     *\r\n     * @param {number} maxFrameHeight - the new value to set.\r\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\r\n     */\r\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\r\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\r\n\r\n        return this._propagateSendMaxFrameHeight();\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport JibriSession from './JibriSession';\r\nimport recordingXMLUtils from './recordingXMLUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * A class responsible for starting and stopping recording sessions and emitting\r\n * state updates for them.\r\n */\r\nclass RecordingManager {\r\n    /**\r\n     * Initialize {@code RecordingManager} with other objects that are necessary\r\n     * for starting a recording.\r\n     *\r\n     * @param {ChatRoom} chatRoom - The chat room to handle.\r\n     * @returns {void}\r\n     */\r\n    constructor(chatRoom) {\r\n        /**\r\n         * All known recording sessions from the current conference.\r\n         */\r\n        this._sessions = {};\r\n\r\n        this._chatRoom = chatRoom;\r\n\r\n        this.onPresence = this.onPresence.bind(this);\r\n\r\n        this._chatRoom.eventEmitter.addListener(\r\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\r\n    }\r\n\r\n    /**\r\n     * Finds an existing recording session by session ID.\r\n     *\r\n     * @param {string} sessionID - The session ID associated with the recording.\r\n     * @returns {JibriSession|undefined}\r\n     */\r\n    getSession(sessionID) {\r\n        return this._sessions[sessionID];\r\n    }\r\n\r\n    /**\r\n     * Callback to invoke to parse through a presence update to find recording\r\n     * related updates (from Jibri participant doing the recording and the\r\n     * focus which controls recording).\r\n     *\r\n     * @param {Object} event - The presence data from the pubsub event.\r\n     * @param {Node} event.presence - An XMPP presence update.\r\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\r\n     * from a participant that is trusted but not visible, as would be the case\r\n     * with the Jibri recorder participant.\r\n     * @returns {void}\r\n     */\r\n    onPresence({ fromHiddenDomain, presence }) {\r\n        if (recordingXMLUtils.isFromFocus(presence)) {\r\n            this._handleFocusPresence(presence);\r\n        } else if (fromHiddenDomain) {\r\n            this._handleJibriPresence(presence);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start a recording session.\r\n     *\r\n     * @param {Object} options - Configuration for the recording.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [optional] options.broadcastId - The channel on which a\r\n     * live stream will occur.\r\n     * @param {string} options.mode - The mode in which recording should be\r\n     * started. Recognized values are \"file\" and \"stream\".\r\n     * @param {string} [optional] options.streamId - The stream key to be used\r\n     * for live stream broadcasting. Required for live streaming.\r\n     * @returns {Promise} A promise for starting a recording, which will pass\r\n     * back the session on success. The promise resolves after receiving an\r\n     * acknowledgment of the start request success or fail.\r\n     */\r\n    startRecording(options) {\r\n        const session = new JibriSession({\r\n            ...options,\r\n            connection: this._chatRoom.connection\r\n        });\r\n\r\n        return session.start({\r\n            appData: options.appData,\r\n            broadcastId: options.broadcastId,\r\n            focusMucJid: this._chatRoom.focusMucJid,\r\n            streamId: options.streamId\r\n        })\r\n            .then(() => {\r\n                // Only store the session and emit if the session has not been\r\n                // added already. This is a workaround for the session getting\r\n                // created due to a presence update to announce a \"pending\"\r\n                // recording being received before JibriSession#start finishes.\r\n                if (!this.getSession(session.getID())) {\r\n                    this._addSession(session);\r\n                    this._emitSessionUpdate(session);\r\n                }\r\n\r\n                return session;\r\n            })\r\n            .catch(error => {\r\n                this._emitSessionUpdate(session);\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Stop a recording session.\r\n     *\r\n     * @param {string} sessionID - The ID associated with the recording session\r\n     * to be stopped.\r\n     * @returns {Promise} The promise resolves after receiving an\r\n     * acknowledgment of the stop request success or fail.\r\n     */\r\n    stopRecording(sessionID) {\r\n        const session = this.getSession(sessionID);\r\n\r\n        if (session) {\r\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\r\n        }\r\n\r\n        return Promise.reject(new Error('Could not find session'));\r\n    }\r\n\r\n    /**\r\n     * Stores a reference to the passed in JibriSession.\r\n     *\r\n     * @param {string} session - The JibriSession instance to store.\r\n     * @returns {void}\r\n     */\r\n    _addSession(session) {\r\n        this._sessions[session.getID()] = session;\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of a recording session and stores a reference to\r\n     * it.\r\n     *\r\n     * @param {string} sessionID - The session ID of the recording in progress.\r\n     * @param {string} status - The current status of the recording session.\r\n     * @param {string} mode - The recording mode of the session.\r\n     * @returns {JibriSession}\r\n     */\r\n    _createSession(sessionID, status, mode) {\r\n        const session = new JibriSession({\r\n            connection: this._chatRoom.connection,\r\n            focusMucJid: this._chatRoom.focusMucJid,\r\n            mode,\r\n            sessionID,\r\n            status\r\n        });\r\n\r\n        this._addSession(session);\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * Notifies listeners of an update to a recording session.\r\n     *\r\n     * @param {JibriSession} session - The session that has been updated.\r\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\r\n     */\r\n    _emitSessionUpdate(session, initiator) {\r\n        this._chatRoom.eventEmitter.emit(\r\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\r\n    }\r\n\r\n    /**\r\n     * Parses presence to update an existing JibriSession or to create a new\r\n     * JibriSession.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {void}\r\n     */\r\n    _handleFocusPresence(presence) {\r\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\r\n\r\n        if (!jibriStatus) {\r\n            return;\r\n        }\r\n\r\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\r\n\r\n        // We'll look for an existing session or create one (in case we're a\r\n        // participant joining a call with an existing recording going on).\r\n        let session = this.getSession(sessionID);\r\n\r\n        // Handle the case where a status update is received in presence but\r\n        // the local participant has joined while the JibriSession has already\r\n        // ended.\r\n        if (!session && status === 'off') {\r\n            logger.warn(\r\n                'Ignoring recording presence update',\r\n                'Received a new session with status off.');\r\n\r\n            return;\r\n        }\r\n\r\n        // Jicofo sends updates via presence, and any extension in presence\r\n        // is sent until it is explicitly removed.  It's difficult for\r\n        // Jicofo to know when a presence has been sent once, so it won't\r\n        // remove jibri status extension.  This means we may receive the same\r\n        // status update more than once, so check for that here\r\n        if (session\r\n            && session.getStatus() === status\r\n            && session.getError() === error) {\r\n            logger.warn('Ignoring duplicate presence update: ',\r\n                JSON.stringify(jibriStatus));\r\n\r\n            return;\r\n        }\r\n\r\n        if (!session) {\r\n            session = this._createSession(sessionID, status, recordingMode);\r\n        }\r\n\r\n        session.setStatus(status);\r\n\r\n        if (error) {\r\n            session.setError(error);\r\n        }\r\n\r\n        this._emitSessionUpdate(session, initiator);\r\n    }\r\n\r\n    /**\r\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\r\n     * needs to be updated in a JibriSession.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {void}\r\n     */\r\n    _handleJibriPresence(presence) {\r\n        const { liveStreamViewURL, mode, sessionID }\r\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\r\n\r\n        if (!sessionID) {\r\n            logger.warn(\r\n                'Ignoring potential jibri presence due to no session id.');\r\n\r\n            return;\r\n        }\r\n\r\n        let session = this.getSession(sessionID);\r\n\r\n        if (!session) {\r\n            session = this._createSession(sessionID, '', mode);\r\n        }\r\n\r\n        session.setLiveStreamViewURL(liveStreamViewURL);\r\n\r\n        this._emitSessionUpdate(session);\r\n    }\r\n}\r\n\r\nexport default RecordingManager;\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\r\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\r\n\r\nimport Statistics from './statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Number of local samples that will be used for comparison before and after the remote sample is received.\r\n */\r\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\r\n\r\n/**\r\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\r\n * participant and compares them to detect potential audio problem for a participant.\r\n */\r\nexport default class AudioOutputProblemDetector {\r\n\r\n    /**\r\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\r\n     *\r\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n        this._localAudioLevelCache = {};\r\n        this._reportedParticipants = [];\r\n        this._audioProblemCandidates = {};\r\n        this._numberOfRemoteAudioLevelsReceived = {};\r\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\r\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\r\n        this._clearUserData = this._clearUserData.bind(this);\r\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\r\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\r\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\r\n    }\r\n\r\n    /**\r\n     * A listener for audio level data received by a remote participant.\r\n     *\r\n     * @param {string} userID - The user id of the participant that sent the data.\r\n     * @param {number} audioLevel - The average audio level value.\r\n     * @returns {void}\r\n     */\r\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\r\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\r\n\r\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\r\n\r\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\r\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\r\n            return;\r\n        }\r\n\r\n        const participant = this._conference.getParticipantById(userID);\r\n\r\n        if (participant) {\r\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\r\n\r\n            if (tracks.length > 0 && participant.isAudioMuted()) {\r\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\r\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\r\n                // zero values for muted track.\r\n                return;\r\n            }\r\n        }\r\n\r\n        const localAudioLevels = this._localAudioLevelCache[userID];\r\n\r\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\r\n            this._audioProblemCandidates[userID] = {\r\n                remoteAudioLevels: avgAudioLevels,\r\n                localAudioLevels: []\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A listener for audio level data retrieved by the local stats.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\r\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\r\n     * @returns {void}\r\n     */\r\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\r\n        if (tpc !== this._conference.getActivePeerConnection()) {\r\n            return;\r\n        }\r\n\r\n        Object.keys(avgAudioLevels).forEach(userID => {\r\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\r\n                return;\r\n            }\r\n\r\n            const localAudioLevels = this._localAudioLevelCache[userID];\r\n\r\n            if (!Array.isArray(localAudioLevels)) {\r\n                this._localAudioLevelCache[userID] = [ ];\r\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\r\n                localAudioLevels.shift();\r\n            }\r\n\r\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\r\n        });\r\n\r\n\r\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\r\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\r\n\r\n            localAudioLevels.push(avgAudioLevels[userID]);\r\n\r\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\r\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\r\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\r\n\r\n                    Statistics.sendAnalytics(\r\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\r\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\r\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\r\n                        remoteAudioLevels}`);\r\n                    this._reportedParticipants.push(userID);\r\n                    this._clearUserData(userID);\r\n                }\r\n\r\n                delete this._audioProblemCandidates[userID];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears the data stored for a participant.\r\n     *\r\n     * @param {string} userID - The id of the participant.\r\n     * @returns {void}\r\n     */\r\n    _clearUserData(userID) {\r\n        delete this._localAudioLevelCache[userID];\r\n    }\r\n\r\n    /**\r\n     * Disposes the allocated resources.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    dispose() {\r\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\r\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\r\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\r\n        this._localAudioLevelCache = undefined;\r\n        this._audioProblemCandidates = undefined;\r\n        this._reportedParticipants = undefined;\r\n        this._numberOfRemoteAudioLevelsReceived = undefined;\r\n        this._conference = undefined;\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as VideoType from '../../service/RTC/VideoType';\r\nimport * as ConnectionQualityEvents\r\n    from '../../service/connectivity/ConnectionQualityEvents';\r\nimport {\r\n    createRtpStatsEvent,\r\n    createTransportStatsEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\n\r\nimport Statistics from './statistics';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This will calculate an average for one, named stat and submit it to\r\n * the analytics module when requested. It automatically counts the samples.\r\n */\r\nclass AverageStatReport {\r\n    /**\r\n     * Creates new <tt>AverageStatReport</tt> for given name.\r\n     * @param {string} name that's the name of the event that will be reported\r\n     * to the analytics module.\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.count = 0;\r\n        this.sum = 0;\r\n        this.samples = [];\r\n    }\r\n\r\n    /**\r\n     * Adds the next value that will be included in the average when\r\n     * {@link calculate} is called.\r\n     * @param {number} nextValue\r\n     */\r\n    addNext(nextValue) {\r\n        if (typeof nextValue !== 'number') {\r\n            logger.error(\r\n                `${this.name} - invalid value for idx: ${this.count}`,\r\n                nextValue);\r\n        } else if (!isNaN(nextValue)) {\r\n            this.sum += nextValue;\r\n            this.samples.push(nextValue);\r\n            this.count += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates an average for the samples collected using {@link addNext}.\r\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\r\n     * if no samples were collected.\r\n     */\r\n    calculate() {\r\n        return this.sum / this.count;\r\n    }\r\n\r\n    /**\r\n     * Appends the report to the analytics \"data\" object. The object will be\r\n     * set under <tt>prefix</tt> + {@link this.name} key.\r\n     * @param {Object} report the analytics \"data\" object\r\n     */\r\n    appendReport(report) {\r\n        report[`${this.name}_avg`] = this.calculate();\r\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\r\n    }\r\n\r\n    /**\r\n     * Clears all memory of any samples collected, so that new average can be\r\n     * calculated using this instance.\r\n     */\r\n    reset() {\r\n        this.samples = [];\r\n        this.sum = 0;\r\n        this.count = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Class gathers the stats that are calculated and reported for a\r\n * {@link TraceablePeerConnection} even if it's not currently active. For\r\n * example we want to monitor RTT for the JVB connection while in P2P mode.\r\n */\r\nclass ConnectionAvgStats {\r\n    /**\r\n     * Creates new <tt>ConnectionAvgStats</tt>\r\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\r\n     * @param {boolean} isP2P\r\n     * @param {number} n the number of samples, before arithmetic mean is to be\r\n     * calculated and values submitted to the analytics module.\r\n     */\r\n    constructor(avgRtpStatsReporter, isP2P, n) {\r\n        /**\r\n         * Is this instance for JVB or P2P connection ?\r\n         * @type {boolean}\r\n         */\r\n        this.isP2P = isP2P;\r\n\r\n        /**\r\n         * How many samples are to be included in arithmetic mean calculation.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._n = n;\r\n\r\n        /**\r\n         * The current sample index. Starts from 0 and goes up to {@link _n})\r\n         * when analytics report will be submitted.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._sampleIdx = 0;\r\n\r\n        /**\r\n         * Average round trip time reported by the ICE candidate pair.\r\n         * @type {AverageStatReport}\r\n         */\r\n        this._avgRTT = new AverageStatReport('rtt');\r\n\r\n        /**\r\n         * Map stores average RTT to the JVB reported by remote participants.\r\n         * Mapped per participant id {@link JitsiParticipant.getId}.\r\n         *\r\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\r\n         * <tt>false</tt>.\r\n         *\r\n         * @type {Map<string,AverageStatReport>}\r\n         * @private\r\n         */\r\n        this._avgRemoteRTTMap = new Map();\r\n\r\n        /**\r\n         * The conference for which stats will be collected and reported.\r\n         * @type {JitsiConference}\r\n         * @private\r\n         */\r\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\r\n\r\n        /**\r\n         * The latest average E2E RTT for the JVB connection only.\r\n         *\r\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\r\n         * <tt>false</tt>.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this._avgEnd2EndRTT = undefined;\r\n\r\n        this._onConnectionStats = (tpc, stats) => {\r\n            if (this.isP2P === tpc.isP2P) {\r\n                this._calculateAvgStats(stats);\r\n            }\r\n        };\r\n\r\n        const conference = avgRtpStatsReporter._conference;\r\n\r\n        conference.statistics.addConnectionStatsListener(\r\n            this._onConnectionStats);\r\n\r\n        if (!this.isP2P) {\r\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\r\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n            this._onRemoteStatsUpdated\r\n                = (id, data) => this._processRemoteStats(id, data);\r\n            conference.on(\r\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n                this._onRemoteStatsUpdated);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes next batch of stats.\r\n     * @param {go figure} data\r\n     * @private\r\n     */\r\n    _calculateAvgStats(data) {\r\n        if (!data) {\r\n            logger.error('No stats');\r\n\r\n            return;\r\n        }\r\n\r\n        if (browser.supportsRTTStatistics()) {\r\n            if (data.transport && data.transport.length) {\r\n                this._avgRTT.addNext(data.transport[0].rtt);\r\n            }\r\n        }\r\n\r\n        this._sampleIdx += 1;\r\n\r\n        if (this._sampleIdx >= this._n) {\r\n            if (browser.supportsRTTStatistics()) {\r\n                const conference = this._avgRtpStatsReporter._conference;\r\n\r\n                const batchReport = {\r\n                    p2p: this.isP2P,\r\n                    'conference_size': conference.getParticipantCount()\r\n                };\r\n\r\n                if (data.transport && data.transport.length) {\r\n                    Object.assign(batchReport, {\r\n                        'local_candidate_type':\r\n                            data.transport[0].localCandidateType,\r\n                        'remote_candidate_type':\r\n                            data.transport[0].remoteCandidateType,\r\n                        'transport_type': data.transport[0].type\r\n                    });\r\n                }\r\n\r\n                this._avgRTT.appendReport(batchReport);\r\n\r\n                if (this.isP2P) {\r\n                    // Report RTT diff only for P2P.\r\n                    const jvbEnd2EndRTT = this\r\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\r\n\r\n                    if (!isNaN(jvbEnd2EndRTT)) {\r\n                        // eslint-disable-next-line dot-notation\r\n                        batchReport['rtt_diff']\r\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\r\n                    }\r\n                } else {\r\n                    // Report end to end RTT only for JVB.\r\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\r\n                    const avgLocalRTT = this._avgRTT.calculate();\r\n\r\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\r\n\r\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\r\n                        // eslint-disable-next-line dot-notation\r\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\r\n                    }\r\n                }\r\n\r\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\r\n            }\r\n\r\n            this._resetAvgStats();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\r\n     * participants.\r\n     * @return {number|NaN} NaN if not available (not enough data)\r\n     * @private\r\n     */\r\n    _calculateAvgRemoteRTT() {\r\n        let count = 0, sum = 0;\r\n\r\n        // FIXME should we ignore RTT for participant\r\n        // who \"is having connectivity issues\" ?\r\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\r\n            const avg = remoteAvg.calculate();\r\n\r\n            if (!isNaN(avg)) {\r\n                sum += avg;\r\n                count += 1;\r\n                remoteAvg.reset();\r\n            }\r\n        }\r\n\r\n        return sum / count;\r\n    }\r\n\r\n    /**\r\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\r\n     * RTT towards the JVB reported by each participant.\r\n     * @param {string} id {@link JitsiParticipant.getId}\r\n     * @param {go figure in ConnectionQuality.js} data\r\n     * @private\r\n     */\r\n    _processRemoteStats(id, data) {\r\n        const validData = typeof data.jvbRTT === 'number';\r\n        let rttAvg = this._avgRemoteRTTMap.get(id);\r\n\r\n        if (!rttAvg && validData) {\r\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\r\n            this._avgRemoteRTTMap.set(id, rttAvg);\r\n        }\r\n\r\n        if (validData) {\r\n            rttAvg.addNext(data.jvbRTT);\r\n        } else if (rttAvg) {\r\n            this._avgRemoteRTTMap.delete(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset cache of all averages and {@link _sampleIdx}.\r\n     * @private\r\n     */\r\n    _resetAvgStats() {\r\n        this._avgRTT.reset();\r\n        if (this._avgRemoteRTTMap) {\r\n            this._avgRemoteRTTMap.clear();\r\n        }\r\n        this._sampleIdx = 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    dispose() {\r\n\r\n        const conference = this._avgRtpStatsReporter._conference;\r\n\r\n        conference.statistics.removeConnectionStatsListener(\r\n            this._onConnectionStats);\r\n        if (!this.isP2P) {\r\n            conference.off(\r\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n                this._onRemoteStatsUpdated);\r\n            conference.off(\r\n                ConferenceEvents.USER_LEFT,\r\n                this._onUserLeft);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Reports average RTP statistics values (arithmetic mean) to the analytics\r\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\r\n * of the P2P vs JVB conference modes and submits the values under different\r\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\r\n * P2P mode resets the data collected so far and averages are calculated from\r\n * scratch.\r\n */\r\nexport default class AvgRTPStatsReporter {\r\n    /**\r\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\r\n     * @param {JitsiConference} conference\r\n     * @param {number} n the number of samples, before arithmetic mean is to be\r\n     * calculated and values submitted to the analytics module.\r\n     */\r\n    constructor(conference, n) {\r\n        /**\r\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\r\n         * are to be included in arithmetic mean calculation.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._n = n;\r\n\r\n        if (n > 0) {\r\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\r\n        } else {\r\n            logger.info('Avg RTP stats reports are disabled.');\r\n\r\n            // Do not initialize\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * The current sample index. Starts from 0 and goes up to {@link _n})\r\n         * when analytics report will be submitted.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._sampleIdx = 0;\r\n\r\n        /**\r\n         * The conference for which stats will be collected and reported.\r\n         * @type {JitsiConference}\r\n         * @private\r\n         */\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Average audio upload bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgAudioBitrateUp\r\n            = new AverageStatReport('bitrate_audio_upload');\r\n\r\n        /**\r\n         * Average audio download bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgAudioBitrateDown\r\n            = new AverageStatReport('bitrate_audio_download');\r\n\r\n        /**\r\n         * Average video upload bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgVideoBitrateUp\r\n            = new AverageStatReport('bitrate_video_upload');\r\n\r\n        /**\r\n         * Average video download bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgVideoBitrateDown\r\n            = new AverageStatReport('bitrate_video_download');\r\n\r\n        /**\r\n         * Average upload bandwidth\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgBandwidthUp\r\n            = new AverageStatReport('bandwidth_upload');\r\n\r\n        /**\r\n         * Average download bandwidth\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgBandwidthDown\r\n            = new AverageStatReport('bandwidth_download');\r\n\r\n        /**\r\n         * Average total packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossTotal\r\n            = new AverageStatReport('packet_loss_total');\r\n\r\n        /**\r\n         * Average upload packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossUp\r\n            = new AverageStatReport('packet_loss_upload');\r\n\r\n        /**\r\n         * Average download packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossDown\r\n            = new AverageStatReport('packet_loss_download');\r\n\r\n        /**\r\n         * Average FPS for remote videos\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\r\n\r\n        /**\r\n         * Average FPS for remote screen streaming videos (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteScreenFPS\r\n            = new AverageStatReport('framerate_screen_remote');\r\n\r\n        /**\r\n         * Average FPS for local video (camera)\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\r\n\r\n        /**\r\n         * Average FPS for local screen streaming video (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalScreenFPS\r\n            = new AverageStatReport('framerate_screen_local');\r\n\r\n        /**\r\n         * Average pixels for remote screen streaming videos (reported only if\r\n         * not a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteCameraPixels\r\n            = new AverageStatReport('pixels_remote');\r\n\r\n        /**\r\n         * Average pixels for remote screen streaming videos (reported only if\r\n         * not a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteScreenPixels\r\n            = new AverageStatReport('pixels_screen_remote');\r\n\r\n        /**\r\n         * Average pixels for local video (camera)\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalCameraPixels\r\n            = new AverageStatReport('pixels_local');\r\n\r\n        /**\r\n         * Average pixels for local screen streaming video (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalScreenPixels\r\n            = new AverageStatReport('pixels_screen_local');\r\n\r\n        /**\r\n         * Average connection quality as defined by\r\n         * the {@link ConnectionQuality} module.\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgCQ = new AverageStatReport('connection_quality');\r\n\r\n        this._cachedTransportStats = undefined;\r\n\r\n        this._onLocalStatsUpdated = data => {\r\n            this._calculateAvgStats(data);\r\n            this._maybeSendTransportAnalyticsEvent(data);\r\n        };\r\n        conference.on(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._onLocalStatsUpdated);\r\n\r\n        this._onP2PStatusChanged = () => {\r\n            logger.debug('Resetting average stats calculation');\r\n            this._resetAvgStats();\r\n            this.jvbStatsMonitor._resetAvgStats();\r\n            this.p2pStatsMonitor._resetAvgStats();\r\n        };\r\n        conference.on(\r\n            ConferenceEvents.P2P_STATUS,\r\n            this._onP2PStatusChanged);\r\n\r\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\r\n            // We want to reset only on the transition from false => true,\r\n            // because otherwise those stats are resetted on JVB <=> P2P\r\n            // transition.\r\n            if (newStatus === true) {\r\n                logger.info('Resetting JVB avg RTP stats');\r\n                this._resetAvgJvbStats();\r\n            }\r\n        };\r\n        conference.on(\r\n            ConferenceEvents.JVB121_STATUS,\r\n            this._onJvb121StatusChanged);\r\n\r\n        this.jvbStatsMonitor\r\n            = new ConnectionAvgStats(this, false /* JVB */, n);\r\n\r\n        this.p2pStatsMonitor\r\n            = new ConnectionAvgStats(this, true /* P2P */, n);\r\n    }\r\n\r\n    /**\r\n     * Processes next batch of stats reported on\r\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\r\n     * @param {go figure} data\r\n     * @private\r\n     */\r\n    _calculateAvgStats(data) {\r\n\r\n        if (!data) {\r\n            logger.error('No stats');\r\n\r\n            return;\r\n        }\r\n\r\n        const isP2P = this._conference.isP2PActive();\r\n        const confSize = this._conference.getParticipantCount();\r\n\r\n        if (!isP2P && confSize < 2) {\r\n\r\n            // There's no point in collecting stats for a JVB conference of 1.\r\n            // That happens for short period of time after everyone leaves\r\n            // the room, until Jicofo terminates the session.\r\n            return;\r\n        }\r\n\r\n        /* Uncomment to figure out stats structure\r\n        for (const key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                logger.info(`local stat ${key}: `, data[key]);\r\n            }\r\n        } */\r\n\r\n        const bitrate = data.bitrate;\r\n        const bandwidth = data.bandwidth;\r\n        const packetLoss = data.packetLoss;\r\n        const frameRate = data.framerate;\r\n        const resolution = data.resolution;\r\n\r\n        if (!bitrate) {\r\n            logger.error('No \"bitrate\"');\r\n\r\n            return;\r\n        } else if (!bandwidth) {\r\n            logger.error('No \"bandwidth\"');\r\n\r\n            return;\r\n        } else if (!packetLoss) {\r\n            logger.error('No \"packetloss\"');\r\n\r\n            return;\r\n        } else if (!frameRate) {\r\n            logger.error('No \"framerate\"');\r\n\r\n            return;\r\n        } else if (!resolution) {\r\n            logger.error('No resolution');\r\n\r\n            return;\r\n        }\r\n\r\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\r\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\r\n\r\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\r\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\r\n\r\n        if (browser.supportsBandwidthStatistics()) {\r\n            this._avgBandwidthUp.addNext(bandwidth.upload);\r\n            this._avgBandwidthDown.addNext(bandwidth.download);\r\n        }\r\n\r\n        this._avgPacketLossUp.addNext(packetLoss.upload);\r\n        this._avgPacketLossDown.addNext(packetLoss.download);\r\n        this._avgPacketLossTotal.addNext(packetLoss.total);\r\n\r\n        this._avgCQ.addNext(data.connectionQuality);\r\n\r\n        if (frameRate) {\r\n            this._avgRemoteFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, false /* remote */, VideoType.CAMERA));\r\n            this._avgRemoteScreenFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, false /* remote */, VideoType.DESKTOP));\r\n\r\n            this._avgLocalFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, true /* local */, VideoType.CAMERA));\r\n            this._avgLocalScreenFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, true /* local */, VideoType.DESKTOP));\r\n        }\r\n\r\n        if (resolution) {\r\n            this._avgRemoteCameraPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, false /* remote */, VideoType.CAMERA));\r\n\r\n            this._avgRemoteScreenPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, false /* remote */, VideoType.DESKTOP));\r\n\r\n            this._avgLocalCameraPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, true /* local */, VideoType.CAMERA));\r\n\r\n            this._avgLocalScreenPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, true /* local */, VideoType.DESKTOP));\r\n        }\r\n\r\n        this._sampleIdx += 1;\r\n\r\n        if (this._sampleIdx >= this._n) {\r\n\r\n            const batchReport = {\r\n                p2p: isP2P,\r\n                'conference_size': confSize\r\n            };\r\n\r\n            if (data.transport && data.transport.length) {\r\n                Object.assign(batchReport, {\r\n                    'local_candidate_type':\r\n                        data.transport[0].localCandidateType,\r\n                    'remote_candidate_type':\r\n                        data.transport[0].remoteCandidateType,\r\n                    'transport_type': data.transport[0].type\r\n                });\r\n            }\r\n\r\n            this._avgAudioBitrateUp.appendReport(batchReport);\r\n            this._avgAudioBitrateDown.appendReport(batchReport);\r\n\r\n            this._avgVideoBitrateUp.appendReport(batchReport);\r\n            this._avgVideoBitrateDown.appendReport(batchReport);\r\n\r\n            if (browser.supportsBandwidthStatistics()) {\r\n                this._avgBandwidthUp.appendReport(batchReport);\r\n                this._avgBandwidthDown.appendReport(batchReport);\r\n            }\r\n            this._avgPacketLossUp.appendReport(batchReport);\r\n            this._avgPacketLossDown.appendReport(batchReport);\r\n            this._avgPacketLossTotal.appendReport(batchReport);\r\n\r\n            this._avgRemoteFPS.appendReport(batchReport);\r\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\r\n                this._avgRemoteScreenFPS.appendReport(batchReport);\r\n            }\r\n            this._avgLocalFPS.appendReport(batchReport);\r\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\r\n                this._avgLocalScreenFPS.appendReport(batchReport);\r\n            }\r\n\r\n            this._avgRemoteCameraPixels.appendReport(batchReport);\r\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\r\n                this._avgRemoteScreenPixels.appendReport(batchReport);\r\n            }\r\n            this._avgLocalCameraPixels.appendReport(batchReport);\r\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\r\n                this._avgLocalScreenPixels.appendReport(batchReport);\r\n            }\r\n\r\n            this._avgCQ.appendReport(batchReport);\r\n\r\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\r\n\r\n            this._resetAvgStats();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates average number of pixels for the report\r\n     *\r\n     * @param {map} peerResolutions a map of peer resolutions\r\n     * @param {boolean} isLocal if the average is to be calculated for the local\r\n     * video or <tt>false</tt> if for remote videos.\r\n     * @param {VideoType} videoType\r\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\r\n     * are no samples.\r\n     * @private\r\n     */\r\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\r\n        let peerPixelsSum = 0;\r\n        let peerCount = 0;\r\n        const myID = this._conference.myUserId();\r\n\r\n        for (const peerID of Object.keys(peerResolutions)) {\r\n            if (isLocal ? peerID === myID : peerID !== myID) {\r\n                const participant\r\n                    = isLocal\r\n                        ? null\r\n                        : this._conference.getParticipantById(peerID);\r\n                const videosResolution = peerResolutions[peerID];\r\n\r\n                // Do not continue without participant for non local peerID\r\n                if ((isLocal || participant) && videosResolution) {\r\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\r\n                        videosResolution, participant, videoType);\r\n\r\n                    if (!isNaN(peerAvgPixels)) {\r\n                        peerPixelsSum += peerAvgPixels;\r\n                        peerCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return peerPixelsSum / peerCount;\r\n    }\r\n\r\n    /**\r\n     * Calculate average pixels for either remote or local participant\r\n     * @param {object} videos maps resolution per video SSRC\r\n     * @param {JitsiParticipant|null} participant remote participant or\r\n     * <tt>null</tt> for local video pixels calculation.\r\n     * @param {VideoType} videoType the type of the video for which an average\r\n     * will be calculated.\r\n     * @return {number|NaN} average video pixels of all participant's videos or\r\n     * <tt>NaN</tt> if currently not available\r\n     * @private\r\n     */\r\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\r\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\r\n        let videoTracks = null;\r\n\r\n        // NOTE that this method is supposed to be called for the stats\r\n        // received from the current peerconnection.\r\n        const tpc = this._conference.getActivePeerConnection();\r\n\r\n        if (participant) {\r\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n            if (videoTracks) {\r\n                ssrcs\r\n                    = ssrcs.filter(\r\n                        ssrc => videoTracks.find(\r\n                            track =>\r\n                                !track.isMuted()\r\n                                    && track.getSSRC() === ssrc\r\n                                    && track.videoType === videoType));\r\n            }\r\n        } else {\r\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\r\n            ssrcs\r\n                = ssrcs.filter(\r\n                    ssrc => videoTracks.find(\r\n                        track =>\r\n                            !track.isMuted()\r\n                                && tpc.getLocalSSRC(track) === ssrc\r\n                                && track.videoType === videoType));\r\n        }\r\n\r\n        let peerPixelsSum = 0;\r\n        let peerSsrcCount = 0;\r\n\r\n        for (const ssrc of ssrcs) {\r\n            const peerSsrcPixels\r\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\r\n\r\n            // FPS is reported as 0 for users with no video\r\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\r\n                peerPixelsSum += peerSsrcPixels;\r\n                peerSsrcCount += 1;\r\n            }\r\n        }\r\n\r\n        return peerPixelsSum / peerSsrcCount;\r\n    }\r\n\r\n\r\n    /**\r\n     * Calculates average FPS for the report\r\n     * @param {go figure} frameRate\r\n     * @param {boolean} isLocal if the average is to be calculated for the local\r\n     * video or <tt>false</tt> if for remote videos.\r\n     * @param {VideoType} videoType\r\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\r\n     * @private\r\n     */\r\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\r\n        let peerFpsSum = 0;\r\n        let peerCount = 0;\r\n        const myID = this._conference.myUserId();\r\n\r\n        for (const peerID of Object.keys(frameRate)) {\r\n            if (isLocal ? peerID === myID : peerID !== myID) {\r\n                const participant\r\n                    = isLocal\r\n                        ? null : this._conference.getParticipantById(peerID);\r\n                const videosFps = frameRate[peerID];\r\n\r\n                // Do not continue without participant for non local peerID\r\n                if ((isLocal || participant) && videosFps) {\r\n                    const peerAvgFPS\r\n                        = this._calculatePeerAvgVideoFps(\r\n                            videosFps, participant, videoType);\r\n\r\n                    if (!isNaN(peerAvgFPS)) {\r\n                        peerFpsSum += peerAvgFPS;\r\n                        peerCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return peerFpsSum / peerCount;\r\n    }\r\n\r\n    /**\r\n     * Calculate average FPS for either remote or local participant\r\n     * @param {object} videos maps FPS per video SSRC\r\n     * @param {JitsiParticipant|null} participant remote participant or\r\n     * <tt>null</tt> for local FPS calculation.\r\n     * @param {VideoType} videoType the type of the video for which an average\r\n     * will be calculated.\r\n     * @return {number|NaN} average FPS of all participant's videos or\r\n     * <tt>NaN</tt> if currently not available\r\n     * @private\r\n     */\r\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\r\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\r\n        let videoTracks = null;\r\n\r\n        // NOTE that this method is supposed to be called for the stats\r\n        // received from the current peerconnection.\r\n        const tpc = this._conference.getActivePeerConnection();\r\n\r\n        if (participant) {\r\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n            if (videoTracks) {\r\n                ssrcs\r\n                    = ssrcs.filter(\r\n                        ssrc => videoTracks.find(\r\n                            track => !track.isMuted()\r\n                                && track.getSSRC() === ssrc\r\n                                && track.videoType === videoType));\r\n            }\r\n        } else {\r\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\r\n            ssrcs\r\n                = ssrcs.filter(\r\n                    ssrc => videoTracks.find(\r\n                        track => !track.isMuted()\r\n                            && tpc.getLocalSSRC(track) === ssrc\r\n                            && track.videoType === videoType));\r\n        }\r\n\r\n        let peerFpsSum = 0;\r\n        let peerSsrcCount = 0;\r\n\r\n        for (const ssrc of ssrcs) {\r\n            const peerSsrcFps = Number(videos[ssrc]);\r\n\r\n            // FPS is reported as 0 for users with no video\r\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\r\n                peerFpsSum += peerSsrcFps;\r\n                peerSsrcCount += 1;\r\n            }\r\n        }\r\n\r\n        return peerFpsSum / peerSsrcCount;\r\n    }\r\n\r\n    /**\r\n     * Sends the 'transport.stats' analytics event whenever we detect that\r\n     * there is a change in the local or remote candidate type on the transport\r\n     * that is currently selected.\r\n     * @param {*} data\r\n     * @private\r\n     */\r\n    _maybeSendTransportAnalyticsEvent(data) {\r\n        if (!data || !data.transport || !data.transport.length) {\r\n            return;\r\n        }\r\n        const transportStats = {\r\n            p2p: data.transport[0].p2p,\r\n            'local_candidate_type': data.transport[0].localCandidateType,\r\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\r\n            'transport_type': data.transport[0].type\r\n        };\r\n\r\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\r\n            this._cachedTransportStats = transportStats;\r\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the stats related to JVB connection. Must not be called when in\r\n     * P2P mode, because then the {@link AverageStatReport} instances are\r\n     * tracking P2P stats. Note that this should never happen unless something\r\n     * is wrong with the P2P and JVB121 events.\r\n     * @private\r\n     */\r\n    _resetAvgJvbStats() {\r\n        this._resetAvgStats();\r\n        this.jvbStatsMonitor._resetAvgStats();\r\n    }\r\n\r\n    /**\r\n     * Reset cache of all averages and {@link _sampleIdx}.\r\n     * @private\r\n     */\r\n    _resetAvgStats() {\r\n        this._avgAudioBitrateUp.reset();\r\n        this._avgAudioBitrateDown.reset();\r\n\r\n        this._avgVideoBitrateUp.reset();\r\n        this._avgVideoBitrateDown.reset();\r\n\r\n        this._avgBandwidthUp.reset();\r\n        this._avgBandwidthDown.reset();\r\n\r\n        this._avgPacketLossUp.reset();\r\n        this._avgPacketLossDown.reset();\r\n        this._avgPacketLossTotal.reset();\r\n\r\n        this._avgRemoteFPS.reset();\r\n        this._avgRemoteScreenFPS.reset();\r\n        this._avgLocalFPS.reset();\r\n        this._avgLocalScreenFPS.reset();\r\n\r\n        this._avgRemoteCameraPixels.reset();\r\n        this._avgRemoteScreenPixels.reset();\r\n        this._avgLocalCameraPixels.reset();\r\n        this._avgLocalScreenPixels.reset();\r\n\r\n        this._avgCQ.reset();\r\n\r\n        this._sampleIdx = 0;\r\n    }\r\n\r\n    /**\r\n     * Unregisters all event listeners and stops working.\r\n     */\r\n    dispose() {\r\n        this._conference.off(\r\n            ConferenceEvents.P2P_STATUS,\r\n            this._onP2PStatusChanged);\r\n        this._conference.off(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._onLocalStatsUpdated);\r\n        this._conference.off(\r\n            ConferenceEvents.JVB121_STATUS,\r\n            this._onJvb121StatusChanged);\r\n        this.jvbStatsMonitor.dispose();\r\n        this.p2pStatsMonitor.dispose();\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport SpeakerStats from './SpeakerStats';\r\n\r\n/**\r\n * A collection for tracking speaker stats. Attaches listeners\r\n * to the conference to automatically update on tracked events.\r\n */\r\nexport default class SpeakerStatsCollector {\r\n    /**\r\n     * Initializes a new SpeakerStatsCollector instance.\r\n     *\r\n     * @constructor\r\n     * @param {JitsiConference} conference - The conference to track.\r\n     * @returns {void}\r\n     */\r\n    constructor(conference) {\r\n        this.stats = {\r\n            users: {\r\n\r\n                // userId: SpeakerStats\r\n            },\r\n            dominantSpeakerId: null\r\n        };\r\n\r\n        const userId = conference.myUserId();\r\n\r\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\r\n        this.conference = conference;\r\n\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\r\n            this._onDominantSpeaker.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this._onUserJoin.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this._onUserLeave.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\r\n            this._onDisplayNameChange.bind(this));\r\n        if (conference.xmpp) {\r\n            conference.xmpp.addListener(\r\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\r\n                this._updateStats.bind(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to dominant speaker change events by changing its speaker stats\r\n     * models to reflect the current dominant speaker.\r\n     *\r\n     * @param {string} dominantSpeakerId - The user id of the new\r\n     * dominant speaker.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onDominantSpeaker(dominantSpeakerId) {\r\n        const oldDominantSpeaker\r\n            = this.stats.users[this.stats.dominantSpeakerId];\r\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\r\n\r\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\r\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\r\n        this.stats.dominantSpeakerId = dominantSpeakerId;\r\n    }\r\n\r\n    /**\r\n     * Reacts to user join events by creating a new SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the new user.\r\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onUserJoin(userId, participant) {\r\n        if (participant.isHidden()) {\r\n            return;\r\n        }\r\n\r\n        if (!this.stats.users[userId]) {\r\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to user leave events by updating the associated user's\r\n     * SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the user that left.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onUserLeave(userId) {\r\n        const savedUser = this.stats.users[userId];\r\n\r\n        if (savedUser) {\r\n            savedUser.markAsHasLeft();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to user name change events by updating the last known name\r\n     * tracked in the associated SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the user that left.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onDisplayNameChange(userId, newName) {\r\n        const savedUser = this.stats.users[userId];\r\n\r\n        if (savedUser) {\r\n            savedUser.setDisplayName(newName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return a copy of the tracked SpeakerStats models.\r\n     *\r\n     * @returns {Object} The keys are the user ids and the values are the\r\n     * associated user's SpeakerStats model.\r\n     * @private\r\n     */\r\n    getStats() {\r\n        return this.stats.users;\r\n    }\r\n\r\n    /**\r\n     * Updates of the current stats is requested, passing the new values.\r\n     *\r\n     * @param {Object} newStats - The new values used to update current one.\r\n     * @private\r\n     */\r\n    _updateStats(newStats) {\r\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\r\n            let speakerStatsToUpdate;\r\n            const newParticipant = this.conference.getParticipantById(userId);\r\n\r\n            // we want to ignore hidden participants\r\n            if (!newParticipant || !newParticipant.isHidden()) {\r\n                if (this.stats.users[userId]) {\r\n                    speakerStatsToUpdate = this.stats.users[userId];\r\n\r\n                    if (!speakerStatsToUpdate.getDisplayName()) {\r\n                        speakerStatsToUpdate\r\n                            .setDisplayName(newStats[userId].displayName);\r\n                    }\r\n                } else {\r\n                    speakerStatsToUpdate = new SpeakerStats(\r\n                        userId, newStats[userId].displayName);\r\n                    this.stats.users[userId] = speakerStatsToUpdate;\r\n                    speakerStatsToUpdate.markAsHasLeft();\r\n                }\r\n            }\r\n\r\n            speakerStatsToUpdate.totalDominantSpeakerTime\r\n                = newStats[userId].totalDominantSpeakerTime;\r\n        }\r\n    }\r\n}\r\n","const AudioRecorder = require('./audioRecorder');\r\nconst SphinxService = require(\r\n    './transcriptionServices/SphinxTranscriptionService');\r\n\r\nconst BEFORE_STATE = 'before';\r\nconst RECORDING_STATE = 'recording';\r\nconst TRANSCRIBING_STATE = 'transcribing';\r\nconst FINISHED_STATE = 'finished';\r\n\r\n// the amount of characters each line in the transcription will have\r\nconst MAXIMUM_SENTENCE_LENGTH = 80;\r\n\r\n/**\r\n * This is the main object for handing the Transcription. It interacts with\r\n * the audioRecorder to record every person in a conference and sends the\r\n * recorder audio to a transcriptionService. The returned speech-to-text result\r\n * will be merged to create a transcript\r\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\r\n */\r\nfunction Transcriber() {\r\n    // the object which can record all audio in the conference\r\n    this.audioRecorder = new AudioRecorder();\r\n\r\n    // this object can send the recorder audio to a speech-to-text service\r\n    this.transcriptionService = new SphinxService();\r\n\r\n    // holds a counter to keep track if merging can start\r\n    this.counter = null;\r\n\r\n    // holds the date when transcription started which makes it possible\r\n    // to calculate the offset between recordings\r\n    this.startTime = null;\r\n\r\n    // will hold the transcription once it is completed\r\n    this.transcription = null;\r\n\r\n    // this will be a method which will be called once the transcription is done\r\n    // with the transcription as parameter\r\n    this.callback = null;\r\n\r\n    // stores all the retrieved speech-to-text results to merge together\r\n    // this value will store an Array<Word> object\r\n    this.results = [];\r\n\r\n    // Stores the current state of the transcription process\r\n    this.state = BEFORE_STATE;\r\n\r\n    // Used in the updateTranscription method to add a new line when the\r\n    // sentence becomes to long\r\n    this.lineLength = 0;\r\n}\r\n\r\n/**\r\n * Method to start the transcription process. It will tell the audioRecorder\r\n * to start storing all audio streams and record the start time for merging\r\n * purposes\r\n */\r\nTranscriber.prototype.start = function start() {\r\n    if (this.state !== BEFORE_STATE) {\r\n        throw new Error(\r\n            `The transcription can only start when it's in the \"${\r\n                BEFORE_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n    this.state = RECORDING_STATE;\r\n    this.audioRecorder.start();\r\n    this.startTime = new Date();\r\n};\r\n\r\n/**\r\n * Method to stop the transcription process. It will tell the audioRecorder to\r\n * stop, and get all the recorded audio to send it to the transcription service\r\n\r\n * @param callback a callback which will receive the transcription\r\n */\r\nTranscriber.prototype.stop = function stop(callback) {\r\n    if (this.state !== RECORDING_STATE) {\r\n        throw new Error(\r\n            `The transcription can only stop when it's in the \"${\r\n                RECORDING_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n\r\n    // stop the recording\r\n    console.log('stopping recording and sending audio files');\r\n    this.audioRecorder.stop();\r\n\r\n    // and send all recorded audio the the transcription service\r\n    const callBack = blobCallBack.bind(null, this);\r\n\r\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\r\n        this.transcriptionService.send(recordingResult, callBack);\r\n        this.counter++;\r\n    });\r\n\r\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\r\n    this.state = TRANSCRIBING_STATE;\r\n\r\n    // and store the callback for later\r\n    this.callback = callback;\r\n};\r\n\r\n/**\r\n * This method gets the answer from the transcription service, calculates the\r\n * offset and adds is to every Word object. It will also start the merging\r\n * when every send request has been received\r\n *\r\n * note: Make sure to bind this as a Transcription object\r\n * @param {Transcriber} transcriber the transcriber instance\r\n * @param {RecordingResult} answer a RecordingResult object with a defined\r\n * WordArray\r\n */\r\nfunction blobCallBack(transcriber, answer) {\r\n    console.log(\r\n        'retrieved an answer from the transcription service. The answer has an'\r\n            + ` array of length: ${answer.wordArray.length}`);\r\n\r\n    // first add the offset between the start of the transcription and\r\n    // the start of the recording to all start and end times\r\n    if (answer.wordArray.length > 0) {\r\n        let offset = answer.startTime.getUTCMilliseconds()\r\n            - transcriber.startTime.getUTCMilliseconds();\r\n\r\n        // transcriber time will always be earlier\r\n\r\n        if (offset < 0) {\r\n            offset = 0; // presume 0 if it somehow not earlier\r\n        }\r\n\r\n        let array = '[';\r\n\r\n        answer.wordArray.forEach(wordObject => {\r\n            wordObject.begin += offset;\r\n            wordObject.end += offset;\r\n            array += `${wordObject.word},`;\r\n        });\r\n        array += ']';\r\n        console.log(array);\r\n\r\n        // give a name value to the Array object so that the merging can access\r\n        // the name value without having to use the whole recordingResult object\r\n        // in the algorithm\r\n        answer.wordArray.name = answer.name;\r\n    }\r\n\r\n    // then store the array and decrease the counter\r\n    transcriber.results.push(answer.wordArray);\r\n    transcriber.counter--;\r\n    console.log(`current counter: ${transcriber.counter}`);\r\n\r\n    // and check if all results have been received.\r\n    transcriber.maybeMerge();\r\n}\r\n\r\n/**\r\n * this method will check if the counter is zero. If it is, it will call\r\n * the merging method\r\n */\r\nTranscriber.prototype.maybeMerge = function() {\r\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\r\n        // make sure to include the events in the result arrays before\r\n        // merging starts\r\n        this.merge();\r\n    }\r\n};\r\n\r\n/**\r\n * This method will merge all speech-to-text arrays together in one\r\n * readable transcription string\r\n */\r\nTranscriber.prototype.merge = function() {\r\n    console.log(\r\n        `starting merge process!\\n The length of the array: ${\r\n            this.results.length}`);\r\n    this.transcription = '';\r\n\r\n    // the merging algorithm will look over all Word objects who are at pos 0 in\r\n    // every array. It will then select the one closest in time to the\r\n    // previously placed word, while removing the selected word from its array\r\n    // note: words can be skipped the skipped word's begin and end time somehow\r\n    // end up between the closest word start and end time\r\n    const arrays = this.results;\r\n\r\n    // arrays of Word objects\r\n    const potentialWords = []; // array of the first Word objects\r\n    // check if any arrays are already empty and remove them\r\n\r\n    hasPopulatedArrays(arrays);\r\n\r\n    // populate all the potential Words for a first time\r\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\r\n\r\n    // keep adding words to transcription until all arrays are exhausted\r\n    while (hasPopulatedArrays(arrays)) {\r\n        // first select the lowest array;\r\n        let lowestWordArray = arrays[0];\r\n\r\n        arrays.forEach(wordArray => {\r\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\r\n                lowestWordArray = wordArray;\r\n            }\r\n        });\r\n\r\n        // put the word in the transcription\r\n        let wordToAdd = lowestWordArray.shift();\r\n\r\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\r\n\r\n        // keep going until a word in another array has a smaller time\r\n        // or the array is empty\r\n        while (lowestWordArray.length > 0) {\r\n            let foundSmaller = false;\r\n            const wordToCompare = lowestWordArray[0].begin;\r\n\r\n            arrays.forEach(wordArray => {\r\n                if (wordArray[0].begin < wordToCompare) {\r\n                    foundSmaller = true;\r\n                }\r\n            });\r\n\r\n            // add next word if no smaller time has been found\r\n            if (foundSmaller) {\r\n                break;\r\n            }\r\n\r\n            wordToAdd = lowestWordArray.shift();\r\n            this.updateTranscription(wordToAdd, null);\r\n        }\r\n\r\n    }\r\n\r\n    // set the state to finished and do the necessary left-over tasks\r\n    this.state = FINISHED_STATE;\r\n    if (this.callback) {\r\n        this.callback(this.transcription);\r\n    }\r\n};\r\n\r\n/**\r\n * Appends a word object to the transcription. It will make a new line with a\r\n * name if a name is specified\r\n * @param {Word} word the Word object holding the word to append\r\n * @param {String|null} name the name of a new speaker. Null if not applicable\r\n */\r\nTranscriber.prototype.updateTranscription = function(word, name) {\r\n    if (name !== undefined && name !== null) {\r\n        this.transcription += `\\n${name}:`;\r\n        this.lineLength = name.length + 1; // +1 for the semi-colon\r\n    }\r\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\r\n        this.transcription += '\\n    ';\r\n        this.lineLength = 4; // because of the 4 spaces after the new line\r\n    }\r\n    this.transcription += ` ${word.word}`;\r\n    this.lineLength += word.word.length + 1; // +1 for the space\r\n};\r\n\r\n/**\r\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\r\n * All zero-element arrays inside will be removed\r\n * If any non-zero-element arrays are found, the method will return true.\r\n * otherwise it will return false\r\n * @param {Array<Array>} twoDimensionalArray the array to check\r\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\r\n */\r\nfunction hasPopulatedArrays(twoDimensionalArray) {\r\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\r\n        if (twoDimensionalArray[i].length === 0) {\r\n            twoDimensionalArray.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    return twoDimensionalArray.length > 0;\r\n}\r\n\r\n/**\r\n * Push a word to the right location in a sorted array. The array is sorted\r\n * from lowest to highest start time. Every word is stored in an object which\r\n * includes the name of the person saying the word.\r\n *\r\n * @param {Array<Word>} array the sorted array to push to\r\n * @param {Word} word the word to push into the array\r\n */\r\nfunction pushWordToSortedArray(array, word) {\r\n    if (array.length === 0) {\r\n        array.push(word);\r\n    } else {\r\n        if (array[array.length - 1].begin <= word.begin) {\r\n            array.push(word);\r\n\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n            if (word.begin < array[i].begin) {\r\n                array.splice(i, 0, word);\r\n\r\n                return;\r\n            }\r\n        }\r\n        array.push(word); // fail safe\r\n    }\r\n}\r\n\r\n/**\r\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\r\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\r\n * audiostream, it will not be added by the audioRecorder\r\n * @param {JitsiTrack} track the track to give to the audioRecorder\r\n */\r\nTranscriber.prototype.addTrack = function(track) {\r\n    this.audioRecorder.addTrack(track);\r\n};\r\n\r\n/**\r\n * Remove the given track from the auioRecorder\r\n * @param track\r\n */\r\nTranscriber.prototype.removeTrack = function(track) {\r\n    this.audioRecorder.removeTrack(track);\r\n};\r\n\r\n/**\r\n * Will return the created transcription if it's avialable or throw an error\r\n * when it's not done yet\r\n * @returns {String} the transcription as a String\r\n */\r\nTranscriber.prototype.getTranscription = function() {\r\n    if (this.state !== FINISHED_STATE) {\r\n        throw new Error(\r\n            `The transcription can only be retrieved when it's in the \"${\r\n                FINISHED_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n\r\n    return this.transcription;\r\n};\r\n\r\n/**\r\n * Returns the current state of the transcription process\r\n */\r\nTranscriber.prototype.getState = function() {\r\n    return this.state;\r\n};\r\n\r\n/**\r\n * Resets the state to the \"before\" state, such that it's again possible to\r\n * call the start method\r\n */\r\nTranscriber.prototype.reset = function() {\r\n    this.state = BEFORE_STATE;\r\n    this.counter = null;\r\n    this.transcription = null;\r\n    this.startTime = null;\r\n    this.callback = null;\r\n    this.results = [];\r\n    this.lineLength = 0;\r\n};\r\n\r\nmodule.exports = Transcriber;\r\n","import Statistics from '../statistics/statistics';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\r\n * the versions of conferencing system components in given\r\n * <tt>JitsiConference</tt>.\r\n * @param conference <tt>JitsiConference</tt> instance which will be used to\r\n *        listen for focus presence updates.\r\n * @constructor\r\n */\r\nexport default function ComponentsVersions(conference) {\r\n\r\n    this.versions = {};\r\n\r\n    this.conference = conference;\r\n    this.conference.addCommandListener(\r\n        'versions', this.processVersions.bind(this));\r\n}\r\n\r\nComponentsVersions.prototype.processVersions\r\n    = function(versions, mucResource, mucJid) {\r\n        if (!this.conference._isFocus(mucJid)) {\r\n            logger.warn(\r\n                `Received versions not from the focus user: ${versions}`,\r\n                mucJid);\r\n\r\n            return;\r\n        }\r\n\r\n        const log = [];\r\n\r\n        versions.children.forEach(component => {\r\n\r\n            const name = component.attributes.name;\r\n            const version = component.value;\r\n\r\n            if (this.versions[name] !== version) {\r\n                this.versions[name] = version;\r\n                logger.info(`Got ${name} version: ${version}`);\r\n\r\n                log.push({\r\n                    id: 'component_version',\r\n                    component: name,\r\n                    version\r\n                });\r\n            }\r\n        });\r\n\r\n        // logs versions to stats\r\n        if (log.length > 0) {\r\n            Statistics.sendLog(JSON.stringify(log));\r\n        }\r\n    };\r\n\r\n/**\r\n * Obtains the version of conferencing system component.\r\n * @param componentName the name of the component for which we want to obtain\r\n *        the version.\r\n * @returns {String} which describes the version of the component identified by\r\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\r\n */\r\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\r\n    return this.versions[componentName];\r\n};\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nconst logger = getLogger(__filename);\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\r\nimport * as Constants from './VideoSIPGWConstants';\r\n\r\n/**\r\n * Main video SIP GW handler. Stores references of all created sessions.\r\n */\r\nexport default class VideoSIPGW {\r\n\r\n    /**\r\n     * Creates new handler.\r\n     *\r\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\r\n     */\r\n    constructor(chatRoom) {\r\n        this.chatRoom = chatRoom;\r\n        this.eventEmitter = chatRoom.eventEmitter;\r\n        logger.debug('creating VideoSIPGW');\r\n        this.sessions = {};\r\n\r\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\r\n\r\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\r\n        // more than one VideoSIPGW can be created per JitsiConference,\r\n        // so we don't bother to cleanup\r\n        chatRoom.addPresenceListener('jibri-sip-call-state',\r\n            this.handleJibriSIPState.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Handles presence nodes with name: jibri-sip-call-state.\r\n     *\r\n     * @param {Object} node the presence node Object to handle.\r\n     * Object representing part of the presence received over xmpp.\r\n     */\r\n    handleJibriSIPState(node) {\r\n        const attributes = node.attributes;\r\n\r\n        if (!attributes) {\r\n            return;\r\n        }\r\n\r\n        logger.debug('Handle video sip gw state : ', attributes);\r\n\r\n        const newState = attributes.state;\r\n\r\n        if (newState === this.state) {\r\n            return;\r\n        }\r\n\r\n        switch (newState) {\r\n        case Constants.STATE_ON:\r\n        case Constants.STATE_OFF:\r\n        case Constants.STATE_PENDING:\r\n        case Constants.STATE_RETRYING:\r\n        case Constants.STATE_FAILED: {\r\n            const address = attributes.sipaddress;\r\n\r\n            if (!address) {\r\n                return;\r\n            }\r\n\r\n            // find the corresponding session and set its state\r\n            const session = this.sessions[address];\r\n\r\n            if (session) {\r\n                session.setState(newState, attributes.failure_reason);\r\n            } else {\r\n                logger.warn('Video SIP GW session not found:', address);\r\n            }\r\n        }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates new session and stores its reference if it does not exist or\r\n     * returns an error otherwise.\r\n     *\r\n     * @param {string} sipAddress - The sip address to use.\r\n     * @param {string} displayName - The display name to use.\r\n     * @returns {JitsiVideoSIPGWSession|Error}\r\n     */\r\n    createVideoSIPGWSession(sipAddress, displayName) {\r\n        if (this.sessions[sipAddress]) {\r\n            logger.warn('There was already a Video SIP GW session for address',\r\n                sipAddress);\r\n\r\n            return new Error(Constants.ERROR_SESSION_EXISTS);\r\n        }\r\n\r\n        const session = new JitsiVideoSIPGWSession(\r\n            sipAddress, displayName, this.chatRoom);\r\n\r\n        session.addStateListener(this.sessionStateChangeListener);\r\n\r\n        this.sessions[sipAddress] = session;\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * Listener for session state changed. When a session goes to off or failed\r\n     * we delete its reference.\r\n     *\r\n     * @param {options} event - { address, oldState, newState, displayName }\r\n     */\r\n    sessionStateChanged(event) {\r\n        const address = event.address;\r\n\r\n        if (event.newState === Constants.STATE_OFF\r\n            || event.newState === Constants.STATE_FAILED) {\r\n            const session = this.sessions[address];\r\n\r\n            if (!session) {\r\n                logger.error('Missing Video SIP GW session with address:',\r\n                    address);\r\n\r\n                return;\r\n            }\r\n\r\n            session.removeStateListener(this.sessionStateChangeListener);\r\n            delete this.sessions[address];\r\n        }\r\n\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\r\n            event);\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The event name for current sip video session state changed.\r\n * @type {string} event name for sip video session state changed.\r\n */\r\nconst STATE_CHANGED = 'STATE_CHANGED';\r\n\r\n/**\r\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\r\n * When session is in OFF or FAILED stated it cannot be used anymore.\r\n */\r\nexport default class JitsiVideoSIPGWSession extends Listenable {\r\n\r\n    /**\r\n     * Creates new session with the desired sip address and display name.\r\n     *\r\n     * @param {string} sipAddress - The sip address to use when\r\n     * starting the session.\r\n     * @param {string} displayName - The display name to use for\r\n     * that participant.\r\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\r\n     */\r\n    constructor(sipAddress, displayName, chatRoom) {\r\n        super();\r\n\r\n        this.sipAddress = sipAddress;\r\n        this.displayName = displayName;\r\n        this.chatRoom = chatRoom;\r\n\r\n        /*\r\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\r\n         * the session enters this state when it was in STATE_ON and was stopped\r\n         * and such session cannot be used anymore.\r\n         *\r\n         * @type {VideoSIPGWConstants|undefined}\r\n         */\r\n        this.state = undefined;\r\n    }\r\n\r\n    /**\r\n     * Stops the current session.\r\n     */\r\n    stop() {\r\n        if (this.state === VideoSIPGWConstants.STATE_OFF\r\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\r\n            logger.warn('Video SIP GW session already stopped or failed!');\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendJibriIQ('stop');\r\n    }\r\n\r\n    /**\r\n     * Starts a new session. Sends an iq to the focus.\r\n     */\r\n    start() {\r\n        // if state is off, this session was active for some reason\r\n        // and we should create new one, rather than reusing it\r\n        if (this.state === VideoSIPGWConstants.STATE_ON\r\n            || this.state === VideoSIPGWConstants.STATE_OFF\r\n            || this.state === VideoSIPGWConstants.STATE_PENDING\r\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\r\n            logger.warn('Video SIP GW session already started!');\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendJibriIQ('start');\r\n    }\r\n\r\n    /**\r\n     * Changes the state of this session.\r\n     *\r\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\r\n     * @param {string} [optional] failureReason - The reason why a failure state\r\n     * was entered.\r\n     * @returns {void}\r\n     */\r\n    setState(newState, failureReason) {\r\n        if (newState === this.state) {\r\n            return;\r\n        }\r\n\r\n        const oldState = this.state;\r\n\r\n        this.state = newState;\r\n        this.eventEmitter.emit(STATE_CHANGED,\r\n            {\r\n                address: this.sipAddress,\r\n                failureReason,\r\n                oldState,\r\n                newState: this.state,\r\n                displayName: this.displayName\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Subscribes the passed listener to the event for state change of this\r\n     * session.\r\n     *\r\n     * @param {Function} listener - The function that will receive the event.\r\n     */\r\n    addStateListener(listener) {\r\n        this.addListener(STATE_CHANGED, listener);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes the passed handler.\r\n     *\r\n     * @param {Function} listener - The function to be removed.\r\n     */\r\n    removeStateListener(listener) {\r\n        this.removeListener(STATE_CHANGED, listener);\r\n    }\r\n\r\n    /**\r\n     * Sends a jibri command using an iq.\r\n     *\r\n     * @private\r\n     * @param {string} action - The action to send ('start' or 'stop').\r\n     */\r\n    _sendJibriIQ(action) {\r\n        const attributes = {\r\n            'xmlns': 'http://jitsi.org/protocol/jibri',\r\n            'action': action,\r\n            sipaddress: this.sipAddress\r\n        };\r\n\r\n        attributes.displayname = this.displayName;\r\n\r\n        const iq = $iq({\r\n            to: this.chatRoom.focusMucJid,\r\n            type: 'set' })\r\n            .c('jibri', attributes)\r\n            .up();\r\n\r\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\r\n        this.chatRoom.connection.sendIQ(\r\n            iq,\r\n            () => {}, // eslint-disable-line no-empty-function\r\n            error => {\r\n                logger.error(\r\n                    `Failed to ${action} video SIP GW session, error: `, error);\r\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\r\n            });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport RTC from '../RTC/RTC';\r\nimport Statistics from '../statistics/statistics';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\r\n// i.e. audioLevel > 0.008\r\nconst DETECTION_TIMEOUT = 3000;\r\n\r\n\r\n/**\r\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\r\n *\r\n * @returns Promise<Object> - Object containing information about the found device.\r\n */\r\nexport default function getActiveAudioDevice() {\r\n\r\n    return new Promise(resolve => {\r\n        RTC.enumerateDevices(devices => {\r\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\r\n            const devicePromiseArray = [];\r\n\r\n\r\n            for (const micDevice of audioDevices) {\r\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\r\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\r\n\r\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\r\n                    // that's  why only take p.value[0].\r\n                    const track = tracks[0];\r\n                    const originalStream = track.getOriginalStream();\r\n\r\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\r\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\r\n                        Statistics.stopLocalStats(originalStream);\r\n                    });\r\n\r\n                    return track;\r\n                });\r\n\r\n                devicePromiseArray.push(devicePromise);\r\n            }\r\n\r\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\r\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\r\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\r\n\r\n\r\n                const availableDevices = successfulPromises.map(p => p.value);\r\n                const rejectReasons = rejectedPromises.map(p => p.value);\r\n\r\n                for (const reason of rejectReasons) {\r\n                    logger.error('Failed to acquire audio device with error: ', reason);\r\n                }\r\n\r\n                // Setup event handlers for monitored devices.\r\n                for (const device of availableDevices) {\r\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\r\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\r\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\r\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\r\n                        // no input.\r\n                        if (audioLevel > 0.008) {\r\n                            stopActiveDevices(availableDevices);\r\n                            resolve({ deviceId: device.deviceId,\r\n                                deviceLabel: device.track.label });\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\r\n                setTimeout(() => {\r\n                    stopActiveDevices(availableDevices);\r\n                    resolve({\r\n                        deviceId: '',\r\n                        deviceLabel: '' }\r\n                    );\r\n                }, DETECTION_TIMEOUT);\r\n\r\n            });\r\n\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Stop the streams of the provided JitsiLocalTracks.\r\n *\r\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\r\n * @returns {void}\r\n */\r\nfunction stopActiveDevices(deviceList) {\r\n    for (const device of deviceList) {\r\n        device.stopStream();\r\n    }\r\n}\r\n","/* globals $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport RTC from '../RTC/RTC';\r\n\r\nimport ProxyConnectionPC from './ProxyConnectionPC';\r\nimport { ACTIONS } from './constants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\r\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\r\n * and assumes IQs to be used for communication.\r\n */\r\nexport default class ProxyConnectionService {\r\n    /**\r\n     * Initializes a new {@code ProxyConnectionService} instance.\r\n     *\r\n     * @param {Object} options - Values to initialize the instance with.\r\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\r\n     * video should be returned as a desktop stream. Defaults to false.\r\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\r\n     * for the peer connection.\r\n     * @param {JitsiConnection} [options.jitsiConnection] - The\r\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\r\n     * the P2P connection.\r\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\r\n     * remote video stream has been received and converted to a\r\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\r\n     * @param {Function} options.onSendMessage - Callback to invoke when a\r\n     * message has to be sent (signaled) out. The arguments passed in are the\r\n     * jid to send the message to and the message\r\n     */\r\n    constructor(options = {}) {\r\n        const {\r\n            jitsiConnection,\r\n            ...otherOptions\r\n        } = options;\r\n\r\n        /**\r\n         * Holds a reference to the collection of all callbacks.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this._options = {\r\n            iceConfig: jitsiConnection\r\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\r\n            ...otherOptions\r\n        };\r\n\r\n        /**\r\n         * The active instance of {@code ProxyConnectionService}.\r\n         *\r\n         * @type {ProxyConnectionPC|null}\r\n         */\r\n        this._peerConnection = null;\r\n\r\n        // Bind event handlers so they are only bound once for every instance.\r\n        this._onFatalError = this._onFatalError.bind(this);\r\n        this._onSendMessage = this._onSendMessage.bind(this);\r\n        this._onRemoteStream = this._onRemoteStream.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a message object regarding a proxy connection to create a new\r\n     * proxy connection or update and existing connection.\r\n     *\r\n     * @param {Object} message - A message object regarding establishing or\r\n     * updating a proxy connection.\r\n     * @param {Object} message.data - An object containing additional message\r\n     * details.\r\n     * @param {string} message.data.iq - The stringified iq which explains how\r\n     * and what to update regarding the proxy connection.\r\n     * @param {string} message.from - The message sender's full jid. Used for\r\n     * sending replies.\r\n     * @returns {void}\r\n     */\r\n    processMessage(message) {\r\n        const peerJid = message.from;\r\n\r\n        if (!peerJid) {\r\n            return;\r\n        }\r\n\r\n        // If a proxy connection has already been established and messages come\r\n        // from another peer jid then those messages should be replied to with\r\n        // a rejection.\r\n        if (this._peerConnection\r\n            && this._peerConnection.getPeerJid() !== peerJid) {\r\n            this._onFatalError(\r\n                peerJid,\r\n                ACTIONS.CONNECTION_ERROR,\r\n                'rejected'\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        const iq = this._convertStringToXML(message.data.iq);\r\n        const $jingle = iq && iq.find('jingle');\r\n        const action = $jingle && $jingle.attr('action');\r\n\r\n        if (action === ACTIONS.INITIATE) {\r\n            this._peerConnection = this._createPeerConnection(peerJid, {\r\n                isInitiator: false,\r\n                receiveVideo: true\r\n            });\r\n        }\r\n\r\n        // Truthy check for peer connection added to protect against possibly\r\n        // receiving actions before an ACTIONS.INITIATE.\r\n        if (this._peerConnection) {\r\n            this._peerConnection.processMessage($jingle);\r\n        }\r\n\r\n        // Take additional steps to ensure the peer connection is cleaned up\r\n        // if it is to be closed.\r\n        if (action === ACTIONS.CONNECTION_ERROR\r\n            || action === ACTIONS.UNAVAILABLE\r\n            || action === ACTIONS.TERMINATE) {\r\n            this._selfCloseConnection();\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Instantiates and initiates a proxy peer connection.\r\n     *\r\n     * @param {string} peerJid - The jid of the remote client that should\r\n     * receive messages.\r\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\r\n     * send through to the peer.\r\n     * @returns {void}\r\n     */\r\n    start(peerJid, localTracks = []) {\r\n        this._peerConnection = this._createPeerConnection(peerJid, {\r\n            isInitiator: true,\r\n            receiveVideo: false\r\n        });\r\n\r\n        this._peerConnection.start(localTracks);\r\n    }\r\n\r\n    /**\r\n     * Terminates any active proxy peer connection.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        if (this._peerConnection) {\r\n            this._peerConnection.stop();\r\n        }\r\n\r\n        this._peerConnection = null;\r\n    }\r\n\r\n    /**\r\n     * Transforms a stringified xML into a XML wrapped in jQuery.\r\n     *\r\n     * @param {string} xml - The XML in string form.\r\n     * @private\r\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\r\n     * if an error is encountered during transformation.\r\n     */\r\n    _convertStringToXML(xml) {\r\n        try {\r\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\r\n\r\n            return $(xmlDom);\r\n        } catch (e) {\r\n            logger.error('Attempted to convert incorrectly formatted xml');\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\r\n     *\r\n     * @param {string} peerJid - The jid of the remote peer with which the\r\n     * {@code ProxyConnectionPC} will be established with.\r\n     * @param {Object} options - Additional defaults to instantiate the\r\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\r\n     * for more details.\r\n     * @private\r\n     * @returns {ProxyConnectionPC}\r\n     */\r\n    _createPeerConnection(peerJid, options = {}) {\r\n        if (!peerJid) {\r\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\r\n        }\r\n\r\n        const pcOptions = {\r\n            iceConfig: this._options.iceConfig,\r\n            onError: this._onFatalError,\r\n            onRemoteStream: this._onRemoteStream,\r\n            onSendMessage: this._onSendMessage,\r\n            peerJid,\r\n            ...options\r\n        };\r\n\r\n        return new ProxyConnectionPC(pcOptions);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when an error occurs that should cause\r\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\r\n     * connected. Sends an error message/reply back to the peer.\r\n     *\r\n     * @param {string} peerJid - The peer jid with which the connection was\r\n     * attempted or started, and to which an iq with error details should be\r\n     * sent.\r\n     * @param {string} errorType - The constant indicating the type of the error\r\n     * that occured.\r\n     * @param {string} details - Optional additional data about the error.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onFatalError(peerJid, errorType, details = '') {\r\n        logger.error(\r\n            'Received a proxy connection error', peerJid, errorType, details);\r\n\r\n        const iq = $iq({\r\n            to: peerJid,\r\n            type: 'set'\r\n        })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: errorType\r\n            })\r\n            .c('details')\r\n            .t(details)\r\n            .up();\r\n\r\n        this._onSendMessage(peerJid, iq);\r\n\r\n        if (this._peerConnection\r\n            && this._peerConnection.getPeerJid() === peerJid) {\r\n            this._selfCloseConnection();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\r\n     * has offered a media stream. The stream is converted into a\r\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\r\n     * callback is defined.\r\n     *\r\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\r\n     * for the peer's media stream.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onRemoteStream(jitsiRemoteTrack) {\r\n        if (!this._options.onRemoteStream) {\r\n            logger.error('Remote track received without callback.');\r\n            jitsiRemoteTrack.dispose();\r\n\r\n            return;\r\n        }\r\n\r\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\r\n        let videoType;\r\n\r\n        if (isVideo) {\r\n            videoType = this._options.convertVideoToDesktop\r\n                ? VideoType.DESKTOP : VideoType.CAMERA;\r\n        }\r\n\r\n        // Grab the webrtc media stream and pipe it through the same processing\r\n        // that would occur for a locally obtained media stream.\r\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\r\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\r\n            [\r\n                {\r\n                    deviceId:\r\n                        `proxy:${this._peerConnection.getPeerJid()}`,\r\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\r\n                    sourceType: 'proxy',\r\n                    stream: mediaStream,\r\n                    track: mediaStream.getVideoTracks()[0],\r\n                    videoType\r\n                }\r\n            ]);\r\n\r\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\r\n    }\r\n\r\n    /**\r\n     * Formats and forwards a message an iq to be sent to a peer jid.\r\n     *\r\n     * @param {string} peerJid - The jid the iq should be sent to.\r\n     * @param {Object} iq - The iq which would be sent to the peer jid.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSendMessage(peerJid, iq) {\r\n        if (!this._options.onSendMessage) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const stringifiedIq\r\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\r\n\r\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\r\n        } catch (e) {\r\n            logger.error('Attempted to send an incorrectly formatted iq.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _selfCloseConnection() {\r\n        this.stop();\r\n\r\n        this._options.onConnectionClosed\r\n            && this._options.onConnectionClosed();\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport RTC from '../RTC/RTC';\r\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\r\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\r\n\r\nimport { ACTIONS } from './constants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\r\n * an XMPP connection. It is being re-used for consistency with the rest of the\r\n * codebase and to leverage existing peer connection event handling. Also\r\n * this class provides a facade to hide most of the API for\r\n * {@code JingleSessionPC}.\r\n */\r\nexport default class ProxyConnectionPC {\r\n    /**\r\n     * Initializes a new {@code ProxyConnectionPC} instance.\r\n     *\r\n     * @param {Object} options - Values to initialize the instance with.\r\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\r\n     * for the peer connection.\r\n     * @param {boolean} [options.isInitiator] - If true, the local client should\r\n     * send offers. If false, the local client should send answers. Defaults to\r\n     * false.\r\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\r\n     * remote media stream has been received through the peer connection.\r\n     * @param {string} options.peerJid - The jid of the remote client with which\r\n     * the peer connection is being establish and which should receive direct\r\n     * messages regarding peer connection updates.\r\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\r\n     * connection should accept incoming video streams. Defaults to false.\r\n     * @param {Function} options.onSendMessage - Callback to invoke when a\r\n     * message has to be sent (signaled) out.\r\n     */\r\n    constructor(options = {}) {\r\n        this._options = {\r\n            iceConfig: {},\r\n            isInitiator: false,\r\n            receiveAudio: false,\r\n            receiveVideo: false,\r\n            ...options\r\n        };\r\n\r\n        /**\r\n         * Instances of {@code JitsiTrack} associated with this instance of\r\n         * {@code ProxyConnectionPC}.\r\n         *\r\n         * @type {Array<JitsiTrack>}\r\n         */\r\n        this._tracks = [];\r\n\r\n        /**\r\n         * The active instance of {@code JingleSessionPC}.\r\n         *\r\n         * @type {JingleSessionPC|null}\r\n         */\r\n        this._peerConnection = null;\r\n\r\n        // Bind event handlers so they are only bound once for every instance.\r\n        this._onError = this._onError.bind(this);\r\n        this._onRemoteStream = this._onRemoteStream.bind(this);\r\n        this._onSendMessage = this._onSendMessage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the remote peer with which this peer connection should\r\n     * be established with.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getPeerJid() {\r\n        return this._options.peerJid;\r\n    }\r\n\r\n    /**\r\n     * Updates the peer connection based on the passed in jingle.\r\n     *\r\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\r\n     * describing how the peer connection should be updated.\r\n     * @returns {void}\r\n     */\r\n    processMessage($jingle) {\r\n        switch ($jingle.attr('action')) {\r\n        case ACTIONS.ACCEPT:\r\n            this._onSessionAccept($jingle);\r\n            break;\r\n\r\n        case ACTIONS.INITIATE:\r\n            this._onSessionInitiate($jingle);\r\n            break;\r\n\r\n        case ACTIONS.TERMINATE:\r\n            this._onSessionTerminate($jingle);\r\n            break;\r\n\r\n        case ACTIONS.TRANSPORT_INFO:\r\n            this._onTransportInfo($jingle);\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates a peer connection and starts the offer/answer cycle to\r\n     * establish a connection with a remote peer.\r\n     *\r\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\r\n     * to add to the peer connection.\r\n     * @returns {void}\r\n     */\r\n    start(localTracks = []) {\r\n        if (this._peerConnection) {\r\n            return;\r\n        }\r\n\r\n        this._tracks = this._tracks.concat(localTracks);\r\n\r\n        this._peerConnection = this._createPeerConnection();\r\n\r\n        this._peerConnection.invite(localTracks);\r\n    }\r\n\r\n    /**\r\n     * Begins the process of disconnecting from a remote peer and cleaning up\r\n     * the peer connection.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        if (this._peerConnection) {\r\n            this._peerConnection.terminate();\r\n        }\r\n\r\n        this._onSessionTerminate();\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\r\n     * dependencies of {@code JingleSessionPC}.\r\n     *\r\n     * @private\r\n     * @returns {JingleSessionPC}\r\n     */\r\n    _createPeerConnection() {\r\n        /**\r\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\r\n         * object, which may not be accessible from the caller.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const configStub = {};\r\n\r\n        /**\r\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\r\n         * passed through, which also has the jingle plugin initialized on it.\r\n         * This connection object is used to signal out peer connection updates\r\n         * via iqs, and those updates need to be piped back out to the remote\r\n         * peer.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const connectionStub = {\r\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\r\n            // spot has no signalling it will not be in a meeting where this is used.\r\n            connected: true,\r\n            jingle: {\r\n                terminate: () => { /** no-op */ }\r\n            },\r\n            sendIQ: this._onSendMessage,\r\n\r\n            // Returns empty function, because it does not add any listeners for real\r\n            // eslint-disable-next-line no-empty-function\r\n            addEventListener: () => () => { }\r\n        };\r\n\r\n        /**\r\n         * {@code JingleSessionPC} can take in a custom ice configuration,\r\n         * depending on the peer connection type, peer-to-peer or other.\r\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\r\n         * connection so the ice configuration is hard-coded with defaults.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const iceConfigStub = {\r\n            iceServers: DEFAULT_STUN_SERVERS,\r\n            ...this._options.iceConfig\r\n        };\r\n\r\n        /**\r\n         * {@code JingleSessionPC} expects an instance of\r\n         * {@code JitsiConference}, which has an event emitter that is used\r\n         * to signal various connection updates that the local client should\r\n         * act upon. The conference instance is not a dependency of a proxy\r\n         * connection, but the emitted events can be relevant to the proxy\r\n         * connection so the event emitter is stubbed.\r\n         *\r\n         * @param {string} event - The constant for the event type.\r\n         * @type {Function}\r\n         * @returns {void}\r\n         */\r\n        const emitter = event => {\r\n            switch (event) {\r\n            case XMPPEvents.CONNECTION_ICE_FAILED:\r\n            case XMPPEvents.CONNECTION_FAILED:\r\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\r\n                break;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * {@link JingleSessionPC} expects an instance of\r\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\r\n         * is instantiated outside of the {@code JitsiConference}, so it must be\r\n         * stubbed to prevent errors.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const roomStub = {\r\n            addPresenceListener: () => { /** no-op */ },\r\n            connectionTimes: [],\r\n            eventEmitter: { emit: emitter },\r\n            getMediaPresenceInfo: () => {\r\n                // Errors occur if this function does not return an object\r\n\r\n                return {};\r\n            },\r\n            removePresenceListener: () => { /** no-op */ }\r\n        };\r\n\r\n        /**\r\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\r\n         * @type {Object}\r\n         */\r\n        const conferenceStub = {};\r\n\r\n        /**\r\n         * Create an instance of {@code RTC} as it is required for peer\r\n         * connection creation by {@code JingleSessionPC}. An existing instance\r\n         * of {@code RTC} from elsewhere should not be re-used because it is\r\n         * a stateful grouping of utilities.\r\n         */\r\n        this._rtc = new RTC(conferenceStub, {});\r\n\r\n        /**\r\n         * Add the remote track listener here as {@code JingleSessionPC} has\r\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\r\n         * emitter.\r\n         */\r\n        this._rtc.addListener(\r\n            RTCEvents.REMOTE_TRACK_ADDED,\r\n            this._onRemoteStream\r\n        );\r\n\r\n        const peerConnection = new JingleSessionPC(\r\n            undefined, // sid\r\n            undefined, // localJid\r\n            this._options.peerJid, // remoteJid\r\n            connectionStub, // connection\r\n            {\r\n                offerToReceiveAudio: this._options.receiveAudio,\r\n                offerToReceiveVideo: this._options.receiveVideo\r\n            }, // mediaConstraints\r\n            iceConfigStub, // iceConfig\r\n            true, // isP2P\r\n            this._options.isInitiator // isInitiator\r\n        );\r\n\r\n        /**\r\n         * An additional initialize call is necessary to properly set instance\r\n         * variable for calling.\r\n         */\r\n        peerConnection.initialize(roomStub, this._rtc, configStub);\r\n\r\n        return peerConnection;\r\n    }\r\n\r\n    /**\r\n     * Invoked when a connection related issue has been encountered.\r\n     *\r\n     * @param {string} errorType - The constant indicating the type of the error\r\n     * that occured.\r\n     * @param {string} details - Optional additional data about the error.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onError(errorType, details = '') {\r\n        this._options.onError(this._options.peerJid, errorType, details);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the peer connection has received a remote media\r\n     * stream.\r\n     *\r\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\r\n     * wrapped in {@code JitsiRemoteTrack}.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onRemoteStream(jitsiRemoteTrack) {\r\n        this._tracks.push(jitsiRemoteTrack);\r\n\r\n        this._options.onRemoteStream(jitsiRemoteTrack);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\r\n     * out to the remote peer.\r\n     *\r\n     * @param {XML} iq - The message to signal out.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSendMessage(iq) {\r\n        this._options.onSendMessage(this._options.peerJid, iq);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to an agreement to start a proxy connection.\r\n     * The passed in jingle element should contain an SDP answer to a previously\r\n     * sent SDP offer.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionAccept($jingle) {\r\n        if (!this._peerConnection) {\r\n            logger.error('Received an answer when no peer connection exists.');\r\n\r\n            return;\r\n        }\r\n\r\n        this._peerConnection.setAnswer($jingle);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to a request to start a proxy connection.\r\n     * The passed in jingle element should contain an SDP offer.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionInitiate($jingle) {\r\n        if (this._peerConnection) {\r\n            logger.error('Received an offer when an offer was already sent.');\r\n\r\n            return;\r\n        }\r\n\r\n        this._peerConnection = this._createPeerConnection();\r\n\r\n        this._peerConnection.acceptOffer(\r\n            $jingle,\r\n            () => { /** no-op */ },\r\n            () => this._onError(\r\n                this._options.peerJid,\r\n                ACTIONS.CONNECTION_ERROR,\r\n                'session initiate error'\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to a request to disconnect an active proxy\r\n     * connection. Cleans up tracks and the peer connection.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionTerminate() {\r\n        this._tracks.forEach(track => track.dispose());\r\n        this._tracks = [];\r\n\r\n        if (this._peerConnection) {\r\n            this._peerConnection.onTerminated();\r\n        }\r\n\r\n        if (this._rtc) {\r\n            this._rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_ADDED,\r\n                this._onRemoteStream\r\n            );\r\n\r\n            this._rtc.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to ICE candidates from the remote peer.\r\n     * The passed in jingle element should contain an ICE candidate.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTransportInfo($jingle) {\r\n        this._peerConnection.addIceCandidates($jingle);\r\n    }\r\n}\r\n","export default {\r\n    error: {\r\n        BUSY: 'busy',\r\n        ERROR: 'error',\r\n        RESOURCE_CONSTRAINT: 'resource-constraint',\r\n        SERVICE_UNAVAILABLE: 'service-unavailable'\r\n    },\r\n    mode: {\r\n        FILE: 'file',\r\n        STREAM: 'stream'\r\n    },\r\n    status: {\r\n        OFF: 'off',\r\n        ON: 'on',\r\n        PENDING: 'pending'\r\n    }\r\n};\r\n","import EventEmitter from 'events';\r\n\r\nimport browser from '../browser';\r\nimport Settings from '../settings/Settings';\r\nimport ScriptUtil from '../util/ScriptUtil';\r\n\r\nimport { CALLSTATS_SCRIPT_URL } from './constants';\r\n\r\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\r\nconst emitter = new EventEmitter();\r\nlet _initialized = false;\r\nlet api = null;\r\n\r\n/**\r\n * Loads the callstats io script.\r\n *\r\n * @returns {Promise<void>}\r\n */\r\nfunction _loadScript() {\r\n    if (browser.isReactNative()) {\r\n        return;\r\n    }\r\n\r\n    return new Promise(resolve => {\r\n        ScriptUtil.loadScript(\r\n            CALLSTATS_SCRIPT_URL,\r\n            /* async */ true,\r\n            /* prepend */ true,\r\n            /* relativeURL */ undefined,\r\n            /* loadCallback */ resolve);\r\n    });\r\n}\r\n\r\n/**\r\n * Initializes the callstats lib and registers a callback to be invoked\r\n * when there are 'preCallTestResults'.\r\n *\r\n * @typedef PrecallTestOptions\r\n * @type {Object}\r\n * @property {string} callStatsID - Callstats credentials - the id.\r\n * @property {string} callStatsSecret - Callstats credentials - the secret.\r\n * @property {string} statisticsId - The user name to use when initializing callstats.\r\n * @property {string} statisticsDisplayName - The user display name.\r\n *\r\n * @param { PrecallTestOptions} options - The init options.\r\n * @returns {Promise<void>}\r\n */\r\nfunction _initialize(options) {\r\n    return new Promise((resolve, reject) => {\r\n        const appId = options.callStatsID;\r\n        const appSecret = options.callStatsSecret;\r\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\r\n\r\n        api.initialize(appId, appSecret, userId, (status, message) => {\r\n            if (status === 'success') {\r\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\r\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\r\n                });\r\n                _initialized = true;\r\n                resolve();\r\n            } else {\r\n                reject({\r\n                    status,\r\n                    message\r\n                });\r\n            }\r\n        }, null, { disablePrecalltest: true });\r\n    });\r\n}\r\n\r\n/**\r\n * Loads the callstats script and initializes the library.\r\n *\r\n * @param {Function} onResult - The callback to be invoked when results are received.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function init(options) {\r\n    if (_initialized) {\r\n        throw new Error('Precall Test already initialized');\r\n    }\r\n\r\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\r\n\r\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\r\n        throw new Error('Callstats is disabled');\r\n    }\r\n\r\n    await _loadScript();\r\n    // eslint-disable-next-line new-cap\r\n    api = new window.callstats();\r\n\r\n    return _initialize(options);\r\n}\r\n\r\n/**\r\n * Executes a pre call test.\r\n *\r\n * @typedef PrecallTestResults\r\n * @type {Object}\r\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\r\n * @property {number} throughput  - The average throughput.\r\n * @property {number} fractionalLoss - The packet loss.\r\n * @property {number} rtt - The round trip time.\r\n * @property {string} provider - It is usually 'callstats'.\r\n *\r\n * @returns {Promise<{PrecallTestResults}>}\r\n */\r\nexport function execute() {\r\n    if (!_initialized) {\r\n        return Promise.reject('uninitialized');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\r\n            if (status === 'success') {\r\n                resolve(payload);\r\n            } else {\r\n                reject({\r\n                    status,\r\n                    payload\r\n                });\r\n            }\r\n\r\n        });\r\n\r\n        api.makePrecallTest();\r\n    });\r\n}\r\n\r\nexport default {\r\n    init,\r\n    execute\r\n};\r\n","const AuthUtil = {\r\n    /**\r\n     * Creates the URL pointing to JWT token authentication service. It is\r\n     * formatted from the 'urlPattern' argument which can contain the following\r\n     * constants:\r\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\r\n     * argument to this method.\r\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\r\n     * the role upgrade scenario, where user connects from anonymous domain and\r\n     * then gets upgraded to the moderator by logging-in from the popup window.\r\n     *\r\n     * @param urlPattern a URL pattern pointing to the login service\r\n     * @param roomName the name of the conference room for which the user will\r\n     * be authenticated\r\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\r\n     * upgrade scenario, where the user logs-in from the popup window in order\r\n     * to have the moderator rights granted\r\n     *\r\n     * @returns {string|null} the URL pointing to JWT login service or\r\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\r\n     * constructed.\r\n     */\r\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\r\n        const url = urlPattern;\r\n\r\n        if (typeof url !== 'string') {\r\n            return null;\r\n        }\r\n\r\n        return url.replace('{room}', roomName)\r\n            .replace('{roleUpgrade}', roleUpgrade === true);\r\n    }\r\n};\r\n\r\nmodule.exports = AuthUtil;\r\n","/* global\r\n    __filename\r\n*/\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport { createAudioContext } from './WebAudioUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\r\n * MediaStream.\r\n */\r\nexport default class AudioMixer {\r\n    /**\r\n     * Create AudioMixer instance.\r\n     */\r\n    constructor() {\r\n        this._started = false;\r\n        this._streamsToMix = [];\r\n        this._streamMSSArray = [];\r\n    }\r\n\r\n    /**\r\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\r\n     *\r\n     * @param {MediaStream} stream - MediaStream to be mixed.\r\n     */\r\n    addMediaStream(stream) {\r\n        if (!stream.getAudioTracks()) {\r\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\r\n        }\r\n\r\n        this._streamsToMix.push(stream);\r\n    }\r\n\r\n    /**\r\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\r\n     * it; the resulting mixed MediaStream is returned.\r\n     *\r\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\r\n     * is added.\r\n     */\r\n    start() {\r\n        // If the mixer was already started just return the existing mixed stream.\r\n        if (this._started) {\r\n            return this._mixedMSD.stream;\r\n        }\r\n\r\n        this._audioContext = createAudioContext();\r\n\r\n        if (!this._streamsToMix.length) {\r\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\r\n\r\n            return null;\r\n        }\r\n\r\n        this._started = true;\r\n\r\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\r\n\r\n        for (const stream of this._streamsToMix) {\r\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\r\n\r\n            streamMSS.connect(this._mixedMSD);\r\n\r\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\r\n            this._streamMSSArray.push(streamMSS);\r\n        }\r\n\r\n        return this._mixedMSD.stream;\r\n    }\r\n\r\n    /**\r\n     * Disconnect MediaStreamAudioSourceNode and clear references.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._started = false;\r\n        this._streamsToMix = [];\r\n\r\n        // Clean up created MediaStreamAudioSourceNode.\r\n        for (const streamMSS of this._streamMSSArray) {\r\n            streamMSS.disconnect();\r\n        }\r\n\r\n        this._streamMSSArray = [];\r\n\r\n        if (this._audioContext) {\r\n            this._audioContext = undefined;\r\n        }\r\n    }\r\n}\r\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n\n                // Do not signal the FID groups if there is no msid attribute present\n                // on the sources as sesison-accept with this source info will fail strophe\n                // validation and the session will not be established. This behavior is seen\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\n                // this case.\n                if (!bLine.ssrcGroups || !mLine.msid) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = media[type].sources.concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                    currentDesc.media[mLineForData].mid = mLineForData;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            if (!mLine.sources) {\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n\n                // check if there is a m-line that is inactive and is of the same media type\n                const inactiveMid = currentDesc.media\n                    .findIndex(cmLine => cmLine.direction\n                        && cmLine.direction === 'inactive'\n                        && cmLine.type === type);\n\n                if (inactiveMid > -1) {\n                    currentDesc.media[inactiveMid].direction = 'sendonly';\n                    addSourcesToMline(currentDesc.media[inactiveMid], ssrc, ssrc2group, mLine.sources);\n                } else {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = currentDesc.media.length.toString();\n                    newMline.direction = 'sendonly';\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    currentDesc.media.push(newMline);\n                }\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nexport default bytesToUuid;","import rng from './rng.js';\nimport bytesToUuid from './bytesToUuid.js';\n\nfunction v4(options, buf, offset) {\n  if (typeof options === 'string') {\n    buf = options === 'binary' ? new Uint8Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    var start = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[start + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return bytesToUuid(rnds);\n}\n\nexport default v4;","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\r\n// library (a.k.a. JitsiMeetJS).\r\nmodule.exports = require('./JitsiMeetJS').default;\r\n","/* global __filename */\r\n\r\nimport Logger from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport JitsiConnection from './JitsiConnection';\r\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\r\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\r\nimport JitsiMediaDevices from './JitsiMediaDevices';\r\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\r\nimport JitsiTrackError from './JitsiTrackError';\r\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\r\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\r\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\r\nimport { ParticipantConnectionStatus }\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\r\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\r\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\r\nimport ProxyConnectionService\r\n    from './modules/proxyconnection/ProxyConnectionService';\r\nimport recordingConstants from './modules/recording/recordingConstants';\r\nimport Settings from './modules/settings/Settings';\r\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\r\nimport precallTest from './modules/statistics/PrecallTest';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport AuthUtil from './modules/util/AuthUtil';\r\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\r\nimport ScriptUtil from './modules/util/ScriptUtil';\r\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\r\nimport AudioMixer from './modules/webaudio/AudioMixer';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport Resolutions from './service/RTC/Resolutions';\r\nimport * as ConnectionQualityEvents\r\n    from './service/connectivity/ConnectionQualityEvents';\r\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\r\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\r\n\r\nconst logger = Logger.getLogger(__filename);\r\n\r\n/**\r\n * The amount of time to wait until firing\r\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\r\n */\r\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\r\n\r\n/**\r\n * Gets the next lowest desirable resolution to try for a camera. If the given\r\n * resolution is already the lowest acceptable resolution, returns {@code null}.\r\n *\r\n * @param resolution the current resolution\r\n * @return the next lowest resolution from the given one, or {@code null} if it\r\n * is already the lowest acceptable resolution.\r\n */\r\nfunction getLowerResolution(resolution) {\r\n    if (!Resolutions[resolution]) {\r\n        return null;\r\n    }\r\n    const order = Resolutions[resolution].order;\r\n    let res = null;\r\n    let resName = null;\r\n\r\n    Object.keys(Resolutions).forEach(r => {\r\n        const value = Resolutions[r];\r\n\r\n        if (!res || (res.order < value.order && value.order < order)) {\r\n            resName = r;\r\n            res = value;\r\n        }\r\n    });\r\n\r\n    if (resName === resolution) {\r\n        resName = null;\r\n    }\r\n\r\n    return resName;\r\n}\r\n\r\n/**\r\n * Extracts from an 'options' objects with a specific format (TODO what IS the\r\n * format?) the attributes which are to be logged in analytics events.\r\n *\r\n * @param options gum options (???)\r\n * @returns {*} the attributes to attach to analytics events.\r\n */\r\nfunction getAnalyticsAttributesFromOptions(options) {\r\n    const attributes = {\r\n        'audio_requested':\r\n            options.devices.includes('audio'),\r\n        'video_requested':\r\n            options.devices.includes('video'),\r\n        'screen_sharing_requested':\r\n            options.devices.includes('desktop')\r\n    };\r\n\r\n    if (attributes.video_requested) {\r\n        attributes.resolution = options.resolution;\r\n    }\r\n\r\n    return attributes;\r\n}\r\n\r\n/**\r\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\r\n * this module, it's also a global (i.e. attached to {@code window}) namespace\r\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\r\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\r\n * automatically be attached to {@code window} by webpack. Unfortunately,\r\n * webpack's source code does not check whether the global variable has already\r\n * been assigned and overwrites it. Which is OK for the module\r\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\r\n * because it may already contain the values of other projects in the Jitsi Meet\r\n * family. The solution offered here works around webpack by merging all\r\n * existing values of the namespace {@code JitsiMeetJS} into the module\r\n * {@code JitsiMeetJS}.\r\n *\r\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\r\n * exported and may be attached to {@code window} by webpack later on).\r\n * @private\r\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\r\n * value of the namespace {@code JitsiMeetJS} (if any).\r\n */\r\nfunction _mergeNamespaceAndModule(module) {\r\n    return (\r\n        typeof window.JitsiMeetJS === 'object'\r\n            ? Object.assign({}, window.JitsiMeetJS, module)\r\n            : module);\r\n}\r\n\r\n/**\r\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\r\n */\r\nexport default _mergeNamespaceAndModule({\r\n\r\n    version: '{#COMMIT_HASH#}',\r\n\r\n    JitsiConnection,\r\n\r\n    /**\r\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\r\n     * local Jitsi participant without going through a Jitsi conference. It is\r\n     * currently used for room integration development, specifically wireless\r\n     * screensharing. Its API is experimental and will likely change; usage of\r\n     * it is advised against.\r\n     */\r\n    ProxyConnectionService,\r\n\r\n    constants: {\r\n        participantConnectionStatus: ParticipantConnectionStatus,\r\n        recording: recordingConstants,\r\n        sipVideoGW: VideoSIPGWConstants,\r\n        transcriptionStatus: JitsiTranscriptionStatus\r\n    },\r\n    events: {\r\n        conference: JitsiConferenceEvents,\r\n        connection: JitsiConnectionEvents,\r\n        detection: DetectionEvents,\r\n        track: JitsiTrackEvents,\r\n        mediaDevices: JitsiMediaDevicesEvents,\r\n        connectionQuality: ConnectionQualityEvents,\r\n        e2eping: E2ePingEvents\r\n    },\r\n    errors: {\r\n        conference: JitsiConferenceErrors,\r\n        connection: JitsiConnectionErrors,\r\n        track: JitsiTrackErrors\r\n    },\r\n    errorTypes: {\r\n        JitsiTrackError\r\n    },\r\n    logLevels: Logger.levels,\r\n    mediaDevices: JitsiMediaDevices,\r\n    analytics: Statistics.analytics,\r\n    init(options = {}) {\r\n        Settings.init(options.externalStorage);\r\n        Statistics.init(options);\r\n\r\n        // Initialize global window.connectionTimes\r\n        // FIXME do not use 'window'\r\n        if (!window.connectionTimes) {\r\n            window.connectionTimes = {};\r\n        }\r\n\r\n        if (options.enableAnalyticsLogging !== true) {\r\n            logger.warn('Analytics disabled, disposing.');\r\n            this.analytics.dispose();\r\n        }\r\n\r\n        if (options.enableWindowOnErrorHandler) {\r\n            GlobalOnErrorHandler.addHandler(\r\n                this.getGlobalOnErrorHandler.bind(this));\r\n        }\r\n\r\n        // Log deployment-specific information, if available. Defined outside\r\n        // the application by individual deployments\r\n        const aprops = options.deploymentInfo;\r\n\r\n        if (aprops && Object.keys(aprops).length > 0) {\r\n            const logObject = {};\r\n\r\n            for (const attr in aprops) {\r\n                if (aprops.hasOwnProperty(attr)) {\r\n                    logObject[attr] = aprops[attr];\r\n                }\r\n            }\r\n\r\n            logObject.id = 'deployment_info';\r\n            Statistics.sendLog(JSON.stringify(logObject));\r\n        }\r\n\r\n        if (this.version) {\r\n            const logObject = {\r\n                id: 'component_version',\r\n                component: 'lib-jitsi-meet',\r\n                version: this.version\r\n            };\r\n\r\n            Statistics.sendLog(JSON.stringify(logObject));\r\n        }\r\n\r\n        return RTC.init(options);\r\n    },\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isDesktopSharingEnabled() {\r\n        return RTC.isDesktopSharingEnabled();\r\n    },\r\n\r\n    /**\r\n     * Returns whether the current execution environment supports WebRTC (for\r\n     * use within this library).\r\n     *\r\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\r\n     * execution environment (for use within this library); {@code false},\r\n     * otherwise.\r\n     */\r\n    isWebRtcSupported() {\r\n        return RTC.isWebRtcSupported();\r\n    },\r\n\r\n    setLogLevel(level) {\r\n        Logger.setLogLevel(level);\r\n    },\r\n\r\n    /**\r\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\r\n     *\r\n     * @param {Logger.levels} level the logging level to be set\r\n     * @param {string} id the logger id to which new logging level will be set.\r\n     * Usually it's the name of the JavaScript source file including the path\r\n     * ex. \"modules/xmpp/ChatRoom.js\"\r\n     */\r\n    setLogLevelById(level, id) {\r\n        Logger.setLogLevelById(level, id);\r\n    },\r\n\r\n    /**\r\n     * Registers new global logger transport to the library logging framework.\r\n     *\r\n     * @param globalTransport\r\n     * @see Logger.addGlobalTransport\r\n     */\r\n    addGlobalLogTransport(globalTransport) {\r\n        Logger.addGlobalTransport(globalTransport);\r\n    },\r\n\r\n    /**\r\n     * Removes global logging transport from the library logging framework.\r\n     *\r\n     * @param globalTransport\r\n     * @see Logger.removeGlobalTransport\r\n     */\r\n    removeGlobalLogTransport(globalTransport) {\r\n        Logger.removeGlobalTransport(globalTransport);\r\n    },\r\n\r\n    /**\r\n    * Sets global options which will be used by all loggers. Changing these\r\n    * works even after other loggers are created.\r\n    *\r\n    * @param options\r\n    * @see Logger.setGlobalOptions\r\n    */\r\n    setGlobalLogOptions(options) {\r\n        Logger.setGlobalOptions(options);\r\n    },\r\n\r\n    /**\r\n     * Creates the media tracks and returns them trough the callback.\r\n     *\r\n     * @param options Object with properties / settings specifying the tracks\r\n     * which should be created. should be created or some additional\r\n     * configurations about resolution for example.\r\n     * @param {Array} options.effects optional effects array for the track\r\n     * @param {Array} options.devices the devices that will be requested\r\n     * @param {string} options.resolution resolution constraints\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @param {intiger} interval - the interval (in ms) for\r\n     * checking whether the desktop sharing extension is installed or not\r\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\r\n     * createLocalTracks will wait and check on every \"interval\" ms for the\r\n     * extension. If the desktop extension is not install and checkAgain()==true\r\n     * createLocalTracks will finish with rejected Promise.\r\n     * @param {Function} listener - The listener will be called to notify the\r\n     * user of lib-jitsi-meet that createLocalTracks is starting external\r\n     * extension installation process.\r\n     * NOTE: If the inline installation process is not possible and external\r\n     * installation is enabled the listener property will be called to notify\r\n     * the start of external installation process. After that createLocalTracks\r\n     * will start to check for the extension on every interval ms until the\r\n     * plugin is installed or until checkAgain return false. If the extension\r\n     * is found createLocalTracks will try to get the desktop sharing track and\r\n     * will finish the execution. If checkAgain returns false, createLocalTracks\r\n     * will finish the execution with rejected Promise.\r\n     *\r\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\r\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\r\n     * @param originalOptions - internal use only, to be able to store the\r\n     * originally requested options.\r\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\r\n     * that returns an array of created JitsiTracks if resolved, or a\r\n     * JitsiConferenceError if rejected.\r\n     */\r\n    createLocalTracks(\r\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\r\n        let promiseFulfilled = false;\r\n\r\n        if (firePermissionPromptIsShownEvent === true) {\r\n            window.setTimeout(() => {\r\n                if (!promiseFulfilled) {\r\n                    JitsiMediaDevices.emitEvent(\r\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\r\n                        browser.getName());\r\n                }\r\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\r\n        }\r\n\r\n        if (!window.connectionTimes) {\r\n            window.connectionTimes = {};\r\n        }\r\n        window.connectionTimes['obtainPermissions.start']\r\n            = window.performance.now();\r\n\r\n        return RTC.obtainAudioAndVideoPermissions(options)\r\n            .then(tracks => {\r\n                promiseFulfilled = true;\r\n\r\n                window.connectionTimes['obtainPermissions.end']\r\n                    = window.performance.now();\r\n\r\n                Statistics.sendAnalytics(\r\n                    createGetUserMediaEvent(\r\n                        'success',\r\n                        getAnalyticsAttributesFromOptions(options)));\r\n\r\n                if (!RTC.options.disableAudioLevels) {\r\n                    for (let i = 0; i < tracks.length; i++) {\r\n                        const track = tracks[i];\r\n                        const mStream = track.getOriginalStream();\r\n\r\n                        if (track.getType() === MediaType.AUDIO) {\r\n                            Statistics.startLocalStats(mStream,\r\n                                track.setAudioLevel.bind(track));\r\n                            track.addEventListener(\r\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\r\n                                () => {\r\n                                    Statistics.stopLocalStats(mStream);\r\n                                });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // set real device ids\r\n                const currentlyAvailableMediaDevices\r\n                    = RTC.getCurrentlyAvailableMediaDevices();\r\n\r\n                if (currentlyAvailableMediaDevices) {\r\n                    for (let i = 0; i < tracks.length; i++) {\r\n                        const track = tracks[i];\r\n\r\n                        track._setRealDeviceIdFromDeviceList(\r\n                            currentlyAvailableMediaDevices);\r\n                    }\r\n                }\r\n\r\n                // set the contentHint to \"detail\" for desktop tracks\r\n                // eslint-disable-next-line prefer-const\r\n                for (const track of tracks) {\r\n                    if (track.type === MediaType.VIDEO\r\n                        && track.videoType === 'desktop') {\r\n                        this.setVideoTrackContentHints(track.track, 'detail');\r\n                    }\r\n                }\r\n\r\n                return tracks;\r\n            })\r\n            .catch(error => {\r\n                promiseFulfilled = true;\r\n\r\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\r\n                    && !browser.usesNewGumFlow()) {\r\n                    const oldResolution = options.resolution || '720';\r\n                    const newResolution = getLowerResolution(oldResolution);\r\n\r\n                    if (newResolution !== null) {\r\n                        options.resolution = newResolution;\r\n\r\n                        logger.debug(\r\n                            'Retry createLocalTracks with resolution',\r\n                            newResolution);\r\n\r\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\r\n                            'warning',\r\n                            {\r\n                                'old_resolution': oldResolution,\r\n                                'new_resolution': newResolution,\r\n                                reason: 'unsupported resolution'\r\n                            }));\r\n\r\n                        return this.createLocalTracks(\r\n                            options,\r\n                            undefined,\r\n                            originalOptions || Object.assign({}, options));\r\n                    }\r\n\r\n                    // We tried everything. If there is a mandatory device id,\r\n                    // remove it and let gum find a device to use.\r\n                    if (originalOptions\r\n                        && error.gum.constraints\r\n                        && error.gum.constraints.video\r\n                        && error.gum.constraints.video.mandatory\r\n                        && error.gum.constraints.video.mandatory.sourceId) {\r\n                        originalOptions.cameraDeviceId = undefined;\r\n\r\n                        return this.createLocalTracks(originalOptions);\r\n                    }\r\n                }\r\n\r\n                if (error.name\r\n                        === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\r\n                    // User cancelled action is not really an error, so only\r\n                    // log it as an event to avoid having conference classified\r\n                    // as partially failed\r\n                    const logObject = {\r\n                        id: 'screensharing_user_canceled',\r\n                        message: error.message\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent(\r\n                            'warning',\r\n                            {\r\n                                reason: 'extension install user canceled'\r\n                            }));\r\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\r\n                    // logs not found devices with just application log to cs\r\n                    const logObject = {\r\n                        id: 'usermedia_missing_device',\r\n                        status: error.gum.devices\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n\r\n                    const attributes\r\n                        = getAnalyticsAttributesFromOptions(options);\r\n\r\n                    attributes.reason = 'device not found';\r\n                    attributes.devices = error.gum.devices.join('.');\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent('error', attributes));\r\n                } else {\r\n                    // Report gUM failed to the stats\r\n                    Statistics.sendGetUserMediaFailed(error);\r\n\r\n                    const attributes\r\n                        = getAnalyticsAttributesFromOptions(options);\r\n\r\n                    attributes.reason = error.name;\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent('error', attributes));\r\n                }\r\n\r\n                window.connectionTimes['obtainPermissions.end']\r\n                    = window.performance.now();\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    },\r\n\r\n    /**\r\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\r\n     * order to obtain VAD scores for individual PCM audio samples.\r\n     * @param {string} localAudioDeviceId - The target local audio device.\r\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\r\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\r\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\r\n     * longer calls, lowers values mean more calls but shorter.\r\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\r\n     * to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * i.e. (16KHz, 44.1 KHz etc.)\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @returns {Promise<TrackVADEmitter>}\r\n     */\r\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\r\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\r\n    },\r\n\r\n    /**\r\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\r\n     * user to mix multiple MediaStreams into a single one.\r\n     *\r\n     * @returns {AudioMixer}\r\n     */\r\n    createAudioMixer() {\r\n        return new AudioMixer();\r\n    },\r\n\r\n    /**\r\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\r\n     *\r\n     * @returns Promise<Object> - Object containing information about the found device.\r\n     */\r\n    getActiveAudioDevice() {\r\n        return getActiveAudioDevice();\r\n    },\r\n\r\n    /**\r\n     * Checks if its possible to enumerate available cameras/microphones.\r\n     *\r\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\r\n     * the WebRTC stack is ready, either with true if the device listing is\r\n     * available available or with false otherwise.\r\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\r\n     */\r\n    isDeviceListAvailable() {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\r\n\r\n        return this.mediaDevices.isDeviceListAvailable();\r\n    },\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     *\r\n     * @param {string} [deviceType] - type of device to change. Default is\r\n     * {@code undefined} or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\r\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\r\n\r\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\r\n    },\r\n\r\n\r\n    /**\r\n     * Checks if the current environment supports having multiple audio\r\n     * input devices in use simultaneously.\r\n     *\r\n     * @returns {boolean} True if multiple audio input devices can be used.\r\n     */\r\n    isMultipleAudioInputSupported() {\r\n        return this.mediaDevices.isMultipleAudioInputSupported();\r\n    },\r\n\r\n    /**\r\n     * Checks if local tracks can collect stats and collection is enabled.\r\n     *\r\n     * @param {boolean} True if stats are being collected for local tracks.\r\n     */\r\n    isCollectingLocalStats() {\r\n        return Statistics.audioLevelsEnabled\r\n            && LocalStatsCollector.isLocalStatsSupported();\r\n    },\r\n\r\n    /**\r\n     * Executes callback with list of media devices connected.\r\n     *\r\n     * @param {function} callback\r\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\r\n     */\r\n    enumerateDevices(callback) {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\r\n        this.mediaDevices.enumerateDevices(callback);\r\n    },\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * @returns function that can be used to be attached to window.onerror and\r\n     * if options.enableWindowOnErrorHandler is enabled returns\r\n     * the function used by the lib.\r\n     * (function(message, source, lineno, colno, error)).\r\n     */\r\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\r\n        logger.error(\r\n            `UnhandledError: ${message}`,\r\n            `Script: ${source}`,\r\n            `Line: ${lineno}`,\r\n            `Column: ${colno}`,\r\n            'StackTrace: ', error);\r\n        Statistics.reportGlobalError(error);\r\n    },\r\n\r\n    /**\r\n     * Informs lib-jitsi-meet about the current network status.\r\n     *\r\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\r\n     * otherwise.\r\n     */\r\n    setNetworkInfo({ isOnline }) {\r\n        NetworkInfo.updateNetworkInfo({ isOnline });\r\n    },\r\n\r\n    /**\r\n     * Set the contentHint on the transmitted stream track to indicate\r\n     * charaterstics in the video stream, which informs PeerConnection\r\n     * on how to encode the track (to prefer motion or individual frame detail)\r\n     * @param {MediaStreamTrack} track - the track that is transmitted\r\n     * @param {String} hint - contentHint value that needs to be set on the track\r\n     */\r\n    setVideoTrackContentHints(track, hint) {\r\n        if ('contentHint' in track) {\r\n            track.contentHint = hint;\r\n            if (track.contentHint !== hint) {\r\n                logger.debug('Invalid video track contentHint');\r\n            }\r\n        } else {\r\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\r\n        }\r\n    },\r\n\r\n    precallTest,\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Represents a hub/namespace for utility functionality which may be of\r\n     * interest to lib-jitsi-meet clients.\r\n     */\r\n    util: {\r\n        AuthUtil,\r\n        ScriptUtil,\r\n        browser\r\n    }\r\n});\r\n","/* Copyright @ 2016-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require('./Logger.js');\r\n\r\n/**\r\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\r\n * and thus can be added as global transport in order to capture all the logs.\r\n *\r\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\r\n * a message and stores them in a queue in order to batch log entries. There are\r\n * time and size limit constraints which determine how often batch entries are\r\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\r\n * will use the <tt>logStorage</tt> object given as an argument to save\r\n * the batch log entry.\r\n *\r\n * @param {Object} logStorage an object which allows to store the logs collected\r\n * @param {function(string|object[])} logStorage.storeLogs a method called when\r\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\r\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\r\n * item is an object it means that it's an aggregated message. That is a message\r\n * which is the same as the previous one and it's representation has\r\n * the following format:\r\n * {\r\n *   {string} text: 'the text of some duplicated message'\r\n *   {number} count: 3 // how many times the message appeared in a row\r\n * }\r\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\r\n * the sequence of \"A\". Which means that even if the next message \"C\" is\r\n * the same as \"A\" it will start a new aggregated message \"C\".\r\n * @param {function()} logStorage.isReady a method which should return\r\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\r\n * time storage is not ready log batches will be cached and stored on the next\r\n * occasion (flush or interval timeout).\r\n *\r\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\r\n * @param {number} options.maxEntryLength the size limit for a single log entry\r\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\r\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\r\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\r\n * storage becomes ready. Note that the \"is ready\" condition is checked every\r\n * <tt>options.storeInterval</tt> milliseconds.\r\n * @param {number} options.storeInterval how often the logs should be stored in\r\n * case <tt>maxEntryLength</tt> was not exceeded.\r\n * @param {boolean} options.stringifyObjects indicates whether or not object\r\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\r\n * message is composed. Note that objects logged on the error log level are\r\n * always stringified.\r\n *\r\n * @constructor\r\n */\r\nfunction LogCollector(logStorage, options) {\r\n    this.logStorage = logStorage;\r\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\r\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\r\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\r\n    // Bind the log method for each level to the corresponding method name\r\n    // in order to implement \"global log transport\" object.\r\n    Object.keys(Logger.levels).forEach(\r\n    function (logLevel) {\r\n        var methodName = Logger.levels[logLevel];\r\n        this[methodName] = function () {\r\n            this._log.apply(this, arguments);\r\n        }.bind(this, logLevel);\r\n    }.bind(this));\r\n    /**\r\n     * The ID of store logs interval if one is currently scheduled or\r\n     * <tt>null</tt> otherwise.\r\n     * @type {number|null}\r\n     */\r\n    this.storeLogsIntervalID = null;\r\n    /**\r\n     * The log messages that are to be batched into log entry when\r\n     * {@link LogCollector._flush} method is called.\r\n     * @type {string[]}\r\n     */\r\n    this.queue = [];\r\n    /**\r\n     * The total length of all messages currently stored in the {@link queue}.\r\n     * @type {number}\r\n     */\r\n    this.totalLen = 0;\r\n    /**\r\n     * An array used to temporarily store log batches, before the storage gets\r\n     * ready.\r\n     * @type {string[]}\r\n     */\r\n    this.outputCache = [];\r\n}\r\n\r\n/**\r\n * Method called inside of {@link formatLogMessage} in order to covert an\r\n * <tt>Object</tt> argument to string. The conversion will happen when either\r\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\r\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\r\n * returns \"[object with circular refs?]\" instead of an object if it fails.\r\n *\r\n * @param {object} someObject the <tt>object</tt> to be stringified.\r\n *\r\n * @return {string} the result of <tt>JSON.stringify</tt> or\r\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.stringify = function (someObject) {\r\n    try {\r\n        return JSON.stringify(someObject);\r\n    } catch (error) {\r\n        return '[object with circular refs?]';\r\n    }\r\n};\r\n\r\n/**\r\n * Formats log entry for the given logging level and arguments passed to the\r\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\r\n * arguments have to be captured using JS built-in 'arguments' variable.\r\n *\r\n * @param {Logger.levels} logLevel provides the logging level of the message to\r\n * be logged.\r\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\r\n *\r\n * @return {string|null} a non-empty string representation of the log entry\r\n * crafted from the log arguments. If the return value is <tt>null</tt> then\r\n * the message wil be discarded by this <tt>LogCollector</tt>.\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.formatLogMessage = function (\r\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\r\n    var msg = '';\r\n    for (var i = 1, len = arguments.length; i < len; i++) {\r\n        var arg = arguments[i];\r\n        // objects logged on error level are always converted to JSON\r\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\r\n            typeof arg === 'object') {\r\n            arg = this.stringify(arg);\r\n        }\r\n        msg += arg;\r\n        if (i !== len - 1) {\r\n            msg += ' ';\r\n        }\r\n    }\r\n    return msg.length ? msg : null;\r\n};\r\n\r\n/**\r\n * The log method bound to each of the logging levels in order to implement\r\n * \"global log transport\" object.\r\n *\r\n * @private\r\n */\r\nLogCollector.prototype._log = function() {\r\n\r\n    // var logLevel = arguments[0]; first argument is the log level\r\n    var timestamp = arguments[1];\r\n    var msg = this.formatLogMessage.apply(this, arguments);\r\n    if (msg) {\r\n        // The same as the previous message aggregation logic\r\n        var prevMessage = this.queue[this.queue.length - 1];\r\n        var prevMessageText = prevMessage && prevMessage.text;\r\n        if (prevMessageText === msg) {\r\n            prevMessage.count += 1;\r\n        } else {\r\n            this.queue.push({\r\n                text: msg,\r\n                timestamp: timestamp,\r\n                count: 1\r\n            });\r\n            this.totalLen += msg.length;\r\n        }\r\n    }\r\n\r\n    if (this.totalLen >= this.maxEntryLength) {\r\n        this._flush(true /* force */, true /* reschedule */);\r\n    }\r\n};\r\n\r\n/**\r\n * Starts periodical \"store logs\" task which will be triggered at the interval\r\n * specified in the constructor options.\r\n */\r\nLogCollector.prototype.start = function () {\r\n    this._reschedulePublishInterval();\r\n};\r\n\r\n/**\r\n * Reschedules the periodical \"store logs\" task which will store the next batch\r\n * log entry in the storage.\r\n * @private\r\n */\r\nLogCollector.prototype._reschedulePublishInterval = function () {\r\n    if (this.storeLogsIntervalID) {\r\n        window.clearTimeout(this.storeLogsIntervalID);\r\n        this.storeLogsIntervalID = null;\r\n    }\r\n    // It's actually a timeout, because it is rescheduled on every flush\r\n    this.storeLogsIntervalID = window.setTimeout(\r\n        this._flush.bind(\r\n            this, false /* do not force */, true /* reschedule */),\r\n        this.storeInterval);\r\n};\r\n\r\n/**\r\n * Call this method to flush the log entry buffer and store it in the log\r\n * storage immediately (given that the storage is ready).\r\n */\r\nLogCollector.prototype.flush = function() {\r\n    this._flush(\r\n        false /* do not force, as it will not be stored anyway */,\r\n        true /* reschedule next update */ );\r\n};\r\n\r\n/**\r\n * Stores the next batch log entry in the log storage.\r\n * @param {boolean} force enforce current logs batch to be stored or cached if\r\n * there is anything to be logged, but the storage is not ready yet. One of\r\n * legitimate reasons to force is when the logs length exceeds size limit which\r\n * could result in truncation.\r\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\r\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\r\n * task cycle.\r\n * @private\r\n */\r\nLogCollector.prototype._flush = function(force, reschedule) {\r\n    // Publish only if there's anything to be logged\r\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\r\n        //FIXME avoid truncating\r\n        // right now we don't care if the message size is \"slightly\" exceeded\r\n        if (this.logStorage.isReady()) {\r\n            // Sends all cached logs\r\n            if (this.outputCache.length) {\r\n                this.outputCache.forEach(\r\n                    function (cachedQueue) {\r\n                        this.logStorage.storeLogs(cachedQueue);\r\n                    }.bind(this)\r\n                );\r\n                // Clear the cache\r\n                this.outputCache = [];\r\n            }\r\n            // Send current batch\r\n            this.logStorage.storeLogs(this.queue);\r\n        } else {\r\n            this.outputCache.push(this.queue);\r\n        }\r\n\r\n        this.queue = [];\r\n        this.totalLen = 0;\r\n    }\r\n\r\n    if (reschedule) {\r\n        this._reschedulePublishInterval();\r\n    }\r\n};\r\n\r\n/**\r\n * Stops the periodical \"store logs\" task and immediately stores any pending\r\n * log entries as a batch.\r\n */\r\nLogCollector.prototype.stop = function() {\r\n    // Flush and stop publishing logs\r\n    this._flush(false /* do not force */, false /* do not reschedule */);\r\n};\r\n\r\nmodule.exports = LogCollector;\r\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\r\n    LOCAL_JID: 'local'\r\n};\r\n\r\nmodule.exports = Constants;\r\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\n        return;\n    }\n\n    mLine.xGoogleFlag = undefined;\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @param enableConferenceFlag\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\n            assertGoogConference(mLine);\n        } else {\n            removeGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/* eslint-disable max-params */\r\n\r\n/**\r\n * This object stores variables needed around the recording of an audio stream\r\n * and passing this recording along with additional information along to\r\n * different processes\r\n * @param blob the recording audio stream as a single blob\r\n * @param name the name of the person of the audio stream\r\n * @param startTime the time in UTC when recording of the audiostream started\r\n * @param wordArray the recorder audio stream transcribed as an array of Word\r\n *                  objects\r\n */\r\nconst RecordingResult = function(blob, name, startTime, wordArray) {\r\n    this.blob = blob;\r\n    this.name = name;\r\n    this.startTime = startTime;\r\n    this.wordArray = wordArray;\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\nmodule.exports = RecordingResult;\r\n","/* global config */\r\n\r\nconst Word = require('../word');\r\n\r\nconst audioRecorder = require('./../audioRecorder');\r\nconst TranscriptionService = require('./AbstractTranscriptionService');\r\n\r\n/**\r\n * Implements a TranscriptionService for a Sphinx4 http server\r\n */\r\nconst SphinxService = function() {\r\n    // set the correct url\r\n    this.url = getURL();\r\n};\r\n\r\n/**\r\n * Subclass of AbstractTranscriptionService\r\n */\r\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\r\n\r\n/**\r\n * Set the right constructor\r\n */\r\nSphinxService.constructor = SphinxService;\r\n\r\n/**\r\n * Overrides the sendRequest method from AbstractTranscriptionService\r\n * it will send the audio stream the a Sphinx4 server to get the transcription\r\n *\r\n * @param audioFileBlob the recorder audio stream an a single Blob\r\n * @param callback the callback function retrieving the server response\r\n */\r\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\r\n    console.log(`sending an audio file  to ${this.url}`);\r\n    console.log(`the audio file being sent: ${audioFileBlob}`);\r\n    const request = new XMLHttpRequest();\r\n\r\n    request.onreadystatechange = function() {\r\n        if (request.readyState === XMLHttpRequest.DONE\r\n            && request.status === 200) {\r\n            callback(request.responseText);\r\n        } else if (request.readyState === XMLHttpRequest.DONE) {\r\n            throw new Error(\r\n                `unable to accept response from sphinx server. status: ${\r\n                    request.status}`);\r\n        }\r\n\r\n        // if not ready no point to throw an error\r\n    };\r\n    request.open('POST', this.url);\r\n    request.setRequestHeader('Content-Type',\r\n        audioRecorder.determineCorrectFileType());\r\n    request.send(audioFileBlob);\r\n    console.log(`send ${audioFileBlob}`);\r\n};\r\n\r\n/**\r\n * Overrides the formatResponse method from AbstractTranscriptionService\r\n * It will parse the answer from the server in the expected format\r\n *\r\n * @param response the JSON body retrieved from the Sphinx4 server\r\n */\r\nSphinxService.prototype.formatResponse = function(response) {\r\n    const result = JSON.parse(response).objects;\r\n\r\n    // make sure to delete the session id object, which is always\r\n    // the first value in the JSON array\r\n\r\n    result.shift();\r\n    const array = [];\r\n\r\n    result.forEach(\r\n        word =>\r\n            word.filler\r\n                || array.push(new Word(word.word, word.start, word.end)));\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * checks wether the reply is empty, or doesn't contain a correct JSON object\r\n * @param response the server response\r\n * @return {boolean} whether the response is valid\r\n */\r\nSphinxService.prototype.verify = function(response) {\r\n    console.log(`response from server:${response.toString()}`);\r\n\r\n    // test if server responded with a string object\r\n    if (typeof response !== 'string') {\r\n        return false;\r\n    }\r\n\r\n    // test if the string can be parsed into valid JSON\r\n    let json;\r\n\r\n    try {\r\n        json = JSON.parse(response);\r\n    } catch (error) {\r\n        console.log(error);\r\n\r\n        return false;\r\n    }\r\n\r\n    // check if the JSON has a \"objects\" value\r\n    if (json.objects === undefined) {\r\n        return false;\r\n    }\r\n\r\n    // get the \"objects\" value and check for a session ID\r\n    const array = json.objects;\r\n\r\n    if (!(array[0] && array[0]['session-id'])) {\r\n        return false;\r\n    }\r\n\r\n    // everything seems to be in order\r\n    return true;\r\n};\r\n\r\n/**\r\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\r\n * it will throw an error\r\n *\r\n * @returns {string} the URL to the sphinx4 server\r\n */\r\nfunction getURL() {\r\n    const message = 'config does not contain an url to a Sphinx4 https server';\r\n\r\n    if (config.sphinxURL === undefined) {\r\n        console.log(message);\r\n    } else {\r\n        const toReturn = config.sphinxURL;\r\n\r\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\r\n            return toReturn;\r\n        }\r\n        console.log(message);\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = SphinxService;\r\n","/**\r\n * An object representing a transcribed word, with some additional information\r\n * @param word the word\r\n * @param begin the time the word was started being uttered\r\n * @param end the time the word stopped being uttered\r\n */\r\nconst Word = function(word, begin, end) {\r\n    this.word = word;\r\n    this.begin = begin;\r\n    this.end = end;\r\n};\r\n\r\n/**\r\n * Get the string representation of the word\r\n * @returns {*} the word as a string\r\n */\r\nWord.prototype.getWord = function() {\r\n    return this.word;\r\n};\r\n\r\n/**\r\n * Get the time the word started being uttered\r\n * @returns {*} the start time as an integer\r\n */\r\nWord.prototype.getBeginTime = function() {\r\n    return this.begin;\r\n};\r\n\r\n/**\r\n * Get the time the word stopped being uttered\r\n * @returns {*} the end time as an integer\r\n */\r\nWord.prototype.getEndTime = function() {\r\n    return this.end;\r\n};\r\n\r\nmodule.exports = Word;\r\n","/**\r\n * Abstract class representing an interface to implement a speech-to-text\r\n * service on.\r\n */\r\nconst TranscriptionService = function() {\r\n    throw new Error('TranscriptionService is abstract and cannot be'\r\n        + 'created');\r\n};\r\n\r\n/**\r\n * This method can be used to send the recorder audio stream and\r\n * retrieve the answer from the transcription service from the callback\r\n *\r\n * @param {RecordingResult} recordingResult a recordingResult object which\r\n * includes the recorded audio stream as a blob\r\n * @param {Function} callback  which will retrieve the a RecordingResult with\r\n *        the answer as a WordArray\r\n */\r\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\r\n    this.sendRequest(recordingResult.blob, response => {\r\n        if (this.verify(response)) {\r\n            recordingResult.wordArray = this.formatResponse(response);\r\n        } else {\r\n            console.log('the retrieved response from the server is not valid!');\r\n            recordingResult.wordArray = [];\r\n        }\r\n        callback(recordingResult);\r\n    });\r\n};\r\n\r\n/**\r\n * Abstract method which will rend the recorder audio stream to the implemented\r\n * transcription service and will retrieve an answer, which will be\r\n * called on the given callback method\r\n *\r\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\r\n * @param {function} callback function which will retrieve the answer\r\n *                            from the service\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\r\n    throw new Error('TranscriptionService.sendRequest is abstract');\r\n};\r\n\r\n/**\r\n * Abstract method which will parse the output from the implemented\r\n * transcription service to the expected format\r\n *\r\n * The transcriber class expect an array of word objects, where each word\r\n * object is one transcribed word by the service.\r\n *\r\n * The expected output of this method is an array of word objects, in\r\n * the correct order. That is, the first object in the array is the first word\r\n * being said, and the last word in the array is the last word being said\r\n *\r\n * @param response the answer from the speech-to-text server which needs to be\r\n *                 formatted\r\n * @return {Array<Word>} an array of Word objects\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.formatResponse = function(response) {\r\n    throw new Error('TranscriptionService.format is abstract');\r\n};\r\n\r\n/**\r\n * Abstract method which will verify that the response from the server is valid\r\n *\r\n * @param response the response from the server\r\n * @return {boolean} true if response is valid, false otherwise\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.verify = function(response) {\r\n    throw new Error('TranscriptionService.verify is abstract');\r\n};\r\n\r\nmodule.exports = TranscriptionService;\r\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        cb(modifiedEvent);\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    this._eventMap[cb] = wrappedCallback;\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[cb]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[cb];\n    delete this._eventMap[cb];\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  const {navigator} = window;\n\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (navigator.mediaDevices &&\n      navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n    result.browser = 'edge';\n    result.version = extractVersion(navigator.userAgent,\n        /Edge\\/(\\d+).(\\d+)$/, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const browserDetails = utils.detectBrowser(window);\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const addIceCandidateNullSupported =\n    window.RTCPeerConnection.prototype.addIceCandidate.length === 0;\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  // support for addIceCandidate(null or undefined)\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!addIceCandidateNullSupported && !arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions. Native support planned for Chrome M77.\n      if (browserDetails.version < 78 &&\n        arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\nexport function fixNegotiationNeeded(window) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (pc.signalingState !== 'stable') {\n      return;\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  const shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(e => Promise.reject(shimError_(e)));\n  };\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window) {\n  if (!('getDisplayMedia' in window.navigator)) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    window.navigator.getDisplayMedia.bind(window.navigator);\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nimport {filterIceServers} from './filtericeservers';\nimport shimRTCPeerConnection from 'rtcpeerconnection-shim';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (window.RTCIceGatherer) {\n    if (!window.RTCIceCandidate) {\n      window.RTCIceCandidate = function RTCIceCandidate(args) {\n        return args;\n      };\n    }\n    if (!window.RTCSessionDescription) {\n      window.RTCSessionDescription = function RTCSessionDescription(args) {\n        return args;\n      };\n    }\n    // this adds an additional event listener to MediaStrackTrack that signals\n    // when a tracks enabled property was changed. Workaround for a bug in\n    // addStream, see below. No longer required in 15025+\n    if (browserDetails.version < 15025) {\n      const origMSTEnabled = Object.getOwnPropertyDescriptor(\n          window.MediaStreamTrack.prototype, 'enabled');\n      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n        set(value) {\n          origMSTEnabled.set.call(this, value);\n          const ev = new Event('enabled');\n          ev.enabled = value;\n          this.dispatchEvent(ev);\n        }\n      });\n    }\n  }\n\n  // ORTC defines the DTMF sender a bit different.\n  // https://github.com/w3c/ortc/issues/714\n  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = new window.RTCDtmfSender(this);\n          } else if (this.track.kind === 'video') {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n  // Edge currently only implements the RTCDtmfSender, not the\n  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*\n  if (window.RTCDtmfSender && !window.RTCDTMFSender) {\n    window.RTCDTMFSender = window.RTCDtmfSender;\n  }\n\n  const RTCPeerConnectionShim = shimRTCPeerConnection(window,\n      browserDetails.version);\n  window.RTCPeerConnection = function RTCPeerConnection(config) {\n    if (config && config.iceServers) {\n      config.iceServers = filterIceServers(config.iceServers,\n        browserDetails.version);\n      utils.log('ICE servers after filtering:', config.iceServers);\n    }\n    return new RTCPeerConnectionShim(config);\n  };\n  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;\n}\n\nexport function shimReplaceTrack(window) {\n  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n  if (window.RTCRtpSender &&\n      !('replaceTrack' in window.RTCRtpSender.prototype)) {\n    window.RTCRtpSender.prototype.replaceTrack =\n        window.RTCRtpSender.prototype.setTrack;\n  }\n}\n","/*\n *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nexport function filterIceServers(iceServers, edgeVersion) {\n  let hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(server => {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n      }\n      const isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(url => {\n        // filter STUN unconditionally.\n        if (url.indexOf('stun:') === 0) {\n          return false;\n        }\n\n        const validTurn = url.startsWith('turn') &&\n            !url.startsWith('turn:[') &&\n            url.includes('transport=udp');\n        if (validTurn && !hasTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return validTurn && !hasTurn;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window) {\n  const browserDetails = utils.detectBrowser(window);\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  // support for addIceCandidate(null or undefined)\n  // as well as ignoring {sdpMid, candidate: \"\"}\n  if (browserDetails.version < 68) {\n    const nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      if (arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params)) {\n            params.encodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(\n              sender.setParameters(params)\n              .catch(() => {})\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track) {\n        const stream = arguments[1];\n        if (stream) {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (!this._localStreams.includes(stream)) {\n            this._localStreams.push(stream);\n          }\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in window.RTCPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeAllowExtmapMixed(window) {\n  /* remove a=extmap-allow-mixed for Chrome < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      desc.sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter = adapterFactory({window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as edgeShim from './edge/edge_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimEdge: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      chromeShim.shimGetUserMedia(window);\n      chromeShim.shimMediaStream(window);\n      chromeShim.shimPeerConnection(window);\n      chromeShim.shimOnTrack(window);\n      chromeShim.shimAddTrackRemoveTrack(window);\n      chromeShim.shimGetSendersWithDtmf(window);\n      chromeShim.shimGetStats(window);\n      chromeShim.shimSenderReceiverGetStats(window);\n      chromeShim.fixNegotiationNeeded(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      firefoxShim.shimGetUserMedia(window);\n      firefoxShim.shimPeerConnection(window);\n      firefoxShim.shimOnTrack(window);\n      firefoxShim.shimRemoveStream(window);\n      firefoxShim.shimSenderGetStats(window);\n      firefoxShim.shimReceiverGetStats(window);\n      firefoxShim.shimRTCDataChannel(window);\n      firefoxShim.shimAddTransceiver(window);\n      firefoxShim.shimCreateOffer(window);\n      firefoxShim.shimCreateAnswer(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = edgeShim;\n\n      edgeShim.shimGetUserMedia(window);\n      edgeShim.shimGetDisplayMedia(window);\n      edgeShim.shimPeerConnection(window);\n      edgeShim.shimReplaceTrack(window);\n\n      // the edge shim implements the full RTCIceCandidate object.\n\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      safariShim.shimRTCIceServerUrls(window);\n      safariShim.shimCreateOfferLegacy(window);\n      safariShim.shimCallbacksAPI(window);\n      safariShim.shimLocalStreamsAPI(window);\n      safariShim.shimRemoteStreamsAPI(window);\n      safariShim.shimTrackEventTransceiver(window);\n      safariShim.shimGetUserMedia(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n"],"sourceRoot":""}